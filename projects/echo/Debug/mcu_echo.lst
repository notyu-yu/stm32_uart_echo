
Debug/mcu_echo.elf:     file format elf32-littlearm
Debug/mcu_echo.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000941

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x00001360 memsz 0x00001360 flags rwx
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x08001360 align 2**16
         filesz 0x00000068 memsz 0x000010a0 flags rw-
    LOAD off    0x000010a0 vaddr 0x200010a0 paddr 0x080013c8 align 2**16
         filesz 0x00000000 memsz 0x00000600 flags rw-
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000114c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080012ec  080012ec  000112ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001358  08001358  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001358  08001358  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001358  08001358  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001358  08001358  00011358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800135c  0800135c  0001135c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001038  20000068  080013c8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010a0  080013c8  000210a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d09  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000215f  00000000  00000000  00028d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000029a  00000000  00000000  0002aefe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003d0  00000000  00000000  0002b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000110  00000000  00000000  0002b568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000331a  00000000  00000000  0002b678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00001abd  00000000  00000000  0002e992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000003c  00000000  00000000  0003044f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006c8  00000000  00000000  0003048c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000117e  00000000  00000000  00030b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 000001f5  00000000  00000000  00031cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  00031ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001a0 l    d  .text	00000000 .text
080012ec l    d  .rodata	00000000 .rodata
08001358 l    d  .ARM.extab	00000000 .ARM.extab
08001358 l    d  .ARM	00000000 .ARM
08001358 l    d  .preinit_array	00000000 .preinit_array
08001358 l    d  .init_array	00000000 .init_array
0800135c l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000068 l    d  .bss	00000000 .bss
200010a0 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 startup_stm32f411xe.o
08000954 l       .text	00000000 LoopCopyDataInit
0800094e l       .text	00000000 CopyDataInit
08000966 l       .text	00000000 LoopFillZerobss
08000962 l       .text	00000000 FillZerobss
08000990 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 crtstuff.c
080012d4 l     O .text	00000000 __EH_FRAME_BEGIN__
08000250 l     F .text	00000000 __do_global_dtors_aux
20000068 l     O .bss	00000000 completed.1
0800135c l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000274 l     F .text	00000000 frame_dummy
2000006c l     O .bss	00000000 object.0
08001358 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mcu_echo.c
08000290 l     F .text	00000034 msg_offset
080002c4 l     F .text	0000001c send
080002e0 l     F .text	0000001c receive
00000000 l    df *ABS*	00000000 uart_dma.c
08000418 l     F .text	00000034 __NVIC_EnableIRQ
0800044c l     F .text	00000050 __NVIC_SetPriority
20000084 l     O .bss	00000004 receiving
20000088 l     O .bss	00000004 transmitting
0800049c l     F .text	00000058 uart_tx_setup
080004f4 l     F .text	00000068 uart_rx_setup
00000000 l    df *ABS*	00000000 uart.c
080006d8 l     F .text	00000054 uart_pin_setup
080007b8 l     F .text	00000054 uart_enable
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
080010e8 l     F .text	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrk.c
2000109c l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000008 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
08001360 l       .fini_array	00000000 __fini_array_end
0800135c l       .fini_array	00000000 __fini_array_start
0800135c l       .init_array	00000000 __init_array_end
08001358 l       .preinit_array	00000000 __preinit_array_end
08001358 l       .init_array	00000000 __init_array_start
08001358 l       .preinit_array	00000000 __preinit_array_start
08000990  w    F .text	00000002 RTC_Alarm_IRQHandler
080012a8 g     F .text	00000010 _malloc_usable_size_r
08000990  w    F .text	00000002 EXTI2_IRQHandler
080005c8 g     F .text	00000058 uart_rx_start
08000990  w    F .text	00000002 DebugMon_Handler
08000990  w    F .text	00000002 SPI4_IRQHandler
08000990  w    F .text	00000002 TIM1_CC_IRQHandler
08000990  w    F .text	00000002 DMA2_Stream5_IRQHandler
08000990  w    F .text	00000002 HardFault_Handler
08000634 g     F .text	0000003c DMA1_Stream5_IRQHandler
0800129c g     F .text	0000000c __malloc_unlock
080005b4 g     F .text	00000014 uart_tx_wait
00000400 g       *ABS*	00000000 _Min_Stack_Size
08000990  w    F .text	00000002 SysTick_Handler
08000990  w    F .text	00000002 PVD_IRQHandler
08000990  w    F .text	00000002 SDIO_IRQHandler
0800101c g     F .text	00000034 memmove
08000990  w    F .text	00000002 TAMP_STAMP_IRQHandler
08001360 g       *ABS*	00000000 _sidata
08000990  w    F .text	00000002 PendSV_Handler
08000990  w    F .text	00000002 NMI_Handler
08001358 g       .ARM	00000000 __exidx_end
08000990  w    F .text	00000002 EXTI3_IRQHandler
08000990  w    F .text	00000002 TIM1_UP_TIM10_IRQHandler
20001098 g     O .bss	00000004 errno
080012ec g       .text	00000000 _etext
20000068 g       .bss	00000000 _sbss
08000990  w    F .text	00000002 I2C3_ER_IRQHandler
08001000 g     F .text	0000001c memcpy
08000620 g     F .text	00000014 uart_rx_wait
2000008c g     O .bss	00001000 msg_buffer
08000ae4 g     F .text	000001fc _svfprintf_r
08000990  w    F .text	00000002 EXTI0_IRQHandler
08000990  w    F .text	00000002 I2C2_EV_IRQHandler
08000990  w    F .text	00000002 DMA1_Stream2_IRQHandler
08000990  w    F .text	00000002 FPU_IRQHandler
20000000 g     O .data	00000004 SystemCoreClock
08000990  w    F .text	00000002 UsageFault_Handler
08000990  w    F .text	00000002 DMA2_Stream2_IRQHandler
20000068 g       .bss	00000000 __bss_start__
20000000 g       .data	00000000 _sdata
08000990  w    F .text	00000002 SPI1_IRQHandler
08001270 g     F .text	00000020 _sbrk_r
08000990  w    F .text	00000002 TIM1_BRK_TIM9_IRQHandler
08001358 g       .ARM	00000000 __exidx_start
08000990  w    F .text	00000002 DMA2_Stream3_IRQHandler
08001210 g     F .text	0000005e _realloc_r
08000994 g     F .text	00000048 __libc_init_array
080012b8 g     F .text	0000001c _sbrk
08000990  w    F .text	00000002 USART6_IRQHandler
080012d4 g     F .text	00000000 _init
0800055c g     F .text	00000058 uart_tx_start
200010a0 g       .bss	00000000 _ebss
08000940  w    F .text	00000038 Reset_Handler
2000108c g     O .bss	00000001 __lock___malloc_recursive_mutex
08000990  w    F .text	00000002 DMA2_Stream0_IRQHandler
0800072c g     F .text	00000028 led_on
08000990  w    F .text	00000002 TIM4_IRQHandler
200010a0 g       ._user_heap_stack	00000000 end
08000990  w    F .text	00000002 I2C1_EV_IRQHandler
08000a2e g     F .text	00000002 __retarget_lock_release_recursive
08000670 g     F .text	0000002c DMA1_Stream6_IRQHandler
08000a30 g     F .text	000000b4 __ssputs_r
08000990  w    F .text	00000002 DMA1_Stream1_IRQHandler
0800080c g     F .text	00000012 uart_init
080001b0 g     F .text	00000000 memchr
200010a0 g       .bss	00000000 __bss_end__
08001050 g     F .text	00000098 _free_r
08000990  w    F .text	00000002 TIM3_IRQHandler
08000990  w    F .text	00000002 RCC_IRQHandler
00000200 g       *ABS*	00000000 _Min_Heap_Size
08000990 g       .text	00000002 Default_Handler
08000990  w    F .text	00000002 EXTI15_10_IRQHandler
08000990  w    F .text	00000002 ADC_IRQHandler
08000990  w    F .text	00000002 DMA1_Stream7_IRQHandler
08000990  w    F .text	00000002 SPI5_IRQHandler
08000990  w    F .text	00000002 TIM5_IRQHandler
08000990  w    F .text	00000002 DMA2_Stream7_IRQHandler
08000990  w    F .text	00000002 I2C3_EV_IRQHandler
08000990  w    F .text	00000002 EXTI9_5_IRQHandler
08000990  w    F .text	00000002 RTC_WKUP_IRQHandler
0800069c g     F .text	0000003c uart_dma_init
08001290 g     F .text	0000000c __malloc_lock
08000990  w    F .text	00000002 SPI2_IRQHandler
08000a2c g     F .text	00000002 __retarget_lock_acquire_recursive
080009dc g     F .text	00000010 memset
08000990  w    F .text	00000002 MemManage_Handler
080002fc g     F .text	0000011c main
08000990  w    F .text	00000002 DMA1_Stream0_IRQHandler
08000990  w    F .text	00000002 SVC_Handler
08001128 g     F .text	000000e8 _malloc_r
08000990  w    F .text	00000002 EXTI4_IRQHandler
08000820 g     F .text	0000005c SystemInit
080012e0 g     F .text	00000000 _fini
080009ec g     F .text	00000040 sprintf
08000754 g     F .text	00000028 led_off
08000ce0 g     F .text	000000da _printf_common
20000004 g     O .data	00000004 _impure_ptr
08000ae4 g     F .text	000001fc _svfiprintf_r
08000990  w    F .text	00000002 WWDG_IRQHandler
08000990  w    F .text	00000002 TIM2_IRQHandler
0800077c g     F .text	0000003c led_init
0800087c g     F .text	000000c4 set_sysclk_to_100
08000990  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
08000990  w    F .text	00000002 TIM1_TRG_COM_TIM11_IRQHandler
20020000 g       .isr_vector	00000000 _estack
08000990  w    F .text	00000002 EXTI1_IRQHandler
20000068 g       .data	00000000 _edata
08000990  w    F .text	00000002 USART2_IRQHandler
08000000 g     O .isr_vector	00000000 g_pfnVectors
08000990  w    F .text	00000002 I2C2_ER_IRQHandler
080009ec g     F .text	00000040 siprintf
08000990  w    F .text	00000002 DMA2_Stream1_IRQHandler
08000990  w    F .text	00000002 FLASH_IRQHandler
08000990  w    F .text	00000002 DMA2_Stream4_IRQHandler
08000990  w    F .text	00000002 BusFault_Handler
08000990  w    F .text	00000002 USART1_IRQHandler
080001a0 g     F .text	00000010 strlen
08000990  w    F .text	00000002 OTG_FS_IRQHandler
08000dbc g     F .text	00000244 _printf_i
08000990  w    F .text	00000002 SPI3_IRQHandler
08000990  w    F .text	00000002 DMA1_Stream4_IRQHandler
20001094 g     O .bss	00000004 __malloc_sbrk_start
08000990  w    F .text	00000002 I2C1_ER_IRQHandler
20001090 g     O .bss	00000004 __malloc_free_list
08000990  w    F .text	00000002 DMA2_Stream6_IRQHandler
08000990  w    F .text	00000002 DMA1_Stream3_IRQHandler



Disassembly of section .text:

080001a0 <strlen>:
 80001a0:	4603      	mov	r3, r0
 80001a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a6:	2a00      	cmp	r2, #0
 80001a8:	d1fb      	bne.n	80001a2 <strlen+0x2>
 80001aa:	1a18      	subs	r0, r3, r0
 80001ac:	3801      	subs	r0, #1
 80001ae:	4770      	bx	lr

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000068 	.word	0x20000068
 800026c:	00000000 	.word	0x00000000
 8000270:	080012d4 	.word	0x080012d4

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000006c 	.word	0x2000006c
 800028c:	080012d4 	.word	0x080012d4

08000290 <msg_offset>:
#include "uart_dma.h"

#define READSIZE(buffer) *(size_t *)buffer

// Returns pointer to msg without padding
static char * msg_offset(char * msg) {
 8000290:	b084      	sub	sp, #16
 8000292:	9001      	str	r0, [sp, #4]
	for (size_t i=0; i<BUFFERSIZE; i++) {
 8000294:	2300      	movs	r3, #0
 8000296:	9303      	str	r3, [sp, #12]
 8000298:	e00c      	b.n	80002b4 <msg_offset+0x24>
		if (msg[i]) {
 800029a:	9a01      	ldr	r2, [sp, #4]
 800029c:	9b03      	ldr	r3, [sp, #12]
 800029e:	4413      	add	r3, r2
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d003      	beq.n	80002ae <msg_offset+0x1e>
			return msg + i;
 80002a6:	9a01      	ldr	r2, [sp, #4]
 80002a8:	9b03      	ldr	r3, [sp, #12]
 80002aa:	4413      	add	r3, r2
 80002ac:	e007      	b.n	80002be <msg_offset+0x2e>
	for (size_t i=0; i<BUFFERSIZE; i++) {
 80002ae:	9b03      	ldr	r3, [sp, #12]
 80002b0:	3301      	adds	r3, #1
 80002b2:	9303      	str	r3, [sp, #12]
 80002b4:	9b03      	ldr	r3, [sp, #12]
 80002b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80002ba:	d3ee      	bcc.n	800029a <msg_offset+0xa>
		}
	}
	return msg;
 80002bc:	9b01      	ldr	r3, [sp, #4]
}
 80002be:	4618      	mov	r0, r3
 80002c0:	b004      	add	sp, #16
 80002c2:	4770      	bx	lr

080002c4 <send>:

// Send size bytes at data pointer, using method defined by USE_DMA macro
static void send(void * data, size_t size) {
 80002c4:	b500      	push	{lr}
 80002c6:	b083      	sub	sp, #12
 80002c8:	9001      	str	r0, [sp, #4]
 80002ca:	9100      	str	r1, [sp, #0]
	if (USE_DMA) {
		uart_tx_start(data, size);
 80002cc:	9900      	ldr	r1, [sp, #0]
 80002ce:	9801      	ldr	r0, [sp, #4]
 80002d0:	f000 f944 	bl	800055c <uart_tx_start>
		uart_tx_wait();
 80002d4:	f000 f96e 	bl	80005b4 <uart_tx_wait>
	} else {
		uart_send(data, size);
	}
}
 80002d8:	bf00      	nop
 80002da:	b003      	add	sp, #12
 80002dc:	f85d fb04 	ldr.w	pc, [sp], #4

080002e0 <receive>:

// Receive size bytes at buffer pointer, using method defined by USE_DMA macro
static void receive(void * buffer, size_t size) {
 80002e0:	b500      	push	{lr}
 80002e2:	b083      	sub	sp, #12
 80002e4:	9001      	str	r0, [sp, #4]
 80002e6:	9100      	str	r1, [sp, #0]
	if (USE_DMA) {
		uart_rx_start(buffer, size);
 80002e8:	9900      	ldr	r1, [sp, #0]
 80002ea:	9801      	ldr	r0, [sp, #4]
 80002ec:	f000 f96c 	bl	80005c8 <uart_rx_start>
		uart_rx_wait();
 80002f0:	f000 f996 	bl	8000620 <uart_rx_wait>
	} else {
		uart_receive(buffer, size);
	}
}
 80002f4:	bf00      	nop
 80002f6:	b003      	add	sp, #12
 80002f8:	f85d fb04 	ldr.w	pc, [sp], #4

080002fc <main>:

int main(void) {
 80002fc:	b500      	push	{lr}
 80002fe:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8000302:	b083      	sub	sp, #12
	char debug_msg[BUFFERSIZE] = {0};
 8000304:	ab02      	add	r3, sp, #8
 8000306:	2200      	movs	r2, #0
 8000308:	f843 2c08 	str.w	r2, [r3, #-8]
 800030c:	3b04      	subs	r3, #4
 800030e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8000312:	2100      	movs	r1, #0
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fb61 	bl	80009dc <memset>
	char * stripped_msg;
	size_t received_size=0;
 800031a:	2300      	movs	r3, #0
 800031c:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
 8000320:	f102 0204 	add.w	r2, r2, #4
 8000324:	6013      	str	r3, [r2, #0]

	uart_init();
 8000326:	f000 fa71 	bl	800080c <uart_init>
	led_init();
 800032a:	f000 fa27 	bl	800077c <led_init>
	uart_dma_init();
 800032e:	f000 f9b5 	bl	800069c <uart_dma_init>

	while(1) {
		// Read received buffer size
		led_on(GREEN);
 8000332:	200c      	movs	r0, #12
 8000334:	f000 f9fa 	bl	800072c <led_on>
		receive(msg_buffer, sizeof(size_t));
 8000338:	2104      	movs	r1, #4
 800033a:	4835      	ldr	r0, [pc, #212]	; (8000410 <main+0x114>)
 800033c:	f7ff ffd0 	bl	80002e0 <receive>
		received_size = READSIZE(msg_buffer) + PADDINGSIZE;
 8000340:	4b33      	ldr	r3, [pc, #204]	; (8000410 <main+0x114>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	3304      	adds	r3, #4
 8000346:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
 800034a:	f102 0204 	add.w	r2, r2, #4
 800034e:	6013      	str	r3, [r2, #0]
		memset(msg_buffer, 0, sizeof(size_t));
 8000350:	2204      	movs	r2, #4
 8000352:	2100      	movs	r1, #0
 8000354:	482e      	ldr	r0, [pc, #184]	; (8000410 <main+0x114>)
 8000356:	f000 fb41 	bl	80009dc <memset>
		led_off(GREEN);
 800035a:	200c      	movs	r0, #12
 800035c:	f000 f9fa 	bl	8000754 <led_off>

		// Send back buffer content
		if (received_size > BUFFERSIZE) {
 8000360:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 8000364:	f103 0304 	add.w	r3, r3, #4
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800036e:	d91e      	bls.n	80003ae <main+0xb2>
			// Message too large
			led_on(ORANGE);
 8000370:	200d      	movs	r0, #13
 8000372:	f000 f9db 	bl	800072c <led_on>
			sprintf(debug_msg, "Attempting to read %u bytes larger than buffer size %d.\n", (unsigned int)received_size, BUFFERSIZE);
 8000376:	a802      	add	r0, sp, #8
 8000378:	3808      	subs	r0, #8
 800037a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800037e:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
 8000382:	f102 0204 	add.w	r2, r2, #4
 8000386:	6812      	ldr	r2, [r2, #0]
 8000388:	4922      	ldr	r1, [pc, #136]	; (8000414 <main+0x118>)
 800038a:	f000 fb2f 	bl	80009ec <siprintf>
			send(debug_msg, strlen(debug_msg));
 800038e:	ab02      	add	r3, sp, #8
 8000390:	3b08      	subs	r3, #8
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff04 	bl	80001a0 <strlen>
 8000398:	4602      	mov	r2, r0
 800039a:	ab02      	add	r3, sp, #8
 800039c:	3b08      	subs	r3, #8
 800039e:	4611      	mov	r1, r2
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff ff8f 	bl	80002c4 <send>
			led_off(ORANGE);
 80003a6:	200d      	movs	r0, #13
 80003a8:	f000 f9d4 	bl	8000754 <led_off>
 80003ac:	e7c1      	b.n	8000332 <main+0x36>
		} else {
			// Read message
			led_on(RED);
 80003ae:	200e      	movs	r0, #14
 80003b0:	f000 f9bc 	bl	800072c <led_on>
			receive(msg_buffer, received_size);
 80003b4:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80003b8:	f103 0304 	add.w	r3, r3, #4
 80003bc:	6819      	ldr	r1, [r3, #0]
 80003be:	4814      	ldr	r0, [pc, #80]	; (8000410 <main+0x114>)
 80003c0:	f7ff ff8e 	bl	80002e0 <receive>
			led_off(RED);
 80003c4:	200e      	movs	r0, #14
 80003c6:	f000 f9c5 	bl	8000754 <led_off>

			// Echo message
			led_on(BLUE);
 80003ca:	200f      	movs	r0, #15
 80003cc:	f000 f9ae 	bl	800072c <led_on>
			stripped_msg = msg_offset(msg_buffer);
 80003d0:	480f      	ldr	r0, [pc, #60]	; (8000410 <main+0x114>)
 80003d2:	f7ff ff5d 	bl	8000290 <msg_offset>
 80003d6:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80003da:	6018      	str	r0, [r3, #0]
			send(stripped_msg, strlen(stripped_msg));
 80003dc:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80003e0:	6818      	ldr	r0, [r3, #0]
 80003e2:	f7ff fedd 	bl	80001a0 <strlen>
 80003e6:	4603      	mov	r3, r0
 80003e8:	4619      	mov	r1, r3
 80003ea:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80003ee:	6818      	ldr	r0, [r3, #0]
 80003f0:	f7ff ff68 	bl	80002c4 <send>
			memset(msg_buffer, 0, received_size);
 80003f4:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80003f8:	f103 0304 	add.w	r3, r3, #4
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	2100      	movs	r1, #0
 8000400:	4803      	ldr	r0, [pc, #12]	; (8000410 <main+0x114>)
 8000402:	f000 faeb 	bl	80009dc <memset>
			led_off(BLUE);
 8000406:	200f      	movs	r0, #15
 8000408:	f000 f9a4 	bl	8000754 <led_off>
		led_on(GREEN);
 800040c:	e791      	b.n	8000332 <main+0x36>
 800040e:	bf00      	nop
 8000410:	2000008c 	.word	0x2000008c
 8000414:	080012ec 	.word	0x080012ec

08000418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000418:	b082      	sub	sp, #8
 800041a:	4603      	mov	r3, r0
 800041c:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8000420:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8000424:	2b00      	cmp	r3, #0
 8000426:	db0c      	blt.n	8000442 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000428:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800042c:	f003 021f 	and.w	r2, r3, #31
 8000430:	4905      	ldr	r1, [pc, #20]	; (8000448 <__NVIC_EnableIRQ+0x30>)
 8000432:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8000436:	095b      	lsrs	r3, r3, #5
 8000438:	2001      	movs	r0, #1
 800043a:	fa00 f202 	lsl.w	r2, r0, r2
 800043e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000442:	bf00      	nop
 8000444:	b002      	add	sp, #8
 8000446:	4770      	bx	lr
 8000448:	e000e100 	.word	0xe000e100

0800044c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800044c:	b082      	sub	sp, #8
 800044e:	4603      	mov	r3, r0
 8000450:	9100      	str	r1, [sp, #0]
 8000452:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8000456:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800045a:	2b00      	cmp	r3, #0
 800045c:	db0a      	blt.n	8000474 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800045e:	9b00      	ldr	r3, [sp, #0]
 8000460:	b2da      	uxtb	r2, r3
 8000462:	490c      	ldr	r1, [pc, #48]	; (8000494 <__NVIC_SetPriority+0x48>)
 8000464:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8000468:	0112      	lsls	r2, r2, #4
 800046a:	b2d2      	uxtb	r2, r2
 800046c:	440b      	add	r3, r1
 800046e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000472:	e00b      	b.n	800048c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000474:	9b00      	ldr	r3, [sp, #0]
 8000476:	b2da      	uxtb	r2, r3
 8000478:	4907      	ldr	r1, [pc, #28]	; (8000498 <__NVIC_SetPriority+0x4c>)
 800047a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800047e:	f003 030f 	and.w	r3, r3, #15
 8000482:	3b04      	subs	r3, #4
 8000484:	0112      	lsls	r2, r2, #4
 8000486:	b2d2      	uxtb	r2, r2
 8000488:	440b      	add	r3, r1
 800048a:	761a      	strb	r2, [r3, #24]
}
 800048c:	bf00      	nop
 800048e:	b002      	add	sp, #8
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	e000e100 	.word	0xe000e100
 8000498:	e000ed00 	.word	0xe000ed00

0800049c <uart_tx_setup>:
static int transmitting=0;

// Setup uart transmission
static void uart_tx_setup(void) {
	// Clear control register
	DMA1_Stream6->CR = 0;
 800049c:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <uart_tx_setup+0x54>)
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
	// Wait for DMA to disable
	while(DMA1_Stream6->CR & (1<<0));
 80004a2:	bf00      	nop
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <uart_tx_setup+0x54>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f003 0301 	and.w	r3, r3, #1
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d1f9      	bne.n	80004a4 <uart_tx_setup+0x8>
	// Select channel 4 for usart2_tx
	DMA1_Stream6->CR |= (0x4<<25);
 80004b0:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <uart_tx_setup+0x54>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <uart_tx_setup+0x54>)
 80004b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80004ba:	6013      	str	r3, [r2, #0]
	// Enable tx complete interrupt
	DMA1_Stream6->CR |= DMA_SxCR_TCIE;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <uart_tx_setup+0x54>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a0b      	ldr	r2, [pc, #44]	; (80004f0 <uart_tx_setup+0x54>)
 80004c2:	f043 0310 	orr.w	r3, r3, #16
 80004c6:	6013      	str	r3, [r2, #0]
	// Enable memory increment mode
	DMA1_Stream6->CR |= DMA_SxCR_MINC;
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <uart_tx_setup+0x54>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <uart_tx_setup+0x54>)
 80004ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004d2:	6013      	str	r3, [r2, #0]
	// Priority level high
	DMA1_Stream6->CR |= (0x2<<16);
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <uart_tx_setup+0x54>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <uart_tx_setup+0x54>)
 80004da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004de:	6013      	str	r3, [r2, #0]
	// DIR bit set to 01: source SxM0AR, dest SxPAR
	DMA1_Stream6->CR |= (0x1 << 6);
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <uart_tx_setup+0x54>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a02      	ldr	r2, [pc, #8]	; (80004f0 <uart_tx_setup+0x54>)
 80004e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ea:	6013      	str	r3, [r2, #0]
}
 80004ec:	bf00      	nop
 80004ee:	4770      	bx	lr
 80004f0:	400260a0 	.word	0x400260a0

080004f4 <uart_rx_setup>:

// Setup uart reception
static void uart_rx_setup(void) {
	// Enable receive DMA
	USART2->CR3 |= USART_CR3_DMAR;
 80004f4:	4b17      	ldr	r3, [pc, #92]	; (8000554 <uart_rx_setup+0x60>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	4a16      	ldr	r2, [pc, #88]	; (8000554 <uart_rx_setup+0x60>)
 80004fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004fe:	6153      	str	r3, [r2, #20]
	// Clear control register
	DMA1_Stream5->CR = 0;
 8000500:	4b15      	ldr	r3, [pc, #84]	; (8000558 <uart_rx_setup+0x64>)
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
	// Wait for DMA to disable
	while(DMA1_Stream5->CR & (1<<0));
 8000506:	bf00      	nop
 8000508:	4b13      	ldr	r3, [pc, #76]	; (8000558 <uart_rx_setup+0x64>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f003 0301 	and.w	r3, r3, #1
 8000510:	2b00      	cmp	r3, #0
 8000512:	d1f9      	bne.n	8000508 <uart_rx_setup+0x14>
	// Select channel 4 for usart2_rx
	DMA1_Stream5->CR |= (0x4<<25);
 8000514:	4b10      	ldr	r3, [pc, #64]	; (8000558 <uart_rx_setup+0x64>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0f      	ldr	r2, [pc, #60]	; (8000558 <uart_rx_setup+0x64>)
 800051a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800051e:	6013      	str	r3, [r2, #0]
	// Enable rx complete interrupt
	DMA1_Stream5->CR |= DMA_SxCR_TCIE;
 8000520:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <uart_rx_setup+0x64>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <uart_rx_setup+0x64>)
 8000526:	f043 0310 	orr.w	r3, r3, #16
 800052a:	6013      	str	r3, [r2, #0]
	// Enable memory increment mode
	DMA1_Stream5->CR |= DMA_SxCR_MINC;
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <uart_rx_setup+0x64>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <uart_rx_setup+0x64>)
 8000532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000536:	6013      	str	r3, [r2, #0]
	// Priority level high
	DMA1_Stream5->CR |= (0x2<<16);
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <uart_rx_setup+0x64>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <uart_rx_setup+0x64>)
 800053e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000542:	6013      	str	r3, [r2, #0]
	// DIR bit set to 00: source SxPAR, dest SxM0AR
	DMA1_Stream5->CR &= ~(0xC << 6);
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <uart_rx_setup+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a03      	ldr	r2, [pc, #12]	; (8000558 <uart_rx_setup+0x64>)
 800054a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800054e:	6013      	str	r3, [r2, #0]
}
 8000550:	bf00      	nop
 8000552:	4770      	bx	lr
 8000554:	40004400 	.word	0x40004400
 8000558:	40026088 	.word	0x40026088

0800055c <uart_tx_start>:

// Start uart transmission of size bytes of data
void uart_tx_start(void * data, size_t size) {
 800055c:	b500      	push	{lr}
 800055e:	b083      	sub	sp, #12
 8000560:	9001      	str	r0, [sp, #4]
 8000562:	9100      	str	r1, [sp, #0]
	uart_tx_wait();
 8000564:	f000 f826 	bl	80005b4 <uart_tx_wait>
	uart_tx_setup();
 8000568:	f7ff ff98 	bl	800049c <uart_tx_setup>

	// Source memory address
	DMA1_Stream6->M0AR = (uint32_t)data;
 800056c:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <uart_tx_start+0x4c>)
 800056e:	9b01      	ldr	r3, [sp, #4]
 8000570:	60d3      	str	r3, [r2, #12]
	// Destination memory address
	DMA1_Stream6->PAR = (uint32_t)&(USART2->DR);
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <uart_tx_start+0x4c>)
 8000574:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <uart_tx_start+0x50>)
 8000576:	609a      	str	r2, [r3, #8]
	// Transfer size
	DMA1_Stream6->NDTR = size;
 8000578:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <uart_tx_start+0x4c>)
 800057a:	9b00      	ldr	r3, [sp, #0]
 800057c:	6053      	str	r3, [r2, #4]

	// Enable transfer Complete interrupt
	NVIC_SetPriority(DMA1_Stream6_IRQn, 3);
 800057e:	2103      	movs	r1, #3
 8000580:	2011      	movs	r0, #17
 8000582:	f7ff ff63 	bl	800044c <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000586:	2011      	movs	r0, #17
 8000588:	f7ff ff46 	bl	8000418 <__NVIC_EnableIRQ>

	// Enable DMA
	DMA1_Stream6->CR |= DMA_SxCR_EN;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <uart_tx_start+0x4c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a05      	ldr	r2, [pc, #20]	; (80005a8 <uart_tx_start+0x4c>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	6013      	str	r3, [r2, #0]

	transmitting=1;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <uart_tx_start+0x54>)
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	b003      	add	sp, #12
 80005a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80005a6:	bf00      	nop
 80005a8:	400260a0 	.word	0x400260a0
 80005ac:	40004404 	.word	0x40004404
 80005b0:	20000088 	.word	0x20000088

080005b4 <uart_tx_wait>:

// Wait for uart transmission to finish
void uart_tx_wait(void) {
	while (transmitting);
 80005b4:	bf00      	nop
 80005b6:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <uart_tx_wait+0x10>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d1fb      	bne.n	80005b6 <uart_tx_wait+0x2>
}
 80005be:	bf00      	nop
 80005c0:	bf00      	nop
 80005c2:	4770      	bx	lr
 80005c4:	20000088 	.word	0x20000088

080005c8 <uart_rx_start>:

// Start uart reception of size bytes of data into buffer
void uart_rx_start(void * buffer, size_t size) {
 80005c8:	b500      	push	{lr}
 80005ca:	b083      	sub	sp, #12
 80005cc:	9001      	str	r0, [sp, #4]
 80005ce:	9100      	str	r1, [sp, #0]
	uart_rx_wait();
 80005d0:	f000 f826 	bl	8000620 <uart_rx_wait>
	uart_rx_setup();
 80005d4:	f7ff ff8e 	bl	80004f4 <uart_rx_setup>

	// Source memory address
	DMA1_Stream5->PAR = (uint32_t)&(USART2->DR);
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <uart_rx_start+0x4c>)
 80005da:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <uart_rx_start+0x50>)
 80005dc:	609a      	str	r2, [r3, #8]
	// Destination memory address
	DMA1_Stream5->M0AR = (uint32_t)buffer;
 80005de:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <uart_rx_start+0x4c>)
 80005e0:	9b01      	ldr	r3, [sp, #4]
 80005e2:	60d3      	str	r3, [r2, #12]
	// Transfer size
	DMA1_Stream5->NDTR = size;
 80005e4:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <uart_rx_start+0x4c>)
 80005e6:	9b00      	ldr	r3, [sp, #0]
 80005e8:	6053      	str	r3, [r2, #4]

	// Enable transfer Complete interrupt
	NVIC_SetPriority(DMA1_Stream5_IRQn, 3);
 80005ea:	2103      	movs	r1, #3
 80005ec:	2010      	movs	r0, #16
 80005ee:	f7ff ff2d 	bl	800044c <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005f2:	2010      	movs	r0, #16
 80005f4:	f7ff ff10 	bl	8000418 <__NVIC_EnableIRQ>

	// Enable DMA
	DMA1_Stream5->CR |= DMA_SxCR_EN;
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <uart_rx_start+0x4c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a05      	ldr	r2, [pc, #20]	; (8000614 <uart_rx_start+0x4c>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	6013      	str	r3, [r2, #0]

	receiving=1;
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <uart_rx_start+0x54>)
 8000606:	2201      	movs	r2, #1
 8000608:	601a      	str	r2, [r3, #0]
}
 800060a:	bf00      	nop
 800060c:	b003      	add	sp, #12
 800060e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000612:	bf00      	nop
 8000614:	40026088 	.word	0x40026088
 8000618:	40004404 	.word	0x40004404
 800061c:	20000084 	.word	0x20000084

08000620 <uart_rx_wait>:

// Wait for uart reception to finish
void uart_rx_wait(void) {
	while (receiving);
 8000620:	bf00      	nop
 8000622:	4b03      	ldr	r3, [pc, #12]	; (8000630 <uart_rx_wait+0x10>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1fb      	bne.n	8000622 <uart_rx_wait+0x2>
}
 800062a:	bf00      	nop
 800062c:	bf00      	nop
 800062e:	4770      	bx	lr
 8000630:	20000084 	.word	0x20000084

08000634 <DMA1_Stream5_IRQHandler>:

// UART reception finish interrupt
void DMA1_Stream5_IRQHandler(void)
{
    // clear stream receive complete interrupt - bit11 for stream 5
    if (DMA1->HISR & DMA_HISR_TCIF5) {
 8000634:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <DMA1_Stream5_IRQHandler+0x30>)
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800063c:	2b00      	cmp	r3, #0
 800063e:	d00e      	beq.n	800065e <DMA1_Stream5_IRQHandler+0x2a>
        // clear interrupt
        DMA1->HIFCR |= DMA_HISR_TCIF5;
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <DMA1_Stream5_IRQHandler+0x30>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	4a07      	ldr	r2, [pc, #28]	; (8000664 <DMA1_Stream5_IRQHandler+0x30>)
 8000646:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800064a:	60d3      	str	r3, [r2, #12]
		receiving = 0;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <DMA1_Stream5_IRQHandler+0x34>)
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
		// Disable receive DMA
		USART2->CR3 &= ~USART_CR3_DMAR;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <DMA1_Stream5_IRQHandler+0x38>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <DMA1_Stream5_IRQHandler+0x38>)
 8000658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800065c:	6153      	str	r3, [r2, #20]
    }
}
 800065e:	bf00      	nop
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40026000 	.word	0x40026000
 8000668:	20000084 	.word	0x20000084
 800066c:	40004400 	.word	0x40004400

08000670 <DMA1_Stream6_IRQHandler>:

// UART transmission finish interrupt
void DMA1_Stream6_IRQHandler(void)
{
    // clear stream transfer complete interrupt - bit21 for stream 6
    if (DMA1->HISR & DMA_HISR_TCIF6) {
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <DMA1_Stream6_IRQHandler+0x24>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000678:	2b00      	cmp	r3, #0
 800067a:	d008      	beq.n	800068e <DMA1_Stream6_IRQHandler+0x1e>
        // clear interrupt
        DMA1->HIFCR |= DMA_HISR_TCIF6;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <DMA1_Stream6_IRQHandler+0x24>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <DMA1_Stream6_IRQHandler+0x24>)
 8000682:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000686:	60d3      	str	r3, [r2, #12]
		transmitting = 0;
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <DMA1_Stream6_IRQHandler+0x28>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
    }
}
 800068e:	bf00      	nop
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40026000 	.word	0x40026000
 8000698:	20000088 	.word	0x20000088

0800069c <uart_dma_init>:

// Setup UART DMA
void uart_dma_init(void) {
	// Enable transmit DMA
	USART2->CR3 |= USART_CR3_DMAT;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <uart_dma_init+0x34>)
 800069e:	695b      	ldr	r3, [r3, #20]
 80006a0:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <uart_dma_init+0x34>)
 80006a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a6:	6153      	str	r3, [r2, #20]
	// Enable receive DMA
	USART2->CR3 |= USART_CR3_DMAR;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <uart_dma_init+0x34>)
 80006aa:	695b      	ldr	r3, [r3, #20]
 80006ac:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <uart_dma_init+0x34>)
 80006ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b2:	6153      	str	r3, [r2, #20]
	// Clear TC bit
	USART2->SR &= ~USART_SR_TC;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <uart_dma_init+0x34>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a05      	ldr	r2, [pc, #20]	; (80006d0 <uart_dma_init+0x34>)
 80006ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006be:	6013      	str	r3, [r2, #0]
	// Enable DMA1 clock
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <uart_dma_init+0x38>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c4:	4a03      	ldr	r2, [pc, #12]	; (80006d4 <uart_dma_init+0x38>)
 80006c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006cc:	bf00      	nop
 80006ce:	4770      	bx	lr
 80006d0:	40004400 	.word	0x40004400
 80006d4:	40023800 	.word	0x40023800

080006d8 <uart_pin_setup>:
}

// Setup GPIO A2 and A3 pins for UART
static void uart_pin_setup(void) {
    // Enable GPIOA clock, bit 0 on AHB1ENR
    RCC->AHB1ENR |= (1 << 0);
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <uart_pin_setup+0x4c>)
 80006da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006dc:	4a11      	ldr	r2, [pc, #68]	; (8000724 <uart_pin_setup+0x4c>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	6313      	str	r3, [r2, #48]	; 0x30

    // Set pin modes as alternate mode 7 (pins 2 and 3)
    // USART2 TX and RX pins are PA2 and PA3 respectively
    GPIOA->MODER &= ~(0xFU << 4); // Reset bits 4:5 for PA2 and 6:7 for PA3
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <uart_pin_setup+0x50>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <uart_pin_setup+0x50>)
 80006ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80006ee:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0xAU << 4); // Set   bits 4:5 for PA2 and 6:7 for PA3 to alternate mode (10)
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <uart_pin_setup+0x50>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a0c      	ldr	r2, [pc, #48]	; (8000728 <uart_pin_setup+0x50>)
 80006f6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80006fa:	6013      	str	r3, [r2, #0]

    // Set pin modes as high speed
    GPIOA->OSPEEDR |= 0x000000A0; // Set pin 2/3 to high speed mode (0b10)
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <uart_pin_setup+0x50>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	4a09      	ldr	r2, [pc, #36]	; (8000728 <uart_pin_setup+0x50>)
 8000702:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000706:	6093      	str	r3, [r2, #8]

    // Choose AF7 for USART2 in Alternate Function registers
    GPIOA->AFR[0] |= (0x7 << 8); // for pin A2
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <uart_pin_setup+0x50>)
 800070a:	6a1b      	ldr	r3, [r3, #32]
 800070c:	4a06      	ldr	r2, [pc, #24]	; (8000728 <uart_pin_setup+0x50>)
 800070e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000712:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (0x7 << 12); // for pin A3
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <uart_pin_setup+0x50>)
 8000716:	6a1b      	ldr	r3, [r3, #32]
 8000718:	4a03      	ldr	r2, [pc, #12]	; (8000728 <uart_pin_setup+0x50>)
 800071a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800071e:	6213      	str	r3, [r2, #32]
}
 8000720:	bf00      	nop
 8000722:	4770      	bx	lr
 8000724:	40023800 	.word	0x40023800
 8000728:	40020000 	.word	0x40020000

0800072c <led_on>:

// Turn on LED
void led_on(led l) {
 800072c:	b082      	sub	sp, #8
 800072e:	4603      	mov	r3, r0
 8000730:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIOD->ODR |= (1U<<l);
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <led_on+0x24>)
 8000736:	695a      	ldr	r2, [r3, #20]
 8000738:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800073c:	2101      	movs	r1, #1
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	4903      	ldr	r1, [pc, #12]	; (8000750 <led_on+0x24>)
 8000744:	4313      	orrs	r3, r2
 8000746:	614b      	str	r3, [r1, #20]
}
 8000748:	bf00      	nop
 800074a:	b002      	add	sp, #8
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40020c00 	.word	0x40020c00

08000754 <led_off>:

// Turn off LED
void led_off(led l) {
 8000754:	b082      	sub	sp, #8
 8000756:	4603      	mov	r3, r0
 8000758:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIOD->ODR &= ~(1U<<l);
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <led_off+0x24>)
 800075e:	695a      	ldr	r2, [r3, #20]
 8000760:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000764:	2101      	movs	r1, #1
 8000766:	fa01 f303 	lsl.w	r3, r1, r3
 800076a:	43db      	mvns	r3, r3
 800076c:	4902      	ldr	r1, [pc, #8]	; (8000778 <led_off+0x24>)
 800076e:	4013      	ands	r3, r2
 8000770:	614b      	str	r3, [r1, #20]
}
 8000772:	bf00      	nop
 8000774:	b002      	add	sp, #8
 8000776:	4770      	bx	lr
 8000778:	40020c00 	.word	0x40020c00

0800077c <led_init>:
}

// Setup LED GPIO
void led_init(void) {
	// Enable GPIOD clock
	RCC->AHB1ENR |= 0x00000008;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <led_init+0x34>)
 800077e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000780:	4a0b      	ldr	r2, [pc, #44]	; (80007b0 <led_init+0x34>)
 8000782:	f043 0308 	orr.w	r3, r3, #8
 8000786:	6313      	str	r3, [r2, #48]	; 0x30

	// Turn on output mode
	GPIOD->MODER &= 0x00FFFFFF;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <led_init+0x38>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a09      	ldr	r2, [pc, #36]	; (80007b4 <led_init+0x38>)
 800078e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000792:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= 0x55000000;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <led_init+0x38>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a06      	ldr	r2, [pc, #24]	; (80007b4 <led_init+0x38>)
 800079a:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800079e:	6013      	str	r3, [r2, #0]

	// Turn off LEDs
	GPIOD->ODR &= 0x0FFF;
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <led_init+0x38>)
 80007a2:	695b      	ldr	r3, [r3, #20]
 80007a4:	4a03      	ldr	r2, [pc, #12]	; (80007b4 <led_init+0x38>)
 80007a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007aa:	6153      	str	r3, [r2, #20]
}
 80007ac:	bf00      	nop
 80007ae:	4770      	bx	lr
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020c00 	.word	0x40020c00

080007b8 <uart_enable>:

// Initialize UART 2
static void uart_enable(void) {
    // enable USART2 clock, bit 17 on APB1ENR
    RCC->APB1ENR |= (1 << 17);
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <uart_enable+0x4c>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	4a11      	ldr	r2, [pc, #68]	; (8000804 <uart_enable+0x4c>)
 80007be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c2:	6413      	str	r3, [r2, #64]	; 0x40

    // USART2 parity control, bit 9
    // USART2->CR1 |= (0 << 9); // 0 - no parity

    // USART2 RX enable, RE bit 2
    USART2->CR1 |= (1 << 2);
 80007c4:	4b10      	ldr	r3, [pc, #64]	; (8000808 <uart_enable+0x50>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	4a0f      	ldr	r2, [pc, #60]	; (8000808 <uart_enable+0x50>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	60d3      	str	r3, [r2, #12]
    // USART2 TX enable, TE bit 3
    USART2->CR1 |= (1 << 3);
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <uart_enable+0x50>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	4a0c      	ldr	r2, [pc, #48]	; (8000808 <uart_enable+0x50>)
 80007d6:	f043 0308 	orr.w	r3, r3, #8
 80007da:	60d3      	str	r3, [r2, #12]

    // Enable usart2 - UE, bit 13
    USART2->CR1 |= (1 << 13);
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <uart_enable+0x50>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	4a09      	ldr	r2, [pc, #36]	; (8000808 <uart_enable+0x50>)
 80007e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007e6:	60d3      	str	r3, [r2, #12]
	// For STM32F411: fCK = 25 Mhz (Sysclk/4), Baudrate = 115200, OVER8 = 0
	// USARTDIV = fCK / baud / 8 * (2-OVER8)
	// USARTDIV = 25Mhz / 115200 / 16 = 13.5633
	// Fraction: 0.5633*16 = 9
	// Mantissa: 13
    USART2->BRR |= (13 << 4); // Mantissa
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <uart_enable+0x50>)
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	4a06      	ldr	r2, [pc, #24]	; (8000808 <uart_enable+0x50>)
 80007ee:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80007f2:	6093      	str	r3, [r2, #8]
    USART2->BRR |= 9; // Fraction
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <uart_enable+0x50>)
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	4a03      	ldr	r2, [pc, #12]	; (8000808 <uart_enable+0x50>)
 80007fa:	f043 0309 	orr.w	r3, r3, #9
 80007fe:	6093      	str	r3, [r2, #8]
}	
 8000800:	bf00      	nop
 8000802:	4770      	bx	lr
 8000804:	40023800 	.word	0x40023800
 8000808:	40004400 	.word	0x40004400

0800080c <uart_init>:

void uart_init(void)
{
 800080c:	b508      	push	{r3, lr}
    /* set system clock to 100 Mhz */
    set_sysclk_to_100();
 800080e:	f000 f835 	bl	800087c <set_sysclk_to_100>

	uart_pin_setup();
 8000812:	f7ff ff61 	bl	80006d8 <uart_pin_setup>
	uart_enable();
 8000816:	f7ff ffcf 	bl	80007b8 <uart_enable>
}
 800081a:	bf00      	nop
 800081c:	bd08      	pop	{r3, pc}
	...

08000820 <SystemInit>:
*************************************************/
void SystemInit(void)
{
	/* FPU settings, can be enabled from project makefile */
	#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <SystemInit+0x50>)
 8000822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <SystemInit+0x50>)
 8000828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800082c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	#endif

	/* Reset the RCC clock configuration to the default reset state */
	/* Set HSION bit */
	RCC->CR |= (1U << 0);
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <SystemInit+0x54>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <SystemInit+0x54>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <SystemInit+0x54>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]

	/* Reset HSEON (16), CSSON (19) and PLLON (24) bits */
	RCC->CR &= ~((1U << 16) | (1U << 19) | (1U << 24));
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <SystemInit+0x54>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <SystemInit+0x54>)
 8000848:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800084c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000850:	6013      	str	r3, [r2, #0]

	/* Reset PLLCFGR register to reset value */
	RCC->PLLCFGR = 0x24003010UL;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <SystemInit+0x54>)
 8000854:	4a08      	ldr	r2, [pc, #32]	; (8000878 <SystemInit+0x58>)
 8000856:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= ~(1U << 18);
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <SystemInit+0x54>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a05      	ldr	r2, [pc, #20]	; (8000874 <SystemInit+0x54>)
 800085e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000862:	6013      	str	r3, [r2, #0]

	/* Disable all clock interrupts */
	RCC->CIR = 0x00000000UL;
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <SystemInit+0x54>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
}
 800086a:	bf00      	nop
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00
 8000874:	40023800 	.word	0x40023800
 8000878:	24003010 	.word	0x24003010

0800087c <set_sysclk_to_100>:
* this is only tested on stm32f4 discovery board
*************************************************/
void set_sysclk_to_100(void)
{
	/* Enable HSE (CR: bit 16) */
	RCC->CR |= (1U << 16);
 800087c:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <set_sysclk_to_100+0xac>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a29      	ldr	r2, [pc, #164]	; (8000928 <set_sysclk_to_100+0xac>)
 8000882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000886:	6013      	str	r3, [r2, #0]
	/* Wait till HSE is ready (CR: bit 17) */
	while(!(RCC->CR & (1 << 17)));
 8000888:	bf00      	nop
 800088a:	4b27      	ldr	r3, [pc, #156]	; (8000928 <set_sysclk_to_100+0xac>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000892:	2b00      	cmp	r3, #0
 8000894:	d0f9      	beq.n	800088a <set_sysclk_to_100+0xe>

	/* Enable power interface clock (APB1ENR:bit 28) */
	RCC->APB1ENR |= (1 << 28);
 8000896:	4b24      	ldr	r3, [pc, #144]	; (8000928 <set_sysclk_to_100+0xac>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a23      	ldr	r2, [pc, #140]	; (8000928 <set_sysclk_to_100+0xac>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40

	/* set voltage scale to 1 for max frequency (PWR_CR:bit 14)
	 * (0b0) scale 2 for fCLK <= 144 Mhz
	 * (0b1) scale 1 for 144 Mhz < fCLK <= 168 Mhz
	 */
	PWR->CR |= (1 << 14);
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <set_sysclk_to_100+0xb0>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a21      	ldr	r2, [pc, #132]	; (800092c <set_sysclk_to_100+0xb0>)
 80008a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ac:	6013      	str	r3, [r2, #0]

	/* set AHB prescaler to /1 (CFGR:bits 7:4) */
	RCC->CFGR |= (0 << 4);
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <set_sysclk_to_100+0xac>)
 80008b0:	4a1d      	ldr	r2, [pc, #116]	; (8000928 <set_sysclk_to_100+0xac>)
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	6093      	str	r3, [r2, #8]
	/* set APB low speed prescaler to /4 (APB1) (CFGR:bits 12:10) */
	RCC->CFGR |= (5 << 10);
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <set_sysclk_to_100+0xac>)
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	4a1b      	ldr	r2, [pc, #108]	; (8000928 <set_sysclk_to_100+0xac>)
 80008bc:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80008c0:	6093      	str	r3, [r2, #8]
	/* set APB high speed prescaler to /2 (APB2) (CFGR:bits 15:13) */
	RCC->CFGR |= (4 << 13);
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <set_sysclk_to_100+0xac>)
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	4a18      	ldr	r2, [pc, #96]	; (8000928 <set_sysclk_to_100+0xac>)
 80008c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008cc:	6093      	str	r3, [r2, #8]

	/* Set M, N, P and Q PLL dividers
	 * PLLCFGR: bits 5:0 (M), 14:6 (N), 17:16 (P), 27:24 (Q)
	 * Set PLL source to HSE, PLLCFGR: bit 22, 1:HSE, 0:HSI
	 */
	RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <set_sysclk_to_100+0xac>)
 80008d0:	4a17      	ldr	r2, [pc, #92]	; (8000930 <set_sysclk_to_100+0xb4>)
 80008d2:	605a      	str	r2, [r3, #4]
	               (PLL_Q << 24) | (1 << 22);
	/* Enable the main PLL (CR: bit 24) */
	RCC->CR |= (1 << 24);
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <set_sysclk_to_100+0xac>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a13      	ldr	r2, [pc, #76]	; (8000928 <set_sysclk_to_100+0xac>)
 80008da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008de:	6013      	str	r3, [r2, #0]
	/* Wait till the main PLL is ready (CR: bit 25) */
	while(!(RCC->CR & (1 << 25)));
 80008e0:	bf00      	nop
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <set_sysclk_to_100+0xac>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d0f9      	beq.n	80008e2 <set_sysclk_to_100+0x66>
	 * instruction cache enable (ACR:bit 9)
	 * data cache enable (ACR:bit 10)
	 * set latency to 5 wait states (ARC:bits 2:0)
	 *   see Table 10 on page 80 in RM0090
	 */
	FLASH->ACR = (1 << 8) | (1 << 9) | (1 << 10 ) | (5 << 0);
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <set_sysclk_to_100+0xb8>)
 80008f0:	f240 7205 	movw	r2, #1797	; 0x705
 80008f4:	601a      	str	r2, [r3, #0]
	/* Select the main PLL as system clock source, (CFGR:bits 1:0)
	 * 0b00 - HSI
	 * 0b01 - HSE
	 * 0b10 - PLL
	 */
	RCC->CFGR &= ~(3U << 0);
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <set_sysclk_to_100+0xac>)
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <set_sysclk_to_100+0xac>)
 80008fc:	f023 0303 	bic.w	r3, r3, #3
 8000900:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (2 << 0);
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <set_sysclk_to_100+0xac>)
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <set_sysclk_to_100+0xac>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6093      	str	r3, [r2, #8]
	/* Wait till the main PLL is used as system clock source (CFGR:bits 3:2) */
	while (!(RCC->CFGR & (2U << 2)));
 800090e:	bf00      	nop
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <set_sysclk_to_100+0xac>)
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	f003 0308 	and.w	r3, r3, #8
 8000918:	2b00      	cmp	r3, #0
 800091a:	d0f9      	beq.n	8000910 <set_sysclk_to_100+0x94>

	// update SystemCoreClock variable
	SystemCoreClock = 100000000;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <set_sysclk_to_100+0xbc>)
 800091e:	4a07      	ldr	r2, [pc, #28]	; (800093c <set_sysclk_to_100+0xc0>)
 8000920:	601a      	str	r2, [r3, #0]
}
 8000922:	bf00      	nop
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40007000 	.word	0x40007000
 8000930:	08416008 	.word	0x08416008
 8000934:	40023c00 	.word	0x40023c00
 8000938:	20000000 	.word	0x20000000
 800093c:	05f5e100 	.word	0x05f5e100

08000940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000978 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000946:	490e      	ldr	r1, [pc, #56]	; (8000980 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000948:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800094c:	e002      	b.n	8000954 <LoopCopyDataInit>

0800094e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000952:	3304      	adds	r3, #4

08000954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000958:	d3f9      	bcc.n	800094e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095a:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800095c:	4c0b      	ldr	r4, [pc, #44]	; (800098c <LoopFillZerobss+0x26>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000960:	e001      	b.n	8000966 <LoopFillZerobss>

08000962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000964:	3204      	adds	r2, #4

08000966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000968:	d3fb      	bcc.n	8000962 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800096a:	f7ff ff59 	bl	8000820 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800096e:	f000 f811 	bl	8000994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000972:	f7ff fcc3 	bl	80002fc <main>
  bx  lr    
 8000976:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000978:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000980:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000984:	08001360 	.word	0x08001360
  ldr r2, =_sbss
 8000988:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800098c:	200010a0 	.word	0x200010a0

08000990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC_IRQHandler>
	...

08000994 <__libc_init_array>:
 8000994:	b570      	push	{r4, r5, r6, lr}
 8000996:	4d0d      	ldr	r5, [pc, #52]	; (80009cc <__libc_init_array+0x38>)
 8000998:	4c0d      	ldr	r4, [pc, #52]	; (80009d0 <__libc_init_array+0x3c>)
 800099a:	1b64      	subs	r4, r4, r5
 800099c:	10a4      	asrs	r4, r4, #2
 800099e:	2600      	movs	r6, #0
 80009a0:	42a6      	cmp	r6, r4
 80009a2:	d109      	bne.n	80009b8 <__libc_init_array+0x24>
 80009a4:	4d0b      	ldr	r5, [pc, #44]	; (80009d4 <__libc_init_array+0x40>)
 80009a6:	4c0c      	ldr	r4, [pc, #48]	; (80009d8 <__libc_init_array+0x44>)
 80009a8:	f000 fc94 	bl	80012d4 <_init>
 80009ac:	1b64      	subs	r4, r4, r5
 80009ae:	10a4      	asrs	r4, r4, #2
 80009b0:	2600      	movs	r6, #0
 80009b2:	42a6      	cmp	r6, r4
 80009b4:	d105      	bne.n	80009c2 <__libc_init_array+0x2e>
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80009bc:	4798      	blx	r3
 80009be:	3601      	adds	r6, #1
 80009c0:	e7ee      	b.n	80009a0 <__libc_init_array+0xc>
 80009c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c6:	4798      	blx	r3
 80009c8:	3601      	adds	r6, #1
 80009ca:	e7f2      	b.n	80009b2 <__libc_init_array+0x1e>
 80009cc:	08001358 	.word	0x08001358
 80009d0:	08001358 	.word	0x08001358
 80009d4:	08001358 	.word	0x08001358
 80009d8:	0800135c 	.word	0x0800135c

080009dc <memset>:
 80009dc:	4402      	add	r2, r0
 80009de:	4603      	mov	r3, r0
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d100      	bne.n	80009e6 <memset+0xa>
 80009e4:	4770      	bx	lr
 80009e6:	f803 1b01 	strb.w	r1, [r3], #1
 80009ea:	e7f9      	b.n	80009e0 <memset+0x4>

080009ec <siprintf>:
 80009ec:	b40e      	push	{r1, r2, r3}
 80009ee:	b500      	push	{lr}
 80009f0:	b09c      	sub	sp, #112	; 0x70
 80009f2:	ab1d      	add	r3, sp, #116	; 0x74
 80009f4:	9002      	str	r0, [sp, #8]
 80009f6:	9006      	str	r0, [sp, #24]
 80009f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80009fc:	4809      	ldr	r0, [pc, #36]	; (8000a24 <siprintf+0x38>)
 80009fe:	9107      	str	r1, [sp, #28]
 8000a00:	9104      	str	r1, [sp, #16]
 8000a02:	4909      	ldr	r1, [pc, #36]	; (8000a28 <siprintf+0x3c>)
 8000a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a08:	9105      	str	r1, [sp, #20]
 8000a0a:	6800      	ldr	r0, [r0, #0]
 8000a0c:	9301      	str	r3, [sp, #4]
 8000a0e:	a902      	add	r1, sp, #8
 8000a10:	f000 f868 	bl	8000ae4 <_svfiprintf_r>
 8000a14:	9b02      	ldr	r3, [sp, #8]
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
 8000a1a:	b01c      	add	sp, #112	; 0x70
 8000a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a20:	b003      	add	sp, #12
 8000a22:	4770      	bx	lr
 8000a24:	20000004 	.word	0x20000004
 8000a28:	ffff0208 	.word	0xffff0208

08000a2c <__retarget_lock_acquire_recursive>:
 8000a2c:	4770      	bx	lr

08000a2e <__retarget_lock_release_recursive>:
 8000a2e:	4770      	bx	lr

08000a30 <__ssputs_r>:
 8000a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a34:	688e      	ldr	r6, [r1, #8]
 8000a36:	461f      	mov	r7, r3
 8000a38:	42be      	cmp	r6, r7
 8000a3a:	680b      	ldr	r3, [r1, #0]
 8000a3c:	4682      	mov	sl, r0
 8000a3e:	460c      	mov	r4, r1
 8000a40:	4690      	mov	r8, r2
 8000a42:	d82c      	bhi.n	8000a9e <__ssputs_r+0x6e>
 8000a44:	898a      	ldrh	r2, [r1, #12]
 8000a46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000a4a:	d026      	beq.n	8000a9a <__ssputs_r+0x6a>
 8000a4c:	6965      	ldr	r5, [r4, #20]
 8000a4e:	6909      	ldr	r1, [r1, #16]
 8000a50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000a54:	eba3 0901 	sub.w	r9, r3, r1
 8000a58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000a5c:	1c7b      	adds	r3, r7, #1
 8000a5e:	444b      	add	r3, r9
 8000a60:	106d      	asrs	r5, r5, #1
 8000a62:	429d      	cmp	r5, r3
 8000a64:	bf38      	it	cc
 8000a66:	461d      	movcc	r5, r3
 8000a68:	0553      	lsls	r3, r2, #21
 8000a6a:	d527      	bpl.n	8000abc <__ssputs_r+0x8c>
 8000a6c:	4629      	mov	r1, r5
 8000a6e:	f000 fb5b 	bl	8001128 <_malloc_r>
 8000a72:	4606      	mov	r6, r0
 8000a74:	b360      	cbz	r0, 8000ad0 <__ssputs_r+0xa0>
 8000a76:	6921      	ldr	r1, [r4, #16]
 8000a78:	464a      	mov	r2, r9
 8000a7a:	f000 fac1 	bl	8001000 <memcpy>
 8000a7e:	89a3      	ldrh	r3, [r4, #12]
 8000a80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a88:	81a3      	strh	r3, [r4, #12]
 8000a8a:	6126      	str	r6, [r4, #16]
 8000a8c:	6165      	str	r5, [r4, #20]
 8000a8e:	444e      	add	r6, r9
 8000a90:	eba5 0509 	sub.w	r5, r5, r9
 8000a94:	6026      	str	r6, [r4, #0]
 8000a96:	60a5      	str	r5, [r4, #8]
 8000a98:	463e      	mov	r6, r7
 8000a9a:	42be      	cmp	r6, r7
 8000a9c:	d900      	bls.n	8000aa0 <__ssputs_r+0x70>
 8000a9e:	463e      	mov	r6, r7
 8000aa0:	6820      	ldr	r0, [r4, #0]
 8000aa2:	4632      	mov	r2, r6
 8000aa4:	4641      	mov	r1, r8
 8000aa6:	f000 fab9 	bl	800101c <memmove>
 8000aaa:	68a3      	ldr	r3, [r4, #8]
 8000aac:	1b9b      	subs	r3, r3, r6
 8000aae:	60a3      	str	r3, [r4, #8]
 8000ab0:	6823      	ldr	r3, [r4, #0]
 8000ab2:	4433      	add	r3, r6
 8000ab4:	6023      	str	r3, [r4, #0]
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abc:	462a      	mov	r2, r5
 8000abe:	f000 fba7 	bl	8001210 <_realloc_r>
 8000ac2:	4606      	mov	r6, r0
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d1e0      	bne.n	8000a8a <__ssputs_r+0x5a>
 8000ac8:	6921      	ldr	r1, [r4, #16]
 8000aca:	4650      	mov	r0, sl
 8000acc:	f000 fac0 	bl	8001050 <_free_r>
 8000ad0:	230c      	movs	r3, #12
 8000ad2:	f8ca 3000 	str.w	r3, [sl]
 8000ad6:	89a3      	ldrh	r3, [r4, #12]
 8000ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000adc:	81a3      	strh	r3, [r4, #12]
 8000ade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ae2:	e7e9      	b.n	8000ab8 <__ssputs_r+0x88>

08000ae4 <_svfiprintf_r>:
 8000ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae8:	4698      	mov	r8, r3
 8000aea:	898b      	ldrh	r3, [r1, #12]
 8000aec:	061b      	lsls	r3, r3, #24
 8000aee:	b09d      	sub	sp, #116	; 0x74
 8000af0:	4607      	mov	r7, r0
 8000af2:	460d      	mov	r5, r1
 8000af4:	4614      	mov	r4, r2
 8000af6:	d50e      	bpl.n	8000b16 <_svfiprintf_r+0x32>
 8000af8:	690b      	ldr	r3, [r1, #16]
 8000afa:	b963      	cbnz	r3, 8000b16 <_svfiprintf_r+0x32>
 8000afc:	2140      	movs	r1, #64	; 0x40
 8000afe:	f000 fb13 	bl	8001128 <_malloc_r>
 8000b02:	6028      	str	r0, [r5, #0]
 8000b04:	6128      	str	r0, [r5, #16]
 8000b06:	b920      	cbnz	r0, 8000b12 <_svfiprintf_r+0x2e>
 8000b08:	230c      	movs	r3, #12
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b10:	e0d0      	b.n	8000cb4 <_svfiprintf_r+0x1d0>
 8000b12:	2340      	movs	r3, #64	; 0x40
 8000b14:	616b      	str	r3, [r5, #20]
 8000b16:	2300      	movs	r3, #0
 8000b18:	9309      	str	r3, [sp, #36]	; 0x24
 8000b1a:	2320      	movs	r3, #32
 8000b1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b20:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b24:	2330      	movs	r3, #48	; 0x30
 8000b26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000ccc <_svfiprintf_r+0x1e8>
 8000b2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b2e:	f04f 0901 	mov.w	r9, #1
 8000b32:	4623      	mov	r3, r4
 8000b34:	469a      	mov	sl, r3
 8000b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b3a:	b10a      	cbz	r2, 8000b40 <_svfiprintf_r+0x5c>
 8000b3c:	2a25      	cmp	r2, #37	; 0x25
 8000b3e:	d1f9      	bne.n	8000b34 <_svfiprintf_r+0x50>
 8000b40:	ebba 0b04 	subs.w	fp, sl, r4
 8000b44:	d00b      	beq.n	8000b5e <_svfiprintf_r+0x7a>
 8000b46:	465b      	mov	r3, fp
 8000b48:	4622      	mov	r2, r4
 8000b4a:	4629      	mov	r1, r5
 8000b4c:	4638      	mov	r0, r7
 8000b4e:	f7ff ff6f 	bl	8000a30 <__ssputs_r>
 8000b52:	3001      	adds	r0, #1
 8000b54:	f000 80a9 	beq.w	8000caa <_svfiprintf_r+0x1c6>
 8000b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b5a:	445a      	add	r2, fp
 8000b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8000b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f000 80a1 	beq.w	8000caa <_svfiprintf_r+0x1c6>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b72:	f10a 0a01 	add.w	sl, sl, #1
 8000b76:	9304      	str	r3, [sp, #16]
 8000b78:	9307      	str	r3, [sp, #28]
 8000b7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b7e:	931a      	str	r3, [sp, #104]	; 0x68
 8000b80:	4654      	mov	r4, sl
 8000b82:	2205      	movs	r2, #5
 8000b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b88:	4850      	ldr	r0, [pc, #320]	; (8000ccc <_svfiprintf_r+0x1e8>)
 8000b8a:	f7ff fb11 	bl	80001b0 <memchr>
 8000b8e:	9a04      	ldr	r2, [sp, #16]
 8000b90:	b9d8      	cbnz	r0, 8000bca <_svfiprintf_r+0xe6>
 8000b92:	06d0      	lsls	r0, r2, #27
 8000b94:	bf44      	itt	mi
 8000b96:	2320      	movmi	r3, #32
 8000b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b9c:	0711      	lsls	r1, r2, #28
 8000b9e:	bf44      	itt	mi
 8000ba0:	232b      	movmi	r3, #43	; 0x2b
 8000ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8000baa:	2b2a      	cmp	r3, #42	; 0x2a
 8000bac:	d015      	beq.n	8000bda <_svfiprintf_r+0xf6>
 8000bae:	9a07      	ldr	r2, [sp, #28]
 8000bb0:	4654      	mov	r4, sl
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f04f 0c0a 	mov.w	ip, #10
 8000bb8:	4621      	mov	r1, r4
 8000bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bbe:	3b30      	subs	r3, #48	; 0x30
 8000bc0:	2b09      	cmp	r3, #9
 8000bc2:	d94d      	bls.n	8000c60 <_svfiprintf_r+0x17c>
 8000bc4:	b1b0      	cbz	r0, 8000bf4 <_svfiprintf_r+0x110>
 8000bc6:	9207      	str	r2, [sp, #28]
 8000bc8:	e014      	b.n	8000bf4 <_svfiprintf_r+0x110>
 8000bca:	eba0 0308 	sub.w	r3, r0, r8
 8000bce:	fa09 f303 	lsl.w	r3, r9, r3
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	9304      	str	r3, [sp, #16]
 8000bd6:	46a2      	mov	sl, r4
 8000bd8:	e7d2      	b.n	8000b80 <_svfiprintf_r+0x9c>
 8000bda:	9b03      	ldr	r3, [sp, #12]
 8000bdc:	1d19      	adds	r1, r3, #4
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	9103      	str	r1, [sp, #12]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	bfbb      	ittet	lt
 8000be6:	425b      	neglt	r3, r3
 8000be8:	f042 0202 	orrlt.w	r2, r2, #2
 8000bec:	9307      	strge	r3, [sp, #28]
 8000bee:	9307      	strlt	r3, [sp, #28]
 8000bf0:	bfb8      	it	lt
 8000bf2:	9204      	strlt	r2, [sp, #16]
 8000bf4:	7823      	ldrb	r3, [r4, #0]
 8000bf6:	2b2e      	cmp	r3, #46	; 0x2e
 8000bf8:	d10c      	bne.n	8000c14 <_svfiprintf_r+0x130>
 8000bfa:	7863      	ldrb	r3, [r4, #1]
 8000bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8000bfe:	d134      	bne.n	8000c6a <_svfiprintf_r+0x186>
 8000c00:	9b03      	ldr	r3, [sp, #12]
 8000c02:	1d1a      	adds	r2, r3, #4
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	9203      	str	r2, [sp, #12]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	bfb8      	it	lt
 8000c0c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000c10:	3402      	adds	r4, #2
 8000c12:	9305      	str	r3, [sp, #20]
 8000c14:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8000cdc <_svfiprintf_r+0x1f8>
 8000c18:	7821      	ldrb	r1, [r4, #0]
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	4650      	mov	r0, sl
 8000c1e:	f7ff fac7 	bl	80001b0 <memchr>
 8000c22:	b138      	cbz	r0, 8000c34 <_svfiprintf_r+0x150>
 8000c24:	9b04      	ldr	r3, [sp, #16]
 8000c26:	eba0 000a 	sub.w	r0, r0, sl
 8000c2a:	2240      	movs	r2, #64	; 0x40
 8000c2c:	4082      	lsls	r2, r0
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	3401      	adds	r4, #1
 8000c32:	9304      	str	r3, [sp, #16]
 8000c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c38:	4825      	ldr	r0, [pc, #148]	; (8000cd0 <_svfiprintf_r+0x1ec>)
 8000c3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c3e:	2206      	movs	r2, #6
 8000c40:	f7ff fab6 	bl	80001b0 <memchr>
 8000c44:	2800      	cmp	r0, #0
 8000c46:	d038      	beq.n	8000cba <_svfiprintf_r+0x1d6>
 8000c48:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <_svfiprintf_r+0x1f0>)
 8000c4a:	bb1b      	cbnz	r3, 8000c94 <_svfiprintf_r+0x1b0>
 8000c4c:	9b03      	ldr	r3, [sp, #12]
 8000c4e:	3307      	adds	r3, #7
 8000c50:	f023 0307 	bic.w	r3, r3, #7
 8000c54:	3308      	adds	r3, #8
 8000c56:	9303      	str	r3, [sp, #12]
 8000c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c5a:	4433      	add	r3, r6
 8000c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8000c5e:	e768      	b.n	8000b32 <_svfiprintf_r+0x4e>
 8000c60:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c64:	460c      	mov	r4, r1
 8000c66:	2001      	movs	r0, #1
 8000c68:	e7a6      	b.n	8000bb8 <_svfiprintf_r+0xd4>
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	3401      	adds	r4, #1
 8000c6e:	9305      	str	r3, [sp, #20]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f04f 0c0a 	mov.w	ip, #10
 8000c76:	4620      	mov	r0, r4
 8000c78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c7c:	3a30      	subs	r2, #48	; 0x30
 8000c7e:	2a09      	cmp	r2, #9
 8000c80:	d903      	bls.n	8000c8a <_svfiprintf_r+0x1a6>
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d0c6      	beq.n	8000c14 <_svfiprintf_r+0x130>
 8000c86:	9105      	str	r1, [sp, #20]
 8000c88:	e7c4      	b.n	8000c14 <_svfiprintf_r+0x130>
 8000c8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c8e:	4604      	mov	r4, r0
 8000c90:	2301      	movs	r3, #1
 8000c92:	e7f0      	b.n	8000c76 <_svfiprintf_r+0x192>
 8000c94:	ab03      	add	r3, sp, #12
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	462a      	mov	r2, r5
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <_svfiprintf_r+0x1f4>)
 8000c9c:	a904      	add	r1, sp, #16
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	f3af 8000 	nop.w
 8000ca4:	1c42      	adds	r2, r0, #1
 8000ca6:	4606      	mov	r6, r0
 8000ca8:	d1d6      	bne.n	8000c58 <_svfiprintf_r+0x174>
 8000caa:	89ab      	ldrh	r3, [r5, #12]
 8000cac:	065b      	lsls	r3, r3, #25
 8000cae:	f53f af2d 	bmi.w	8000b0c <_svfiprintf_r+0x28>
 8000cb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000cb4:	b01d      	add	sp, #116	; 0x74
 8000cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cba:	ab03      	add	r3, sp, #12
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	462a      	mov	r2, r5
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <_svfiprintf_r+0x1f4>)
 8000cc2:	a904      	add	r1, sp, #16
 8000cc4:	4638      	mov	r0, r7
 8000cc6:	f000 f879 	bl	8000dbc <_printf_i>
 8000cca:	e7eb      	b.n	8000ca4 <_svfiprintf_r+0x1c0>
 8000ccc:	08001325 	.word	0x08001325
 8000cd0:	0800132f 	.word	0x0800132f
 8000cd4:	00000000 	.word	0x00000000
 8000cd8:	08000a31 	.word	0x08000a31
 8000cdc:	0800132b 	.word	0x0800132b

08000ce0 <_printf_common>:
 8000ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce4:	4616      	mov	r6, r2
 8000ce6:	4699      	mov	r9, r3
 8000ce8:	688a      	ldr	r2, [r1, #8]
 8000cea:	690b      	ldr	r3, [r1, #16]
 8000cec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	bfb8      	it	lt
 8000cf4:	4613      	movlt	r3, r2
 8000cf6:	6033      	str	r3, [r6, #0]
 8000cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000cfc:	4607      	mov	r7, r0
 8000cfe:	460c      	mov	r4, r1
 8000d00:	b10a      	cbz	r2, 8000d06 <_printf_common+0x26>
 8000d02:	3301      	adds	r3, #1
 8000d04:	6033      	str	r3, [r6, #0]
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	0699      	lsls	r1, r3, #26
 8000d0a:	bf42      	ittt	mi
 8000d0c:	6833      	ldrmi	r3, [r6, #0]
 8000d0e:	3302      	addmi	r3, #2
 8000d10:	6033      	strmi	r3, [r6, #0]
 8000d12:	6825      	ldr	r5, [r4, #0]
 8000d14:	f015 0506 	ands.w	r5, r5, #6
 8000d18:	d106      	bne.n	8000d28 <_printf_common+0x48>
 8000d1a:	f104 0a19 	add.w	sl, r4, #25
 8000d1e:	68e3      	ldr	r3, [r4, #12]
 8000d20:	6832      	ldr	r2, [r6, #0]
 8000d22:	1a9b      	subs	r3, r3, r2
 8000d24:	42ab      	cmp	r3, r5
 8000d26:	dc26      	bgt.n	8000d76 <_printf_common+0x96>
 8000d28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d2c:	1e13      	subs	r3, r2, #0
 8000d2e:	6822      	ldr	r2, [r4, #0]
 8000d30:	bf18      	it	ne
 8000d32:	2301      	movne	r3, #1
 8000d34:	0692      	lsls	r2, r2, #26
 8000d36:	d42b      	bmi.n	8000d90 <_printf_common+0xb0>
 8000d38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d3c:	4649      	mov	r1, r9
 8000d3e:	4638      	mov	r0, r7
 8000d40:	47c0      	blx	r8
 8000d42:	3001      	adds	r0, #1
 8000d44:	d01e      	beq.n	8000d84 <_printf_common+0xa4>
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	6922      	ldr	r2, [r4, #16]
 8000d4a:	f003 0306 	and.w	r3, r3, #6
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf02      	ittt	eq
 8000d52:	68e5      	ldreq	r5, [r4, #12]
 8000d54:	6833      	ldreq	r3, [r6, #0]
 8000d56:	1aed      	subeq	r5, r5, r3
 8000d58:	68a3      	ldr	r3, [r4, #8]
 8000d5a:	bf0c      	ite	eq
 8000d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d60:	2500      	movne	r5, #0
 8000d62:	4293      	cmp	r3, r2
 8000d64:	bfc4      	itt	gt
 8000d66:	1a9b      	subgt	r3, r3, r2
 8000d68:	18ed      	addgt	r5, r5, r3
 8000d6a:	2600      	movs	r6, #0
 8000d6c:	341a      	adds	r4, #26
 8000d6e:	42b5      	cmp	r5, r6
 8000d70:	d11a      	bne.n	8000da8 <_printf_common+0xc8>
 8000d72:	2000      	movs	r0, #0
 8000d74:	e008      	b.n	8000d88 <_printf_common+0xa8>
 8000d76:	2301      	movs	r3, #1
 8000d78:	4652      	mov	r2, sl
 8000d7a:	4649      	mov	r1, r9
 8000d7c:	4638      	mov	r0, r7
 8000d7e:	47c0      	blx	r8
 8000d80:	3001      	adds	r0, #1
 8000d82:	d103      	bne.n	8000d8c <_printf_common+0xac>
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8c:	3501      	adds	r5, #1
 8000d8e:	e7c6      	b.n	8000d1e <_printf_common+0x3e>
 8000d90:	18e1      	adds	r1, r4, r3
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	2030      	movs	r0, #48	; 0x30
 8000d96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000d9a:	4422      	add	r2, r4
 8000d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000da0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000da4:	3302      	adds	r3, #2
 8000da6:	e7c7      	b.n	8000d38 <_printf_common+0x58>
 8000da8:	2301      	movs	r3, #1
 8000daa:	4622      	mov	r2, r4
 8000dac:	4649      	mov	r1, r9
 8000dae:	4638      	mov	r0, r7
 8000db0:	47c0      	blx	r8
 8000db2:	3001      	adds	r0, #1
 8000db4:	d0e6      	beq.n	8000d84 <_printf_common+0xa4>
 8000db6:	3601      	adds	r6, #1
 8000db8:	e7d9      	b.n	8000d6e <_printf_common+0x8e>
	...

08000dbc <_printf_i>:
 8000dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	7e0f      	ldrb	r7, [r1, #24]
 8000dc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000dc4:	2f78      	cmp	r7, #120	; 0x78
 8000dc6:	4691      	mov	r9, r2
 8000dc8:	4680      	mov	r8, r0
 8000dca:	460c      	mov	r4, r1
 8000dcc:	469a      	mov	sl, r3
 8000dce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000dd2:	d807      	bhi.n	8000de4 <_printf_i+0x28>
 8000dd4:	2f62      	cmp	r7, #98	; 0x62
 8000dd6:	d80a      	bhi.n	8000dee <_printf_i+0x32>
 8000dd8:	2f00      	cmp	r7, #0
 8000dda:	f000 80d4 	beq.w	8000f86 <_printf_i+0x1ca>
 8000dde:	2f58      	cmp	r7, #88	; 0x58
 8000de0:	f000 80c0 	beq.w	8000f64 <_printf_i+0x1a8>
 8000de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000de8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000dec:	e03a      	b.n	8000e64 <_printf_i+0xa8>
 8000dee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000df2:	2b15      	cmp	r3, #21
 8000df4:	d8f6      	bhi.n	8000de4 <_printf_i+0x28>
 8000df6:	a101      	add	r1, pc, #4	; (adr r1, 8000dfc <_printf_i+0x40>)
 8000df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000dfc:	08000e55 	.word	0x08000e55
 8000e00:	08000e69 	.word	0x08000e69
 8000e04:	08000de5 	.word	0x08000de5
 8000e08:	08000de5 	.word	0x08000de5
 8000e0c:	08000de5 	.word	0x08000de5
 8000e10:	08000de5 	.word	0x08000de5
 8000e14:	08000e69 	.word	0x08000e69
 8000e18:	08000de5 	.word	0x08000de5
 8000e1c:	08000de5 	.word	0x08000de5
 8000e20:	08000de5 	.word	0x08000de5
 8000e24:	08000de5 	.word	0x08000de5
 8000e28:	08000f6d 	.word	0x08000f6d
 8000e2c:	08000e95 	.word	0x08000e95
 8000e30:	08000f27 	.word	0x08000f27
 8000e34:	08000de5 	.word	0x08000de5
 8000e38:	08000de5 	.word	0x08000de5
 8000e3c:	08000f8f 	.word	0x08000f8f
 8000e40:	08000de5 	.word	0x08000de5
 8000e44:	08000e95 	.word	0x08000e95
 8000e48:	08000de5 	.word	0x08000de5
 8000e4c:	08000de5 	.word	0x08000de5
 8000e50:	08000f2f 	.word	0x08000f2f
 8000e54:	682b      	ldr	r3, [r5, #0]
 8000e56:	1d1a      	adds	r2, r3, #4
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	602a      	str	r2, [r5, #0]
 8000e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e64:	2301      	movs	r3, #1
 8000e66:	e09f      	b.n	8000fa8 <_printf_i+0x1ec>
 8000e68:	6820      	ldr	r0, [r4, #0]
 8000e6a:	682b      	ldr	r3, [r5, #0]
 8000e6c:	0607      	lsls	r7, r0, #24
 8000e6e:	f103 0104 	add.w	r1, r3, #4
 8000e72:	6029      	str	r1, [r5, #0]
 8000e74:	d501      	bpl.n	8000e7a <_printf_i+0xbe>
 8000e76:	681e      	ldr	r6, [r3, #0]
 8000e78:	e003      	b.n	8000e82 <_printf_i+0xc6>
 8000e7a:	0646      	lsls	r6, r0, #25
 8000e7c:	d5fb      	bpl.n	8000e76 <_printf_i+0xba>
 8000e7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000e82:	2e00      	cmp	r6, #0
 8000e84:	da03      	bge.n	8000e8e <_printf_i+0xd2>
 8000e86:	232d      	movs	r3, #45	; 0x2d
 8000e88:	4276      	negs	r6, r6
 8000e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e8e:	485a      	ldr	r0, [pc, #360]	; (8000ff8 <_printf_i+0x23c>)
 8000e90:	230a      	movs	r3, #10
 8000e92:	e012      	b.n	8000eba <_printf_i+0xfe>
 8000e94:	682b      	ldr	r3, [r5, #0]
 8000e96:	6820      	ldr	r0, [r4, #0]
 8000e98:	1d19      	adds	r1, r3, #4
 8000e9a:	6029      	str	r1, [r5, #0]
 8000e9c:	0605      	lsls	r5, r0, #24
 8000e9e:	d501      	bpl.n	8000ea4 <_printf_i+0xe8>
 8000ea0:	681e      	ldr	r6, [r3, #0]
 8000ea2:	e002      	b.n	8000eaa <_printf_i+0xee>
 8000ea4:	0641      	lsls	r1, r0, #25
 8000ea6:	d5fb      	bpl.n	8000ea0 <_printf_i+0xe4>
 8000ea8:	881e      	ldrh	r6, [r3, #0]
 8000eaa:	4853      	ldr	r0, [pc, #332]	; (8000ff8 <_printf_i+0x23c>)
 8000eac:	2f6f      	cmp	r7, #111	; 0x6f
 8000eae:	bf0c      	ite	eq
 8000eb0:	2308      	moveq	r3, #8
 8000eb2:	230a      	movne	r3, #10
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000eba:	6865      	ldr	r5, [r4, #4]
 8000ebc:	60a5      	str	r5, [r4, #8]
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	bfa2      	ittt	ge
 8000ec2:	6821      	ldrge	r1, [r4, #0]
 8000ec4:	f021 0104 	bicge.w	r1, r1, #4
 8000ec8:	6021      	strge	r1, [r4, #0]
 8000eca:	b90e      	cbnz	r6, 8000ed0 <_printf_i+0x114>
 8000ecc:	2d00      	cmp	r5, #0
 8000ece:	d04b      	beq.n	8000f68 <_printf_i+0x1ac>
 8000ed0:	4615      	mov	r5, r2
 8000ed2:	fbb6 f1f3 	udiv	r1, r6, r3
 8000ed6:	fb03 6711 	mls	r7, r3, r1, r6
 8000eda:	5dc7      	ldrb	r7, [r0, r7]
 8000edc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	42bb      	cmp	r3, r7
 8000ee4:	460e      	mov	r6, r1
 8000ee6:	d9f4      	bls.n	8000ed2 <_printf_i+0x116>
 8000ee8:	2b08      	cmp	r3, #8
 8000eea:	d10b      	bne.n	8000f04 <_printf_i+0x148>
 8000eec:	6823      	ldr	r3, [r4, #0]
 8000eee:	07de      	lsls	r6, r3, #31
 8000ef0:	d508      	bpl.n	8000f04 <_printf_i+0x148>
 8000ef2:	6923      	ldr	r3, [r4, #16]
 8000ef4:	6861      	ldr	r1, [r4, #4]
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	bfde      	ittt	le
 8000efa:	2330      	movle	r3, #48	; 0x30
 8000efc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000f00:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8000f04:	1b52      	subs	r2, r2, r5
 8000f06:	6122      	str	r2, [r4, #16]
 8000f08:	f8cd a000 	str.w	sl, [sp]
 8000f0c:	464b      	mov	r3, r9
 8000f0e:	aa03      	add	r2, sp, #12
 8000f10:	4621      	mov	r1, r4
 8000f12:	4640      	mov	r0, r8
 8000f14:	f7ff fee4 	bl	8000ce0 <_printf_common>
 8000f18:	3001      	adds	r0, #1
 8000f1a:	d14a      	bne.n	8000fb2 <_printf_i+0x1f6>
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f20:	b004      	add	sp, #16
 8000f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	f043 0320 	orr.w	r3, r3, #32
 8000f2c:	6023      	str	r3, [r4, #0]
 8000f2e:	4833      	ldr	r0, [pc, #204]	; (8000ffc <_printf_i+0x240>)
 8000f30:	2778      	movs	r7, #120	; 0x78
 8000f32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	6829      	ldr	r1, [r5, #0]
 8000f3a:	061f      	lsls	r7, r3, #24
 8000f3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8000f40:	d402      	bmi.n	8000f48 <_printf_i+0x18c>
 8000f42:	065f      	lsls	r7, r3, #25
 8000f44:	bf48      	it	mi
 8000f46:	b2b6      	uxthmi	r6, r6
 8000f48:	07df      	lsls	r7, r3, #31
 8000f4a:	bf48      	it	mi
 8000f4c:	f043 0320 	orrmi.w	r3, r3, #32
 8000f50:	6029      	str	r1, [r5, #0]
 8000f52:	bf48      	it	mi
 8000f54:	6023      	strmi	r3, [r4, #0]
 8000f56:	b91e      	cbnz	r6, 8000f60 <_printf_i+0x1a4>
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	f023 0320 	bic.w	r3, r3, #32
 8000f5e:	6023      	str	r3, [r4, #0]
 8000f60:	2310      	movs	r3, #16
 8000f62:	e7a7      	b.n	8000eb4 <_printf_i+0xf8>
 8000f64:	4824      	ldr	r0, [pc, #144]	; (8000ff8 <_printf_i+0x23c>)
 8000f66:	e7e4      	b.n	8000f32 <_printf_i+0x176>
 8000f68:	4615      	mov	r5, r2
 8000f6a:	e7bd      	b.n	8000ee8 <_printf_i+0x12c>
 8000f6c:	682b      	ldr	r3, [r5, #0]
 8000f6e:	6826      	ldr	r6, [r4, #0]
 8000f70:	6961      	ldr	r1, [r4, #20]
 8000f72:	1d18      	adds	r0, r3, #4
 8000f74:	6028      	str	r0, [r5, #0]
 8000f76:	0635      	lsls	r5, r6, #24
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	d501      	bpl.n	8000f80 <_printf_i+0x1c4>
 8000f7c:	6019      	str	r1, [r3, #0]
 8000f7e:	e002      	b.n	8000f86 <_printf_i+0x1ca>
 8000f80:	0670      	lsls	r0, r6, #25
 8000f82:	d5fb      	bpl.n	8000f7c <_printf_i+0x1c0>
 8000f84:	8019      	strh	r1, [r3, #0]
 8000f86:	2300      	movs	r3, #0
 8000f88:	6123      	str	r3, [r4, #16]
 8000f8a:	4615      	mov	r5, r2
 8000f8c:	e7bc      	b.n	8000f08 <_printf_i+0x14c>
 8000f8e:	682b      	ldr	r3, [r5, #0]
 8000f90:	1d1a      	adds	r2, r3, #4
 8000f92:	602a      	str	r2, [r5, #0]
 8000f94:	681d      	ldr	r5, [r3, #0]
 8000f96:	6862      	ldr	r2, [r4, #4]
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4628      	mov	r0, r5
 8000f9c:	f7ff f908 	bl	80001b0 <memchr>
 8000fa0:	b108      	cbz	r0, 8000fa6 <_printf_i+0x1ea>
 8000fa2:	1b40      	subs	r0, r0, r5
 8000fa4:	6060      	str	r0, [r4, #4]
 8000fa6:	6863      	ldr	r3, [r4, #4]
 8000fa8:	6123      	str	r3, [r4, #16]
 8000faa:	2300      	movs	r3, #0
 8000fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fb0:	e7aa      	b.n	8000f08 <_printf_i+0x14c>
 8000fb2:	6923      	ldr	r3, [r4, #16]
 8000fb4:	462a      	mov	r2, r5
 8000fb6:	4649      	mov	r1, r9
 8000fb8:	4640      	mov	r0, r8
 8000fba:	47d0      	blx	sl
 8000fbc:	3001      	adds	r0, #1
 8000fbe:	d0ad      	beq.n	8000f1c <_printf_i+0x160>
 8000fc0:	6823      	ldr	r3, [r4, #0]
 8000fc2:	079b      	lsls	r3, r3, #30
 8000fc4:	d413      	bmi.n	8000fee <_printf_i+0x232>
 8000fc6:	68e0      	ldr	r0, [r4, #12]
 8000fc8:	9b03      	ldr	r3, [sp, #12]
 8000fca:	4298      	cmp	r0, r3
 8000fcc:	bfb8      	it	lt
 8000fce:	4618      	movlt	r0, r3
 8000fd0:	e7a6      	b.n	8000f20 <_printf_i+0x164>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	4632      	mov	r2, r6
 8000fd6:	4649      	mov	r1, r9
 8000fd8:	4640      	mov	r0, r8
 8000fda:	47d0      	blx	sl
 8000fdc:	3001      	adds	r0, #1
 8000fde:	d09d      	beq.n	8000f1c <_printf_i+0x160>
 8000fe0:	3501      	adds	r5, #1
 8000fe2:	68e3      	ldr	r3, [r4, #12]
 8000fe4:	9903      	ldr	r1, [sp, #12]
 8000fe6:	1a5b      	subs	r3, r3, r1
 8000fe8:	42ab      	cmp	r3, r5
 8000fea:	dcf2      	bgt.n	8000fd2 <_printf_i+0x216>
 8000fec:	e7eb      	b.n	8000fc6 <_printf_i+0x20a>
 8000fee:	2500      	movs	r5, #0
 8000ff0:	f104 0619 	add.w	r6, r4, #25
 8000ff4:	e7f5      	b.n	8000fe2 <_printf_i+0x226>
 8000ff6:	bf00      	nop
 8000ff8:	08001336 	.word	0x08001336
 8000ffc:	08001347 	.word	0x08001347

08001000 <memcpy>:
 8001000:	440a      	add	r2, r1
 8001002:	4291      	cmp	r1, r2
 8001004:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001008:	d100      	bne.n	800100c <memcpy+0xc>
 800100a:	4770      	bx	lr
 800100c:	b510      	push	{r4, lr}
 800100e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001012:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001016:	4291      	cmp	r1, r2
 8001018:	d1f9      	bne.n	800100e <memcpy+0xe>
 800101a:	bd10      	pop	{r4, pc}

0800101c <memmove>:
 800101c:	4288      	cmp	r0, r1
 800101e:	b510      	push	{r4, lr}
 8001020:	eb01 0402 	add.w	r4, r1, r2
 8001024:	d902      	bls.n	800102c <memmove+0x10>
 8001026:	4284      	cmp	r4, r0
 8001028:	4623      	mov	r3, r4
 800102a:	d807      	bhi.n	800103c <memmove+0x20>
 800102c:	1e43      	subs	r3, r0, #1
 800102e:	42a1      	cmp	r1, r4
 8001030:	d008      	beq.n	8001044 <memmove+0x28>
 8001032:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001036:	f803 2f01 	strb.w	r2, [r3, #1]!
 800103a:	e7f8      	b.n	800102e <memmove+0x12>
 800103c:	4402      	add	r2, r0
 800103e:	4601      	mov	r1, r0
 8001040:	428a      	cmp	r2, r1
 8001042:	d100      	bne.n	8001046 <memmove+0x2a>
 8001044:	bd10      	pop	{r4, pc}
 8001046:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800104a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800104e:	e7f7      	b.n	8001040 <memmove+0x24>

08001050 <_free_r>:
 8001050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001052:	2900      	cmp	r1, #0
 8001054:	d044      	beq.n	80010e0 <_free_r+0x90>
 8001056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800105a:	9001      	str	r0, [sp, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	f1a1 0404 	sub.w	r4, r1, #4
 8001062:	bfb8      	it	lt
 8001064:	18e4      	addlt	r4, r4, r3
 8001066:	f000 f913 	bl	8001290 <__malloc_lock>
 800106a:	4a1e      	ldr	r2, [pc, #120]	; (80010e4 <_free_r+0x94>)
 800106c:	9801      	ldr	r0, [sp, #4]
 800106e:	6813      	ldr	r3, [r2, #0]
 8001070:	b933      	cbnz	r3, 8001080 <_free_r+0x30>
 8001072:	6063      	str	r3, [r4, #4]
 8001074:	6014      	str	r4, [r2, #0]
 8001076:	b003      	add	sp, #12
 8001078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800107c:	f000 b90e 	b.w	800129c <__malloc_unlock>
 8001080:	42a3      	cmp	r3, r4
 8001082:	d908      	bls.n	8001096 <_free_r+0x46>
 8001084:	6825      	ldr	r5, [r4, #0]
 8001086:	1961      	adds	r1, r4, r5
 8001088:	428b      	cmp	r3, r1
 800108a:	bf01      	itttt	eq
 800108c:	6819      	ldreq	r1, [r3, #0]
 800108e:	685b      	ldreq	r3, [r3, #4]
 8001090:	1949      	addeq	r1, r1, r5
 8001092:	6021      	streq	r1, [r4, #0]
 8001094:	e7ed      	b.n	8001072 <_free_r+0x22>
 8001096:	461a      	mov	r2, r3
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	b10b      	cbz	r3, 80010a0 <_free_r+0x50>
 800109c:	42a3      	cmp	r3, r4
 800109e:	d9fa      	bls.n	8001096 <_free_r+0x46>
 80010a0:	6811      	ldr	r1, [r2, #0]
 80010a2:	1855      	adds	r5, r2, r1
 80010a4:	42a5      	cmp	r5, r4
 80010a6:	d10b      	bne.n	80010c0 <_free_r+0x70>
 80010a8:	6824      	ldr	r4, [r4, #0]
 80010aa:	4421      	add	r1, r4
 80010ac:	1854      	adds	r4, r2, r1
 80010ae:	42a3      	cmp	r3, r4
 80010b0:	6011      	str	r1, [r2, #0]
 80010b2:	d1e0      	bne.n	8001076 <_free_r+0x26>
 80010b4:	681c      	ldr	r4, [r3, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	6053      	str	r3, [r2, #4]
 80010ba:	440c      	add	r4, r1
 80010bc:	6014      	str	r4, [r2, #0]
 80010be:	e7da      	b.n	8001076 <_free_r+0x26>
 80010c0:	d902      	bls.n	80010c8 <_free_r+0x78>
 80010c2:	230c      	movs	r3, #12
 80010c4:	6003      	str	r3, [r0, #0]
 80010c6:	e7d6      	b.n	8001076 <_free_r+0x26>
 80010c8:	6825      	ldr	r5, [r4, #0]
 80010ca:	1961      	adds	r1, r4, r5
 80010cc:	428b      	cmp	r3, r1
 80010ce:	bf04      	itt	eq
 80010d0:	6819      	ldreq	r1, [r3, #0]
 80010d2:	685b      	ldreq	r3, [r3, #4]
 80010d4:	6063      	str	r3, [r4, #4]
 80010d6:	bf04      	itt	eq
 80010d8:	1949      	addeq	r1, r1, r5
 80010da:	6021      	streq	r1, [r4, #0]
 80010dc:	6054      	str	r4, [r2, #4]
 80010de:	e7ca      	b.n	8001076 <_free_r+0x26>
 80010e0:	b003      	add	sp, #12
 80010e2:	bd30      	pop	{r4, r5, pc}
 80010e4:	20001090 	.word	0x20001090

080010e8 <sbrk_aligned>:
 80010e8:	b570      	push	{r4, r5, r6, lr}
 80010ea:	4e0e      	ldr	r6, [pc, #56]	; (8001124 <sbrk_aligned+0x3c>)
 80010ec:	460c      	mov	r4, r1
 80010ee:	6831      	ldr	r1, [r6, #0]
 80010f0:	4605      	mov	r5, r0
 80010f2:	b911      	cbnz	r1, 80010fa <sbrk_aligned+0x12>
 80010f4:	f000 f8bc 	bl	8001270 <_sbrk_r>
 80010f8:	6030      	str	r0, [r6, #0]
 80010fa:	4621      	mov	r1, r4
 80010fc:	4628      	mov	r0, r5
 80010fe:	f000 f8b7 	bl	8001270 <_sbrk_r>
 8001102:	1c43      	adds	r3, r0, #1
 8001104:	d00a      	beq.n	800111c <sbrk_aligned+0x34>
 8001106:	1cc4      	adds	r4, r0, #3
 8001108:	f024 0403 	bic.w	r4, r4, #3
 800110c:	42a0      	cmp	r0, r4
 800110e:	d007      	beq.n	8001120 <sbrk_aligned+0x38>
 8001110:	1a21      	subs	r1, r4, r0
 8001112:	4628      	mov	r0, r5
 8001114:	f000 f8ac 	bl	8001270 <_sbrk_r>
 8001118:	3001      	adds	r0, #1
 800111a:	d101      	bne.n	8001120 <sbrk_aligned+0x38>
 800111c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001120:	4620      	mov	r0, r4
 8001122:	bd70      	pop	{r4, r5, r6, pc}
 8001124:	20001094 	.word	0x20001094

08001128 <_malloc_r>:
 8001128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800112c:	1ccd      	adds	r5, r1, #3
 800112e:	f025 0503 	bic.w	r5, r5, #3
 8001132:	3508      	adds	r5, #8
 8001134:	2d0c      	cmp	r5, #12
 8001136:	bf38      	it	cc
 8001138:	250c      	movcc	r5, #12
 800113a:	2d00      	cmp	r5, #0
 800113c:	4607      	mov	r7, r0
 800113e:	db01      	blt.n	8001144 <_malloc_r+0x1c>
 8001140:	42a9      	cmp	r1, r5
 8001142:	d905      	bls.n	8001150 <_malloc_r+0x28>
 8001144:	230c      	movs	r3, #12
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	2600      	movs	r6, #0
 800114a:	4630      	mov	r0, r6
 800114c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001150:	4e2e      	ldr	r6, [pc, #184]	; (800120c <_malloc_r+0xe4>)
 8001152:	f000 f89d 	bl	8001290 <__malloc_lock>
 8001156:	6833      	ldr	r3, [r6, #0]
 8001158:	461c      	mov	r4, r3
 800115a:	bb34      	cbnz	r4, 80011aa <_malloc_r+0x82>
 800115c:	4629      	mov	r1, r5
 800115e:	4638      	mov	r0, r7
 8001160:	f7ff ffc2 	bl	80010e8 <sbrk_aligned>
 8001164:	1c43      	adds	r3, r0, #1
 8001166:	4604      	mov	r4, r0
 8001168:	d14d      	bne.n	8001206 <_malloc_r+0xde>
 800116a:	6834      	ldr	r4, [r6, #0]
 800116c:	4626      	mov	r6, r4
 800116e:	2e00      	cmp	r6, #0
 8001170:	d140      	bne.n	80011f4 <_malloc_r+0xcc>
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	4631      	mov	r1, r6
 8001176:	4638      	mov	r0, r7
 8001178:	eb04 0803 	add.w	r8, r4, r3
 800117c:	f000 f878 	bl	8001270 <_sbrk_r>
 8001180:	4580      	cmp	r8, r0
 8001182:	d13a      	bne.n	80011fa <_malloc_r+0xd2>
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	3503      	adds	r5, #3
 8001188:	1aed      	subs	r5, r5, r3
 800118a:	f025 0503 	bic.w	r5, r5, #3
 800118e:	3508      	adds	r5, #8
 8001190:	2d0c      	cmp	r5, #12
 8001192:	bf38      	it	cc
 8001194:	250c      	movcc	r5, #12
 8001196:	4629      	mov	r1, r5
 8001198:	4638      	mov	r0, r7
 800119a:	f7ff ffa5 	bl	80010e8 <sbrk_aligned>
 800119e:	3001      	adds	r0, #1
 80011a0:	d02b      	beq.n	80011fa <_malloc_r+0xd2>
 80011a2:	6823      	ldr	r3, [r4, #0]
 80011a4:	442b      	add	r3, r5
 80011a6:	6023      	str	r3, [r4, #0]
 80011a8:	e00e      	b.n	80011c8 <_malloc_r+0xa0>
 80011aa:	6822      	ldr	r2, [r4, #0]
 80011ac:	1b52      	subs	r2, r2, r5
 80011ae:	d41e      	bmi.n	80011ee <_malloc_r+0xc6>
 80011b0:	2a0b      	cmp	r2, #11
 80011b2:	d916      	bls.n	80011e2 <_malloc_r+0xba>
 80011b4:	1961      	adds	r1, r4, r5
 80011b6:	42a3      	cmp	r3, r4
 80011b8:	6025      	str	r5, [r4, #0]
 80011ba:	bf18      	it	ne
 80011bc:	6059      	strne	r1, [r3, #4]
 80011be:	6863      	ldr	r3, [r4, #4]
 80011c0:	bf08      	it	eq
 80011c2:	6031      	streq	r1, [r6, #0]
 80011c4:	5162      	str	r2, [r4, r5]
 80011c6:	604b      	str	r3, [r1, #4]
 80011c8:	4638      	mov	r0, r7
 80011ca:	f104 060b 	add.w	r6, r4, #11
 80011ce:	f000 f865 	bl	800129c <__malloc_unlock>
 80011d2:	f026 0607 	bic.w	r6, r6, #7
 80011d6:	1d23      	adds	r3, r4, #4
 80011d8:	1af2      	subs	r2, r6, r3
 80011da:	d0b6      	beq.n	800114a <_malloc_r+0x22>
 80011dc:	1b9b      	subs	r3, r3, r6
 80011de:	50a3      	str	r3, [r4, r2]
 80011e0:	e7b3      	b.n	800114a <_malloc_r+0x22>
 80011e2:	6862      	ldr	r2, [r4, #4]
 80011e4:	42a3      	cmp	r3, r4
 80011e6:	bf0c      	ite	eq
 80011e8:	6032      	streq	r2, [r6, #0]
 80011ea:	605a      	strne	r2, [r3, #4]
 80011ec:	e7ec      	b.n	80011c8 <_malloc_r+0xa0>
 80011ee:	4623      	mov	r3, r4
 80011f0:	6864      	ldr	r4, [r4, #4]
 80011f2:	e7b2      	b.n	800115a <_malloc_r+0x32>
 80011f4:	4634      	mov	r4, r6
 80011f6:	6876      	ldr	r6, [r6, #4]
 80011f8:	e7b9      	b.n	800116e <_malloc_r+0x46>
 80011fa:	230c      	movs	r3, #12
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	4638      	mov	r0, r7
 8001200:	f000 f84c 	bl	800129c <__malloc_unlock>
 8001204:	e7a1      	b.n	800114a <_malloc_r+0x22>
 8001206:	6025      	str	r5, [r4, #0]
 8001208:	e7de      	b.n	80011c8 <_malloc_r+0xa0>
 800120a:	bf00      	nop
 800120c:	20001090 	.word	0x20001090

08001210 <_realloc_r>:
 8001210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001214:	4680      	mov	r8, r0
 8001216:	4614      	mov	r4, r2
 8001218:	460e      	mov	r6, r1
 800121a:	b921      	cbnz	r1, 8001226 <_realloc_r+0x16>
 800121c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001220:	4611      	mov	r1, r2
 8001222:	f7ff bf81 	b.w	8001128 <_malloc_r>
 8001226:	b92a      	cbnz	r2, 8001234 <_realloc_r+0x24>
 8001228:	f7ff ff12 	bl	8001050 <_free_r>
 800122c:	4625      	mov	r5, r4
 800122e:	4628      	mov	r0, r5
 8001230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001234:	f000 f838 	bl	80012a8 <_malloc_usable_size_r>
 8001238:	4284      	cmp	r4, r0
 800123a:	4607      	mov	r7, r0
 800123c:	d802      	bhi.n	8001244 <_realloc_r+0x34>
 800123e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001242:	d812      	bhi.n	800126a <_realloc_r+0x5a>
 8001244:	4621      	mov	r1, r4
 8001246:	4640      	mov	r0, r8
 8001248:	f7ff ff6e 	bl	8001128 <_malloc_r>
 800124c:	4605      	mov	r5, r0
 800124e:	2800      	cmp	r0, #0
 8001250:	d0ed      	beq.n	800122e <_realloc_r+0x1e>
 8001252:	42bc      	cmp	r4, r7
 8001254:	4622      	mov	r2, r4
 8001256:	4631      	mov	r1, r6
 8001258:	bf28      	it	cs
 800125a:	463a      	movcs	r2, r7
 800125c:	f7ff fed0 	bl	8001000 <memcpy>
 8001260:	4631      	mov	r1, r6
 8001262:	4640      	mov	r0, r8
 8001264:	f7ff fef4 	bl	8001050 <_free_r>
 8001268:	e7e1      	b.n	800122e <_realloc_r+0x1e>
 800126a:	4635      	mov	r5, r6
 800126c:	e7df      	b.n	800122e <_realloc_r+0x1e>
	...

08001270 <_sbrk_r>:
 8001270:	b538      	push	{r3, r4, r5, lr}
 8001272:	4d06      	ldr	r5, [pc, #24]	; (800128c <_sbrk_r+0x1c>)
 8001274:	2300      	movs	r3, #0
 8001276:	4604      	mov	r4, r0
 8001278:	4608      	mov	r0, r1
 800127a:	602b      	str	r3, [r5, #0]
 800127c:	f000 f81c 	bl	80012b8 <_sbrk>
 8001280:	1c43      	adds	r3, r0, #1
 8001282:	d102      	bne.n	800128a <_sbrk_r+0x1a>
 8001284:	682b      	ldr	r3, [r5, #0]
 8001286:	b103      	cbz	r3, 800128a <_sbrk_r+0x1a>
 8001288:	6023      	str	r3, [r4, #0]
 800128a:	bd38      	pop	{r3, r4, r5, pc}
 800128c:	20001098 	.word	0x20001098

08001290 <__malloc_lock>:
 8001290:	4801      	ldr	r0, [pc, #4]	; (8001298 <__malloc_lock+0x8>)
 8001292:	f7ff bbcb 	b.w	8000a2c <__retarget_lock_acquire_recursive>
 8001296:	bf00      	nop
 8001298:	2000108c 	.word	0x2000108c

0800129c <__malloc_unlock>:
 800129c:	4801      	ldr	r0, [pc, #4]	; (80012a4 <__malloc_unlock+0x8>)
 800129e:	f7ff bbc6 	b.w	8000a2e <__retarget_lock_release_recursive>
 80012a2:	bf00      	nop
 80012a4:	2000108c 	.word	0x2000108c

080012a8 <_malloc_usable_size_r>:
 80012a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012ac:	1f18      	subs	r0, r3, #4
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	bfbc      	itt	lt
 80012b2:	580b      	ldrlt	r3, [r1, r0]
 80012b4:	18c0      	addlt	r0, r0, r3
 80012b6:	4770      	bx	lr

080012b8 <_sbrk>:
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <_sbrk+0x14>)
 80012ba:	4905      	ldr	r1, [pc, #20]	; (80012d0 <_sbrk+0x18>)
 80012bc:	6813      	ldr	r3, [r2, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	bf08      	it	eq
 80012c2:	460b      	moveq	r3, r1
 80012c4:	4418      	add	r0, r3
 80012c6:	6010      	str	r0, [r2, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	4770      	bx	lr
 80012cc:	2000109c 	.word	0x2000109c
 80012d0:	200010a0 	.word	0x200010a0

080012d4 <_init>:
 80012d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012d6:	bf00      	nop
 80012d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012da:	bc08      	pop	{r3}
 80012dc:	469e      	mov	lr, r3
 80012de:	4770      	bx	lr

080012e0 <_fini>:
 80012e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012e2:	bf00      	nop
 80012e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012e6:	bc08      	pop	{r3}
 80012e8:	469e      	mov	lr, r3
 80012ea:	4770      	bx	lr
