
Debug/mcu_echo.elf:     file format elf32-littlearm
Debug/mcu_echo.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080006c9

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x000010e8 memsz 0x000010e8 flags rwx
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x080010e8 align 2**16
         filesz 0x00000068 memsz 0x00001098 flags rw-
    LOAD off    0x00001098 vaddr 0x20001098 paddr 0x08001150 align 2**16
         filesz 0x00000000 memsz 0x00000600 flags rw-
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ed4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08001074  08001074  00011074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010e0  080010e0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080010e0  080010e0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010e0  080010e0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010e0  080010e0  000110e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010e4  080010e4  000110e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080010e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001030  20000068  08001150  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001098  08001150  00021098  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081b2  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f71  00000000  00000000  00028248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000162  00000000  00000000  0002a1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000350  00000000  00000000  0002a320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000a0  00000000  00000000  0002a670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002fa4  00000000  00000000  0002a710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000015c8  00000000  00000000  0002d6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000003c  00000000  00000000  0002ec7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005a8  00000000  00000000  0002ecb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000117e  00000000  00000000  0002f260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 000001f5  00000000  00000000  000303de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  000305d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001a0 l    d  .text	00000000 .text
08001074 l    d  .rodata	00000000 .rodata
080010e0 l    d  .ARM.extab	00000000 .ARM.extab
080010e0 l    d  .ARM	00000000 .ARM
080010e0 l    d  .preinit_array	00000000 .preinit_array
080010e0 l    d  .init_array	00000000 .init_array
080010e4 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000068 l    d  .bss	00000000 .bss
20001098 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 startup_stm32f411xe.o
080006dc l       .text	00000000 LoopCopyDataInit
080006d6 l       .text	00000000 CopyDataInit
080006ee l       .text	00000000 LoopFillZerobss
080006ea l       .text	00000000 FillZerobss
08000718 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 crtstuff.c
0800105c l     O .text	00000000 __EH_FRAME_BEGIN__
08000250 l     F .text	00000000 __do_global_dtors_aux
20000068 l     O .bss	00000000 completed.1
080010e4 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000274 l     F .text	00000000 frame_dummy
2000006c l     O .bss	00000000 object.0
080010e0 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mcu_echo.c
08000290 l     F .text	00000034 msg_offset
00000000 l    df *ABS*	00000000 uart.c
08000460 l     F .text	00000054 uart_pin_setup
08000540 l     F .text	00000054 uart_enable
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
08000e70 l     F .text	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrk.c
20001094 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000008 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
080010e8 l       .fini_array	00000000 __fini_array_end
080010e4 l       .fini_array	00000000 __fini_array_start
080010e4 l       .init_array	00000000 __init_array_end
080010e0 l       .preinit_array	00000000 __preinit_array_end
080010e0 l       .init_array	00000000 __init_array_start
080010e0 l       .preinit_array	00000000 __preinit_array_start
08000718  w    F .text	00000002 RTC_Alarm_IRQHandler
08001030 g     F .text	00000010 _malloc_usable_size_r
08000718  w    F .text	00000002 EXTI2_IRQHandler
08000718  w    F .text	00000002 DebugMon_Handler
08000718  w    F .text	00000002 SPI4_IRQHandler
08000718  w    F .text	00000002 TIM1_CC_IRQHandler
08000718  w    F .text	00000002 DMA2_Stream5_IRQHandler
08000718  w    F .text	00000002 HardFault_Handler
08000718  w    F .text	00000002 DMA1_Stream5_IRQHandler
08001024 g     F .text	0000000c __malloc_unlock
00000400 g       *ABS*	00000000 _Min_Stack_Size
08000718  w    F .text	00000002 SysTick_Handler
08000718  w    F .text	00000002 PVD_IRQHandler
08000718  w    F .text	00000002 SDIO_IRQHandler
08000da4 g     F .text	00000034 memmove
08000718  w    F .text	00000002 TAMP_STAMP_IRQHandler
080010e8 g       *ABS*	00000000 _sidata
08000718  w    F .text	00000002 PendSV_Handler
08000718  w    F .text	00000002 NMI_Handler
080010e0 g       .ARM	00000000 __exidx_end
08000718  w    F .text	00000002 EXTI3_IRQHandler
0800041c g     F .text	00000044 uart_receive
080003dc g     F .text	00000040 uart_send
08000718  w    F .text	00000002 TIM1_UP_TIM10_IRQHandler
20001090 g     O .bss	00000004 errno
08001074 g       .text	00000000 _etext
20000068 g       .bss	00000000 _sbss
08000718  w    F .text	00000002 I2C3_ER_IRQHandler
08000d88 g     F .text	0000001c memcpy
20000084 g     O .bss	00001000 msg_buffer
0800086c g     F .text	000001fc _svfprintf_r
08000718  w    F .text	00000002 EXTI0_IRQHandler
08000718  w    F .text	00000002 I2C2_EV_IRQHandler
08000718  w    F .text	00000002 DMA1_Stream2_IRQHandler
08000718  w    F .text	00000002 FPU_IRQHandler
20000000 g     O .data	00000004 SystemCoreClock
08000718  w    F .text	00000002 UsageFault_Handler
08000718  w    F .text	00000002 DMA2_Stream2_IRQHandler
20000068 g       .bss	00000000 __bss_start__
20000000 g       .data	00000000 _sdata
08000718  w    F .text	00000002 SPI1_IRQHandler
08000ff8 g     F .text	00000020 _sbrk_r
08000718  w    F .text	00000002 TIM1_BRK_TIM9_IRQHandler
080010e0 g       .ARM	00000000 __exidx_start
08000718  w    F .text	00000002 DMA2_Stream3_IRQHandler
08000f98 g     F .text	0000005e _realloc_r
0800071c g     F .text	00000048 __libc_init_array
08001040 g     F .text	0000001c _sbrk
08000718  w    F .text	00000002 USART6_IRQHandler
0800105c g     F .text	00000000 _init
20001098 g       .bss	00000000 _ebss
080006c8  w    F .text	00000038 Reset_Handler
20001084 g     O .bss	00000001 __lock___malloc_recursive_mutex
08000718  w    F .text	00000002 DMA2_Stream0_IRQHandler
080004b4 g     F .text	00000028 led_on
08000718  w    F .text	00000002 TIM4_IRQHandler
20001098 g       ._user_heap_stack	00000000 end
08000718  w    F .text	00000002 I2C1_EV_IRQHandler
080007b6 g     F .text	00000002 __retarget_lock_release_recursive
08000718  w    F .text	00000002 DMA1_Stream6_IRQHandler
080007b8 g     F .text	000000b4 __ssputs_r
08000718  w    F .text	00000002 DMA1_Stream1_IRQHandler
08000594 g     F .text	00000012 uart_init
080001b0 g     F .text	00000000 memchr
20001098 g       .bss	00000000 __bss_end__
08000dd8 g     F .text	00000098 _free_r
08000718  w    F .text	00000002 TIM3_IRQHandler
08000718  w    F .text	00000002 RCC_IRQHandler
00000200 g       *ABS*	00000000 _Min_Heap_Size
08000718 g       .text	00000002 Default_Handler
08000718  w    F .text	00000002 EXTI15_10_IRQHandler
08000718  w    F .text	00000002 ADC_IRQHandler
08000718  w    F .text	00000002 DMA1_Stream7_IRQHandler
08000718  w    F .text	00000002 SPI5_IRQHandler
08000718  w    F .text	00000002 TIM5_IRQHandler
08000718  w    F .text	00000002 DMA2_Stream7_IRQHandler
08000718  w    F .text	00000002 I2C3_EV_IRQHandler
08000718  w    F .text	00000002 EXTI9_5_IRQHandler
08000718  w    F .text	00000002 RTC_WKUP_IRQHandler
08001018 g     F .text	0000000c __malloc_lock
08000718  w    F .text	00000002 SPI2_IRQHandler
080007b4 g     F .text	00000002 __retarget_lock_acquire_recursive
08000764 g     F .text	00000010 memset
08000718  w    F .text	00000002 MemManage_Handler
080002c4 g     F .text	00000118 main
08000718  w    F .text	00000002 DMA1_Stream0_IRQHandler
08000718  w    F .text	00000002 SVC_Handler
08000eb0 g     F .text	000000e8 _malloc_r
08000718  w    F .text	00000002 EXTI4_IRQHandler
080005a8 g     F .text	0000005c SystemInit
08001068 g     F .text	00000000 _fini
08000774 g     F .text	00000040 sprintf
080004dc g     F .text	00000028 led_off
08000a68 g     F .text	000000da _printf_common
20000004 g     O .data	00000004 _impure_ptr
0800086c g     F .text	000001fc _svfiprintf_r
08000718  w    F .text	00000002 WWDG_IRQHandler
08000718  w    F .text	00000002 TIM2_IRQHandler
08000504 g     F .text	0000003c led_init
08000604 g     F .text	000000c4 set_sysclk_to_100
08000718  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
08000718  w    F .text	00000002 TIM1_TRG_COM_TIM11_IRQHandler
20020000 g       .isr_vector	00000000 _estack
08000718  w    F .text	00000002 EXTI1_IRQHandler
20000068 g       .data	00000000 _edata
08000718  w    F .text	00000002 USART2_IRQHandler
08000000 g     O .isr_vector	00000000 g_pfnVectors
08000718  w    F .text	00000002 I2C2_ER_IRQHandler
08000774 g     F .text	00000040 siprintf
08000718  w    F .text	00000002 DMA2_Stream1_IRQHandler
08000718  w    F .text	00000002 FLASH_IRQHandler
08000718  w    F .text	00000002 DMA2_Stream4_IRQHandler
08000718  w    F .text	00000002 BusFault_Handler
08000718  w    F .text	00000002 USART1_IRQHandler
080001a0 g     F .text	00000010 strlen
08000718  w    F .text	00000002 OTG_FS_IRQHandler
08000b44 g     F .text	00000244 _printf_i
08000718  w    F .text	00000002 SPI3_IRQHandler
08000718  w    F .text	00000002 DMA1_Stream4_IRQHandler
2000108c g     O .bss	00000004 __malloc_sbrk_start
08000718  w    F .text	00000002 I2C1_ER_IRQHandler
20001088 g     O .bss	00000004 __malloc_free_list
08000718  w    F .text	00000002 DMA2_Stream6_IRQHandler
08000718  w    F .text	00000002 DMA1_Stream3_IRQHandler



Disassembly of section .text:

080001a0 <strlen>:
 80001a0:	4603      	mov	r3, r0
 80001a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a6:	2a00      	cmp	r2, #0
 80001a8:	d1fb      	bne.n	80001a2 <strlen+0x2>
 80001aa:	1a18      	subs	r0, r3, r0
 80001ac:	3801      	subs	r0, #1
 80001ae:	4770      	bx	lr

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000068 	.word	0x20000068
 800026c:	00000000 	.word	0x00000000
 8000270:	0800105c 	.word	0x0800105c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000006c 	.word	0x2000006c
 800028c:	0800105c 	.word	0x0800105c

08000290 <msg_offset>:
#include "uart.h"

#define READSIZE(buffer) *(size_t *)buffer

// Returns pointer to msg without padding
static char * msg_offset(char * msg) {
 8000290:	b084      	sub	sp, #16
 8000292:	9001      	str	r0, [sp, #4]
	for (size_t i=0; i<BUFFERSIZE; i++) {
 8000294:	2300      	movs	r3, #0
 8000296:	9303      	str	r3, [sp, #12]
 8000298:	e00c      	b.n	80002b4 <msg_offset+0x24>
		if (msg[i]) {
 800029a:	9a01      	ldr	r2, [sp, #4]
 800029c:	9b03      	ldr	r3, [sp, #12]
 800029e:	4413      	add	r3, r2
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d003      	beq.n	80002ae <msg_offset+0x1e>
			return msg + i;
 80002a6:	9a01      	ldr	r2, [sp, #4]
 80002a8:	9b03      	ldr	r3, [sp, #12]
 80002aa:	4413      	add	r3, r2
 80002ac:	e007      	b.n	80002be <msg_offset+0x2e>
	for (size_t i=0; i<BUFFERSIZE; i++) {
 80002ae:	9b03      	ldr	r3, [sp, #12]
 80002b0:	3301      	adds	r3, #1
 80002b2:	9303      	str	r3, [sp, #12]
 80002b4:	9b03      	ldr	r3, [sp, #12]
 80002b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80002ba:	d3ee      	bcc.n	800029a <msg_offset+0xa>
		}
	}
	return msg;
 80002bc:	9b01      	ldr	r3, [sp, #4]
}
 80002be:	4618      	mov	r0, r3
 80002c0:	b004      	add	sp, #16
 80002c2:	4770      	bx	lr

080002c4 <main>:

int main(void) {
 80002c4:	b500      	push	{lr}
 80002c6:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80002ca:	b083      	sub	sp, #12
	char debug_msg[BUFFERSIZE] = {0};
 80002cc:	ab02      	add	r3, sp, #8
 80002ce:	2200      	movs	r2, #0
 80002d0:	f843 2c08 	str.w	r2, [r3, #-8]
 80002d4:	3b04      	subs	r3, #4
 80002d6:	f640 72fc 	movw	r2, #4092	; 0xffc
 80002da:	2100      	movs	r1, #0
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 fa41 	bl	8000764 <memset>
	char * stripped_msg;
	size_t received_size=0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
 80002e8:	f102 0204 	add.w	r2, r2, #4
 80002ec:	6013      	str	r3, [r2, #0]

	uart_init();
 80002ee:	f000 f951 	bl	8000594 <uart_init>
	led_init();
 80002f2:	f000 f907 	bl	8000504 <led_init>

	while(1) {
		// Read received buffer size
		led_on(GREEN);
 80002f6:	200c      	movs	r0, #12
 80002f8:	f000 f8dc 	bl	80004b4 <led_on>
		uart_receive(msg_buffer, sizeof(size_t));
 80002fc:	2104      	movs	r1, #4
 80002fe:	4835      	ldr	r0, [pc, #212]	; (80003d4 <main+0x110>)
 8000300:	f000 f88c 	bl	800041c <uart_receive>
		received_size = READSIZE(msg_buffer) + PADDINGSIZE;
 8000304:	4b33      	ldr	r3, [pc, #204]	; (80003d4 <main+0x110>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3304      	adds	r3, #4
 800030a:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
 800030e:	f102 0204 	add.w	r2, r2, #4
 8000312:	6013      	str	r3, [r2, #0]
		memset(msg_buffer, 0, sizeof(size_t));
 8000314:	2204      	movs	r2, #4
 8000316:	2100      	movs	r1, #0
 8000318:	482e      	ldr	r0, [pc, #184]	; (80003d4 <main+0x110>)
 800031a:	f000 fa23 	bl	8000764 <memset>
		led_off(GREEN);
 800031e:	200c      	movs	r0, #12
 8000320:	f000 f8dc 	bl	80004dc <led_off>

		// Send back buffer content
		if (received_size > BUFFERSIZE) {
 8000324:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 8000328:	f103 0304 	add.w	r3, r3, #4
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000332:	d91e      	bls.n	8000372 <main+0xae>
			// Message too large
			led_on(ORANGE);
 8000334:	200d      	movs	r0, #13
 8000336:	f000 f8bd 	bl	80004b4 <led_on>
			sprintf(debug_msg, "Attempting to read %u bytes larger than buffer size %d.\n", (unsigned int)received_size, BUFFERSIZE);
 800033a:	a802      	add	r0, sp, #8
 800033c:	3808      	subs	r0, #8
 800033e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000342:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
 8000346:	f102 0204 	add.w	r2, r2, #4
 800034a:	6812      	ldr	r2, [r2, #0]
 800034c:	4922      	ldr	r1, [pc, #136]	; (80003d8 <main+0x114>)
 800034e:	f000 fa11 	bl	8000774 <siprintf>
			uart_send(debug_msg, strlen(debug_msg));
 8000352:	ab02      	add	r3, sp, #8
 8000354:	3b08      	subs	r3, #8
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ff22 	bl	80001a0 <strlen>
 800035c:	4602      	mov	r2, r0
 800035e:	ab02      	add	r3, sp, #8
 8000360:	3b08      	subs	r3, #8
 8000362:	4611      	mov	r1, r2
 8000364:	4618      	mov	r0, r3
 8000366:	f000 f839 	bl	80003dc <uart_send>
			led_off(ORANGE);
 800036a:	200d      	movs	r0, #13
 800036c:	f000 f8b6 	bl	80004dc <led_off>
 8000370:	e7c1      	b.n	80002f6 <main+0x32>
		} else {
			// Read message
			led_on(RED);
 8000372:	200e      	movs	r0, #14
 8000374:	f000 f89e 	bl	80004b4 <led_on>
			uart_receive(msg_buffer, received_size);
 8000378:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 800037c:	f103 0304 	add.w	r3, r3, #4
 8000380:	6819      	ldr	r1, [r3, #0]
 8000382:	4814      	ldr	r0, [pc, #80]	; (80003d4 <main+0x110>)
 8000384:	f000 f84a 	bl	800041c <uart_receive>
			led_off(RED);
 8000388:	200e      	movs	r0, #14
 800038a:	f000 f8a7 	bl	80004dc <led_off>

			// Echo message
			led_on(BLUE);
 800038e:	200f      	movs	r0, #15
 8000390:	f000 f890 	bl	80004b4 <led_on>
			stripped_msg = msg_offset(msg_buffer);
 8000394:	480f      	ldr	r0, [pc, #60]	; (80003d4 <main+0x110>)
 8000396:	f7ff ff7b 	bl	8000290 <msg_offset>
 800039a:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 800039e:	6018      	str	r0, [r3, #0]
			uart_send(stripped_msg, strlen(stripped_msg));
 80003a0:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80003a4:	6818      	ldr	r0, [r3, #0]
 80003a6:	f7ff fefb 	bl	80001a0 <strlen>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4619      	mov	r1, r3
 80003ae:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80003b2:	6818      	ldr	r0, [r3, #0]
 80003b4:	f000 f812 	bl	80003dc <uart_send>
			memset(msg_buffer, 0, received_size);
 80003b8:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80003bc:	f103 0304 	add.w	r3, r3, #4
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	2100      	movs	r1, #0
 80003c4:	4803      	ldr	r0, [pc, #12]	; (80003d4 <main+0x110>)
 80003c6:	f000 f9cd 	bl	8000764 <memset>
			led_off(BLUE);
 80003ca:	200f      	movs	r0, #15
 80003cc:	f000 f886 	bl	80004dc <led_off>
		led_on(GREEN);
 80003d0:	e791      	b.n	80002f6 <main+0x32>
 80003d2:	bf00      	nop
 80003d4:	20000084 	.word	0x20000084
 80003d8:	08001074 	.word	0x08001074

080003dc <uart_send>:
#include "uart.h"

char msg_buffer[BUFFERSIZE] = {0};

// Send content of pointer through uart
void uart_send(void * data, size_t size) {
 80003dc:	b084      	sub	sp, #16
 80003de:	9001      	str	r0, [sp, #4]
 80003e0:	9100      	str	r1, [sp, #0]
	for (size_t i=0; i<size; i++){
 80003e2:	2300      	movs	r3, #0
 80003e4:	9303      	str	r3, [sp, #12]
 80003e6:	e00f      	b.n	8000408 <uart_send+0x2c>
		// Send character
		USART2->DR = ((char *)data)[i];
 80003e8:	9a01      	ldr	r2, [sp, #4]
 80003ea:	9b03      	ldr	r3, [sp, #12]
 80003ec:	4413      	add	r3, r2
 80003ee:	781a      	ldrb	r2, [r3, #0]
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <uart_send+0x3c>)
 80003f2:	605a      	str	r2, [r3, #4]
		// Wait for transmit complete
		while(!(USART2->SR & (1 << 6)));
 80003f4:	bf00      	nop
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <uart_send+0x3c>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d0f9      	beq.n	80003f6 <uart_send+0x1a>
	for (size_t i=0; i<size; i++){
 8000402:	9b03      	ldr	r3, [sp, #12]
 8000404:	3301      	adds	r3, #1
 8000406:	9303      	str	r3, [sp, #12]
 8000408:	9a03      	ldr	r2, [sp, #12]
 800040a:	9b00      	ldr	r3, [sp, #0]
 800040c:	429a      	cmp	r2, r3
 800040e:	d3eb      	bcc.n	80003e8 <uart_send+0xc>
	}
}
 8000410:	bf00      	nop
 8000412:	bf00      	nop
 8000414:	b004      	add	sp, #16
 8000416:	4770      	bx	lr
 8000418:	40004400 	.word	0x40004400

0800041c <uart_receive>:

// Receive size bytes of content from uart and write it to buffer
void uart_receive(void * buffer, size_t size)  {
 800041c:	b084      	sub	sp, #16
 800041e:	9001      	str	r0, [sp, #4]
 8000420:	9100      	str	r1, [sp, #0]
	// USART CR2 configure stop bit count, default 1
	// USART2->CR2 &= ~(0x3U << 12);
	// USART2->CR2 != (0x0U << 12);
	for (size_t i=0; i < size; i++) {
 8000422:	2300      	movs	r3, #0
 8000424:	9303      	str	r3, [sp, #12]
 8000426:	e010      	b.n	800044a <uart_receive+0x2e>
		// Wait until RXNE bit is set
		while (!(USART2->SR & (0x1U << 5))){};
 8000428:	bf00      	nop
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <uart_receive+0x40>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f003 0320 	and.w	r3, r3, #32
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0f9      	beq.n	800042a <uart_receive+0xe>
		// Receive character
		((char *)buffer)[i] = USART2->DR;
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <uart_receive+0x40>)
 8000438:	6859      	ldr	r1, [r3, #4]
 800043a:	9a01      	ldr	r2, [sp, #4]
 800043c:	9b03      	ldr	r3, [sp, #12]
 800043e:	4413      	add	r3, r2
 8000440:	b2ca      	uxtb	r2, r1
 8000442:	701a      	strb	r2, [r3, #0]
	for (size_t i=0; i < size; i++) {
 8000444:	9b03      	ldr	r3, [sp, #12]
 8000446:	3301      	adds	r3, #1
 8000448:	9303      	str	r3, [sp, #12]
 800044a:	9a03      	ldr	r2, [sp, #12]
 800044c:	9b00      	ldr	r3, [sp, #0]
 800044e:	429a      	cmp	r2, r3
 8000450:	d3ea      	bcc.n	8000428 <uart_receive+0xc>
	}
}
 8000452:	bf00      	nop
 8000454:	bf00      	nop
 8000456:	b004      	add	sp, #16
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40004400 	.word	0x40004400

08000460 <uart_pin_setup>:

// Setup GPIO A2 and A3 pins for UART
static void uart_pin_setup(void) {
    // Enable GPIOA clock, bit 0 on AHB1ENR
    RCC->AHB1ENR |= (1 << 0);
 8000460:	4b12      	ldr	r3, [pc, #72]	; (80004ac <uart_pin_setup+0x4c>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	4a11      	ldr	r2, [pc, #68]	; (80004ac <uart_pin_setup+0x4c>)
 8000466:	f043 0301 	orr.w	r3, r3, #1
 800046a:	6313      	str	r3, [r2, #48]	; 0x30

    // Set pin modes as alternate mode 7 (pins 2 and 3)
    // USART2 TX and RX pins are PA2 and PA3 respectively
    GPIOA->MODER &= ~(0xFU << 4); // Reset bits 4:5 for PA2 and 6:7 for PA3
 800046c:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <uart_pin_setup+0x50>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a0f      	ldr	r2, [pc, #60]	; (80004b0 <uart_pin_setup+0x50>)
 8000472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000476:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0xAU << 4); // Set   bits 4:5 for PA2 and 6:7 for PA3 to alternate mode (10)
 8000478:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <uart_pin_setup+0x50>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a0c      	ldr	r2, [pc, #48]	; (80004b0 <uart_pin_setup+0x50>)
 800047e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000482:	6013      	str	r3, [r2, #0]

    // Set pin modes as high speed
    GPIOA->OSPEEDR |= 0x000000A0; // Set pin 2/3 to high speed mode (0b10)
 8000484:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <uart_pin_setup+0x50>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	4a09      	ldr	r2, [pc, #36]	; (80004b0 <uart_pin_setup+0x50>)
 800048a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800048e:	6093      	str	r3, [r2, #8]

    // Choose AF7 for USART2 in Alternate Function registers
    GPIOA->AFR[0] |= (0x7 << 8); // for pin A2
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <uart_pin_setup+0x50>)
 8000492:	6a1b      	ldr	r3, [r3, #32]
 8000494:	4a06      	ldr	r2, [pc, #24]	; (80004b0 <uart_pin_setup+0x50>)
 8000496:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800049a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (0x7 << 12); // for pin A3
 800049c:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <uart_pin_setup+0x50>)
 800049e:	6a1b      	ldr	r3, [r3, #32]
 80004a0:	4a03      	ldr	r2, [pc, #12]	; (80004b0 <uart_pin_setup+0x50>)
 80004a2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80004a6:	6213      	str	r3, [r2, #32]
}
 80004a8:	bf00      	nop
 80004aa:	4770      	bx	lr
 80004ac:	40023800 	.word	0x40023800
 80004b0:	40020000 	.word	0x40020000

080004b4 <led_on>:

// Turn on LED
void led_on(led l) {
 80004b4:	b082      	sub	sp, #8
 80004b6:	4603      	mov	r3, r0
 80004b8:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIOD->ODR |= (1U<<l);
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <led_on+0x24>)
 80004be:	695a      	ldr	r2, [r3, #20]
 80004c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80004c4:	2101      	movs	r1, #1
 80004c6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ca:	4903      	ldr	r1, [pc, #12]	; (80004d8 <led_on+0x24>)
 80004cc:	4313      	orrs	r3, r2
 80004ce:	614b      	str	r3, [r1, #20]
}
 80004d0:	bf00      	nop
 80004d2:	b002      	add	sp, #8
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40020c00 	.word	0x40020c00

080004dc <led_off>:

// Turn off LED
void led_off(led l) {
 80004dc:	b082      	sub	sp, #8
 80004de:	4603      	mov	r3, r0
 80004e0:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIOD->ODR &= ~(1U<<l);
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <led_off+0x24>)
 80004e6:	695a      	ldr	r2, [r3, #20]
 80004e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80004ec:	2101      	movs	r1, #1
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	43db      	mvns	r3, r3
 80004f4:	4902      	ldr	r1, [pc, #8]	; (8000500 <led_off+0x24>)
 80004f6:	4013      	ands	r3, r2
 80004f8:	614b      	str	r3, [r1, #20]
}
 80004fa:	bf00      	nop
 80004fc:	b002      	add	sp, #8
 80004fe:	4770      	bx	lr
 8000500:	40020c00 	.word	0x40020c00

08000504 <led_init>:
}

// Setup LED GPIO
void led_init(void) {
	// Enable GPIOD clock
	RCC->AHB1ENR |= 0x00000008;
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <led_init+0x34>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <led_init+0x34>)
 800050a:	f043 0308 	orr.w	r3, r3, #8
 800050e:	6313      	str	r3, [r2, #48]	; 0x30

	// Turn on output mode
	GPIOD->MODER &= 0x00FFFFFF;
 8000510:	4b0a      	ldr	r3, [pc, #40]	; (800053c <led_init+0x38>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a09      	ldr	r2, [pc, #36]	; (800053c <led_init+0x38>)
 8000516:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800051a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= 0x55000000;
 800051c:	4b07      	ldr	r3, [pc, #28]	; (800053c <led_init+0x38>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <led_init+0x38>)
 8000522:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000526:	6013      	str	r3, [r2, #0]

	// Turn off LEDs
	GPIOD->ODR &= 0x0FFF;
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <led_init+0x38>)
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	4a03      	ldr	r2, [pc, #12]	; (800053c <led_init+0x38>)
 800052e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000532:	6153      	str	r3, [r2, #20]
}
 8000534:	bf00      	nop
 8000536:	4770      	bx	lr
 8000538:	40023800 	.word	0x40023800
 800053c:	40020c00 	.word	0x40020c00

08000540 <uart_enable>:

// Initialize UART 2
static void uart_enable(void) {
    // enable USART2 clock, bit 17 on APB1ENR
    RCC->APB1ENR |= (1 << 17);
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <uart_enable+0x4c>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	4a11      	ldr	r2, [pc, #68]	; (800058c <uart_enable+0x4c>)
 8000546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054a:	6413      	str	r3, [r2, #64]	; 0x40

    // USART2 parity control, bit 9
    // USART2->CR1 |= (0 << 9); // 0 - no parity

    // USART2 RX enable, RE bit 2
    USART2->CR1 |= (1 << 2);
 800054c:	4b10      	ldr	r3, [pc, #64]	; (8000590 <uart_enable+0x50>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	4a0f      	ldr	r2, [pc, #60]	; (8000590 <uart_enable+0x50>)
 8000552:	f043 0304 	orr.w	r3, r3, #4
 8000556:	60d3      	str	r3, [r2, #12]
    // USART2 TX enable, TE bit 3
    USART2->CR1 |= (1 << 3);
 8000558:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <uart_enable+0x50>)
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	4a0c      	ldr	r2, [pc, #48]	; (8000590 <uart_enable+0x50>)
 800055e:	f043 0308 	orr.w	r3, r3, #8
 8000562:	60d3      	str	r3, [r2, #12]

    // Enable usart2 - UE, bit 13
    USART2->CR1 |= (1 << 13);
 8000564:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <uart_enable+0x50>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	4a09      	ldr	r2, [pc, #36]	; (8000590 <uart_enable+0x50>)
 800056a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800056e:	60d3      	str	r3, [r2, #12]
	// For STM32F411: fCK = 25 Mhz (Sysclk/4), Baudrate = 115200, OVER8 = 0
	// USARTDIV = fCK / baud / 8 * (2-OVER8)
	// USARTDIV = 25Mhz / 115200 / 16 = 13.5633
	// Fraction: 0.5633*16 = 9
	// Mantissa: 13
    USART2->BRR |= (13 << 4); // Mantissa
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <uart_enable+0x50>)
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	4a06      	ldr	r2, [pc, #24]	; (8000590 <uart_enable+0x50>)
 8000576:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800057a:	6093      	str	r3, [r2, #8]
    USART2->BRR |= 9; // Fraction
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <uart_enable+0x50>)
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	4a03      	ldr	r2, [pc, #12]	; (8000590 <uart_enable+0x50>)
 8000582:	f043 0309 	orr.w	r3, r3, #9
 8000586:	6093      	str	r3, [r2, #8]
}	
 8000588:	bf00      	nop
 800058a:	4770      	bx	lr
 800058c:	40023800 	.word	0x40023800
 8000590:	40004400 	.word	0x40004400

08000594 <uart_init>:

void uart_init(void)
{
 8000594:	b508      	push	{r3, lr}
    /* set system clock to 100 Mhz */
    set_sysclk_to_100();
 8000596:	f000 f835 	bl	8000604 <set_sysclk_to_100>

	uart_pin_setup();
 800059a:	f7ff ff61 	bl	8000460 <uart_pin_setup>
	uart_enable();
 800059e:	f7ff ffcf 	bl	8000540 <uart_enable>
}
 80005a2:	bf00      	nop
 80005a4:	bd08      	pop	{r3, pc}
	...

080005a8 <SystemInit>:
*************************************************/
void SystemInit(void)
{
	/* FPU settings, can be enabled from project makefile */
	#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005a8:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <SystemInit+0x50>)
 80005aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <SystemInit+0x50>)
 80005b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	#endif

	/* Reset the RCC clock configuration to the default reset state */
	/* Set HSION bit */
	RCC->CR |= (1U << 0);
 80005b8:	4b10      	ldr	r3, [pc, #64]	; (80005fc <SystemInit+0x54>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a0f      	ldr	r2, [pc, #60]	; (80005fc <SystemInit+0x54>)
 80005be:	f043 0301 	orr.w	r3, r3, #1
 80005c2:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80005c4:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <SystemInit+0x54>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]

	/* Reset HSEON (16), CSSON (19) and PLLON (24) bits */
	RCC->CR &= ~((1U << 16) | (1U << 19) | (1U << 24));
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <SystemInit+0x54>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <SystemInit+0x54>)
 80005d0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005d8:	6013      	str	r3, [r2, #0]

	/* Reset PLLCFGR register to reset value */
	RCC->PLLCFGR = 0x24003010UL;
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <SystemInit+0x54>)
 80005dc:	4a08      	ldr	r2, [pc, #32]	; (8000600 <SystemInit+0x58>)
 80005de:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= ~(1U << 18);
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <SystemInit+0x54>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a05      	ldr	r2, [pc, #20]	; (80005fc <SystemInit+0x54>)
 80005e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005ea:	6013      	str	r3, [r2, #0]

	/* Disable all clock interrupts */
	RCC->CIR = 0x00000000UL;
 80005ec:	4b03      	ldr	r3, [pc, #12]	; (80005fc <SystemInit+0x54>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
}
 80005f2:	bf00      	nop
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	e000ed00 	.word	0xe000ed00
 80005fc:	40023800 	.word	0x40023800
 8000600:	24003010 	.word	0x24003010

08000604 <set_sysclk_to_100>:
* this is only tested on stm32f4 discovery board
*************************************************/
void set_sysclk_to_100(void)
{
	/* Enable HSE (CR: bit 16) */
	RCC->CR |= (1U << 16);
 8000604:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <set_sysclk_to_100+0xac>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a29      	ldr	r2, [pc, #164]	; (80006b0 <set_sysclk_to_100+0xac>)
 800060a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800060e:	6013      	str	r3, [r2, #0]
	/* Wait till HSE is ready (CR: bit 17) */
	while(!(RCC->CR & (1 << 17)));
 8000610:	bf00      	nop
 8000612:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <set_sysclk_to_100+0xac>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0f9      	beq.n	8000612 <set_sysclk_to_100+0xe>

	/* Enable power interface clock (APB1ENR:bit 28) */
	RCC->APB1ENR |= (1 << 28);
 800061e:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <set_sysclk_to_100+0xac>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000622:	4a23      	ldr	r2, [pc, #140]	; (80006b0 <set_sysclk_to_100+0xac>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	6413      	str	r3, [r2, #64]	; 0x40

	/* set voltage scale to 1 for max frequency (PWR_CR:bit 14)
	 * (0b0) scale 2 for fCLK <= 144 Mhz
	 * (0b1) scale 1 for 144 Mhz < fCLK <= 168 Mhz
	 */
	PWR->CR |= (1 << 14);
 800062a:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <set_sysclk_to_100+0xb0>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <set_sysclk_to_100+0xb0>)
 8000630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000634:	6013      	str	r3, [r2, #0]

	/* set AHB prescaler to /1 (CFGR:bits 7:4) */
	RCC->CFGR |= (0 << 4);
 8000636:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <set_sysclk_to_100+0xac>)
 8000638:	4a1d      	ldr	r2, [pc, #116]	; (80006b0 <set_sysclk_to_100+0xac>)
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	6093      	str	r3, [r2, #8]
	/* set APB low speed prescaler to /4 (APB1) (CFGR:bits 12:10) */
	RCC->CFGR |= (5 << 10);
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <set_sysclk_to_100+0xac>)
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	4a1b      	ldr	r2, [pc, #108]	; (80006b0 <set_sysclk_to_100+0xac>)
 8000644:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000648:	6093      	str	r3, [r2, #8]
	/* set APB high speed prescaler to /2 (APB2) (CFGR:bits 15:13) */
	RCC->CFGR |= (4 << 13);
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <set_sysclk_to_100+0xac>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	4a18      	ldr	r2, [pc, #96]	; (80006b0 <set_sysclk_to_100+0xac>)
 8000650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000654:	6093      	str	r3, [r2, #8]

	/* Set M, N, P and Q PLL dividers
	 * PLLCFGR: bits 5:0 (M), 14:6 (N), 17:16 (P), 27:24 (Q)
	 * Set PLL source to HSE, PLLCFGR: bit 22, 1:HSE, 0:HSI
	 */
	RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <set_sysclk_to_100+0xac>)
 8000658:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <set_sysclk_to_100+0xb4>)
 800065a:	605a      	str	r2, [r3, #4]
	               (PLL_Q << 24) | (1 << 22);
	/* Enable the main PLL (CR: bit 24) */
	RCC->CR |= (1 << 24);
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <set_sysclk_to_100+0xac>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <set_sysclk_to_100+0xac>)
 8000662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000666:	6013      	str	r3, [r2, #0]
	/* Wait till the main PLL is ready (CR: bit 25) */
	while(!(RCC->CR & (1 << 25)));
 8000668:	bf00      	nop
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <set_sysclk_to_100+0xac>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000672:	2b00      	cmp	r3, #0
 8000674:	d0f9      	beq.n	800066a <set_sysclk_to_100+0x66>
	 * instruction cache enable (ACR:bit 9)
	 * data cache enable (ACR:bit 10)
	 * set latency to 5 wait states (ARC:bits 2:0)
	 *   see Table 10 on page 80 in RM0090
	 */
	FLASH->ACR = (1 << 8) | (1 << 9) | (1 << 10 ) | (5 << 0);
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <set_sysclk_to_100+0xb8>)
 8000678:	f240 7205 	movw	r2, #1797	; 0x705
 800067c:	601a      	str	r2, [r3, #0]
	/* Select the main PLL as system clock source, (CFGR:bits 1:0)
	 * 0b00 - HSI
	 * 0b01 - HSE
	 * 0b10 - PLL
	 */
	RCC->CFGR &= ~(3U << 0);
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <set_sysclk_to_100+0xac>)
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <set_sysclk_to_100+0xac>)
 8000684:	f023 0303 	bic.w	r3, r3, #3
 8000688:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (2 << 0);
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <set_sysclk_to_100+0xac>)
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	4a08      	ldr	r2, [pc, #32]	; (80006b0 <set_sysclk_to_100+0xac>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	6093      	str	r3, [r2, #8]
	/* Wait till the main PLL is used as system clock source (CFGR:bits 3:2) */
	while (!(RCC->CFGR & (2U << 2)));
 8000696:	bf00      	nop
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <set_sysclk_to_100+0xac>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f003 0308 	and.w	r3, r3, #8
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d0f9      	beq.n	8000698 <set_sysclk_to_100+0x94>

	// update SystemCoreClock variable
	SystemCoreClock = 100000000;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <set_sysclk_to_100+0xbc>)
 80006a6:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <set_sysclk_to_100+0xc0>)
 80006a8:	601a      	str	r2, [r3, #0]
}
 80006aa:	bf00      	nop
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000
 80006b8:	08416008 	.word	0x08416008
 80006bc:	40023c00 	.word	0x40023c00
 80006c0:	20000000 	.word	0x20000000
 80006c4:	05f5e100 	.word	0x05f5e100

080006c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80006c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000700 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80006ce:	490e      	ldr	r1, [pc, #56]	; (8000708 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80006d0:	4a0e      	ldr	r2, [pc, #56]	; (800070c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d4:	e002      	b.n	80006dc <LoopCopyDataInit>

080006d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006da:	3304      	adds	r3, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e0:	d3f9      	bcc.n	80006d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e2:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80006e4:	4c0b      	ldr	r4, [pc, #44]	; (8000714 <LoopFillZerobss+0x26>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e8:	e001      	b.n	80006ee <LoopFillZerobss>

080006ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ec:	3204      	adds	r2, #4

080006ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f0:	d3fb      	bcc.n	80006ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80006f2:	f7ff ff59 	bl	80005a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006f6:	f000 f811 	bl	800071c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006fa:	f7ff fde3 	bl	80002c4 <main>
  bx  lr    
 80006fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000700:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800070c:	080010e8 	.word	0x080010e8
  ldr r2, =_sbss
 8000710:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000714:	20001098 	.word	0x20001098

08000718 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC_IRQHandler>
	...

0800071c <__libc_init_array>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	4d0d      	ldr	r5, [pc, #52]	; (8000754 <__libc_init_array+0x38>)
 8000720:	4c0d      	ldr	r4, [pc, #52]	; (8000758 <__libc_init_array+0x3c>)
 8000722:	1b64      	subs	r4, r4, r5
 8000724:	10a4      	asrs	r4, r4, #2
 8000726:	2600      	movs	r6, #0
 8000728:	42a6      	cmp	r6, r4
 800072a:	d109      	bne.n	8000740 <__libc_init_array+0x24>
 800072c:	4d0b      	ldr	r5, [pc, #44]	; (800075c <__libc_init_array+0x40>)
 800072e:	4c0c      	ldr	r4, [pc, #48]	; (8000760 <__libc_init_array+0x44>)
 8000730:	f000 fc94 	bl	800105c <_init>
 8000734:	1b64      	subs	r4, r4, r5
 8000736:	10a4      	asrs	r4, r4, #2
 8000738:	2600      	movs	r6, #0
 800073a:	42a6      	cmp	r6, r4
 800073c:	d105      	bne.n	800074a <__libc_init_array+0x2e>
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f855 3b04 	ldr.w	r3, [r5], #4
 8000744:	4798      	blx	r3
 8000746:	3601      	adds	r6, #1
 8000748:	e7ee      	b.n	8000728 <__libc_init_array+0xc>
 800074a:	f855 3b04 	ldr.w	r3, [r5], #4
 800074e:	4798      	blx	r3
 8000750:	3601      	adds	r6, #1
 8000752:	e7f2      	b.n	800073a <__libc_init_array+0x1e>
 8000754:	080010e0 	.word	0x080010e0
 8000758:	080010e0 	.word	0x080010e0
 800075c:	080010e0 	.word	0x080010e0
 8000760:	080010e4 	.word	0x080010e4

08000764 <memset>:
 8000764:	4402      	add	r2, r0
 8000766:	4603      	mov	r3, r0
 8000768:	4293      	cmp	r3, r2
 800076a:	d100      	bne.n	800076e <memset+0xa>
 800076c:	4770      	bx	lr
 800076e:	f803 1b01 	strb.w	r1, [r3], #1
 8000772:	e7f9      	b.n	8000768 <memset+0x4>

08000774 <siprintf>:
 8000774:	b40e      	push	{r1, r2, r3}
 8000776:	b500      	push	{lr}
 8000778:	b09c      	sub	sp, #112	; 0x70
 800077a:	ab1d      	add	r3, sp, #116	; 0x74
 800077c:	9002      	str	r0, [sp, #8]
 800077e:	9006      	str	r0, [sp, #24]
 8000780:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000784:	4809      	ldr	r0, [pc, #36]	; (80007ac <siprintf+0x38>)
 8000786:	9107      	str	r1, [sp, #28]
 8000788:	9104      	str	r1, [sp, #16]
 800078a:	4909      	ldr	r1, [pc, #36]	; (80007b0 <siprintf+0x3c>)
 800078c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000790:	9105      	str	r1, [sp, #20]
 8000792:	6800      	ldr	r0, [r0, #0]
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	a902      	add	r1, sp, #8
 8000798:	f000 f868 	bl	800086c <_svfiprintf_r>
 800079c:	9b02      	ldr	r3, [sp, #8]
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
 80007a2:	b01c      	add	sp, #112	; 0x70
 80007a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80007a8:	b003      	add	sp, #12
 80007aa:	4770      	bx	lr
 80007ac:	20000004 	.word	0x20000004
 80007b0:	ffff0208 	.word	0xffff0208

080007b4 <__retarget_lock_acquire_recursive>:
 80007b4:	4770      	bx	lr

080007b6 <__retarget_lock_release_recursive>:
 80007b6:	4770      	bx	lr

080007b8 <__ssputs_r>:
 80007b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007bc:	688e      	ldr	r6, [r1, #8]
 80007be:	461f      	mov	r7, r3
 80007c0:	42be      	cmp	r6, r7
 80007c2:	680b      	ldr	r3, [r1, #0]
 80007c4:	4682      	mov	sl, r0
 80007c6:	460c      	mov	r4, r1
 80007c8:	4690      	mov	r8, r2
 80007ca:	d82c      	bhi.n	8000826 <__ssputs_r+0x6e>
 80007cc:	898a      	ldrh	r2, [r1, #12]
 80007ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80007d2:	d026      	beq.n	8000822 <__ssputs_r+0x6a>
 80007d4:	6965      	ldr	r5, [r4, #20]
 80007d6:	6909      	ldr	r1, [r1, #16]
 80007d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80007dc:	eba3 0901 	sub.w	r9, r3, r1
 80007e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80007e4:	1c7b      	adds	r3, r7, #1
 80007e6:	444b      	add	r3, r9
 80007e8:	106d      	asrs	r5, r5, #1
 80007ea:	429d      	cmp	r5, r3
 80007ec:	bf38      	it	cc
 80007ee:	461d      	movcc	r5, r3
 80007f0:	0553      	lsls	r3, r2, #21
 80007f2:	d527      	bpl.n	8000844 <__ssputs_r+0x8c>
 80007f4:	4629      	mov	r1, r5
 80007f6:	f000 fb5b 	bl	8000eb0 <_malloc_r>
 80007fa:	4606      	mov	r6, r0
 80007fc:	b360      	cbz	r0, 8000858 <__ssputs_r+0xa0>
 80007fe:	6921      	ldr	r1, [r4, #16]
 8000800:	464a      	mov	r2, r9
 8000802:	f000 fac1 	bl	8000d88 <memcpy>
 8000806:	89a3      	ldrh	r3, [r4, #12]
 8000808:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	81a3      	strh	r3, [r4, #12]
 8000812:	6126      	str	r6, [r4, #16]
 8000814:	6165      	str	r5, [r4, #20]
 8000816:	444e      	add	r6, r9
 8000818:	eba5 0509 	sub.w	r5, r5, r9
 800081c:	6026      	str	r6, [r4, #0]
 800081e:	60a5      	str	r5, [r4, #8]
 8000820:	463e      	mov	r6, r7
 8000822:	42be      	cmp	r6, r7
 8000824:	d900      	bls.n	8000828 <__ssputs_r+0x70>
 8000826:	463e      	mov	r6, r7
 8000828:	6820      	ldr	r0, [r4, #0]
 800082a:	4632      	mov	r2, r6
 800082c:	4641      	mov	r1, r8
 800082e:	f000 fab9 	bl	8000da4 <memmove>
 8000832:	68a3      	ldr	r3, [r4, #8]
 8000834:	1b9b      	subs	r3, r3, r6
 8000836:	60a3      	str	r3, [r4, #8]
 8000838:	6823      	ldr	r3, [r4, #0]
 800083a:	4433      	add	r3, r6
 800083c:	6023      	str	r3, [r4, #0]
 800083e:	2000      	movs	r0, #0
 8000840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000844:	462a      	mov	r2, r5
 8000846:	f000 fba7 	bl	8000f98 <_realloc_r>
 800084a:	4606      	mov	r6, r0
 800084c:	2800      	cmp	r0, #0
 800084e:	d1e0      	bne.n	8000812 <__ssputs_r+0x5a>
 8000850:	6921      	ldr	r1, [r4, #16]
 8000852:	4650      	mov	r0, sl
 8000854:	f000 fac0 	bl	8000dd8 <_free_r>
 8000858:	230c      	movs	r3, #12
 800085a:	f8ca 3000 	str.w	r3, [sl]
 800085e:	89a3      	ldrh	r3, [r4, #12]
 8000860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000864:	81a3      	strh	r3, [r4, #12]
 8000866:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800086a:	e7e9      	b.n	8000840 <__ssputs_r+0x88>

0800086c <_svfiprintf_r>:
 800086c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000870:	4698      	mov	r8, r3
 8000872:	898b      	ldrh	r3, [r1, #12]
 8000874:	061b      	lsls	r3, r3, #24
 8000876:	b09d      	sub	sp, #116	; 0x74
 8000878:	4607      	mov	r7, r0
 800087a:	460d      	mov	r5, r1
 800087c:	4614      	mov	r4, r2
 800087e:	d50e      	bpl.n	800089e <_svfiprintf_r+0x32>
 8000880:	690b      	ldr	r3, [r1, #16]
 8000882:	b963      	cbnz	r3, 800089e <_svfiprintf_r+0x32>
 8000884:	2140      	movs	r1, #64	; 0x40
 8000886:	f000 fb13 	bl	8000eb0 <_malloc_r>
 800088a:	6028      	str	r0, [r5, #0]
 800088c:	6128      	str	r0, [r5, #16]
 800088e:	b920      	cbnz	r0, 800089a <_svfiprintf_r+0x2e>
 8000890:	230c      	movs	r3, #12
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000898:	e0d0      	b.n	8000a3c <_svfiprintf_r+0x1d0>
 800089a:	2340      	movs	r3, #64	; 0x40
 800089c:	616b      	str	r3, [r5, #20]
 800089e:	2300      	movs	r3, #0
 80008a0:	9309      	str	r3, [sp, #36]	; 0x24
 80008a2:	2320      	movs	r3, #32
 80008a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80008a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80008ac:	2330      	movs	r3, #48	; 0x30
 80008ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000a54 <_svfiprintf_r+0x1e8>
 80008b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80008b6:	f04f 0901 	mov.w	r9, #1
 80008ba:	4623      	mov	r3, r4
 80008bc:	469a      	mov	sl, r3
 80008be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80008c2:	b10a      	cbz	r2, 80008c8 <_svfiprintf_r+0x5c>
 80008c4:	2a25      	cmp	r2, #37	; 0x25
 80008c6:	d1f9      	bne.n	80008bc <_svfiprintf_r+0x50>
 80008c8:	ebba 0b04 	subs.w	fp, sl, r4
 80008cc:	d00b      	beq.n	80008e6 <_svfiprintf_r+0x7a>
 80008ce:	465b      	mov	r3, fp
 80008d0:	4622      	mov	r2, r4
 80008d2:	4629      	mov	r1, r5
 80008d4:	4638      	mov	r0, r7
 80008d6:	f7ff ff6f 	bl	80007b8 <__ssputs_r>
 80008da:	3001      	adds	r0, #1
 80008dc:	f000 80a9 	beq.w	8000a32 <_svfiprintf_r+0x1c6>
 80008e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80008e2:	445a      	add	r2, fp
 80008e4:	9209      	str	r2, [sp, #36]	; 0x24
 80008e6:	f89a 3000 	ldrb.w	r3, [sl]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	f000 80a1 	beq.w	8000a32 <_svfiprintf_r+0x1c6>
 80008f0:	2300      	movs	r3, #0
 80008f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80008fa:	f10a 0a01 	add.w	sl, sl, #1
 80008fe:	9304      	str	r3, [sp, #16]
 8000900:	9307      	str	r3, [sp, #28]
 8000902:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000906:	931a      	str	r3, [sp, #104]	; 0x68
 8000908:	4654      	mov	r4, sl
 800090a:	2205      	movs	r2, #5
 800090c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000910:	4850      	ldr	r0, [pc, #320]	; (8000a54 <_svfiprintf_r+0x1e8>)
 8000912:	f7ff fc4d 	bl	80001b0 <memchr>
 8000916:	9a04      	ldr	r2, [sp, #16]
 8000918:	b9d8      	cbnz	r0, 8000952 <_svfiprintf_r+0xe6>
 800091a:	06d0      	lsls	r0, r2, #27
 800091c:	bf44      	itt	mi
 800091e:	2320      	movmi	r3, #32
 8000920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000924:	0711      	lsls	r1, r2, #28
 8000926:	bf44      	itt	mi
 8000928:	232b      	movmi	r3, #43	; 0x2b
 800092a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800092e:	f89a 3000 	ldrb.w	r3, [sl]
 8000932:	2b2a      	cmp	r3, #42	; 0x2a
 8000934:	d015      	beq.n	8000962 <_svfiprintf_r+0xf6>
 8000936:	9a07      	ldr	r2, [sp, #28]
 8000938:	4654      	mov	r4, sl
 800093a:	2000      	movs	r0, #0
 800093c:	f04f 0c0a 	mov.w	ip, #10
 8000940:	4621      	mov	r1, r4
 8000942:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000946:	3b30      	subs	r3, #48	; 0x30
 8000948:	2b09      	cmp	r3, #9
 800094a:	d94d      	bls.n	80009e8 <_svfiprintf_r+0x17c>
 800094c:	b1b0      	cbz	r0, 800097c <_svfiprintf_r+0x110>
 800094e:	9207      	str	r2, [sp, #28]
 8000950:	e014      	b.n	800097c <_svfiprintf_r+0x110>
 8000952:	eba0 0308 	sub.w	r3, r0, r8
 8000956:	fa09 f303 	lsl.w	r3, r9, r3
 800095a:	4313      	orrs	r3, r2
 800095c:	9304      	str	r3, [sp, #16]
 800095e:	46a2      	mov	sl, r4
 8000960:	e7d2      	b.n	8000908 <_svfiprintf_r+0x9c>
 8000962:	9b03      	ldr	r3, [sp, #12]
 8000964:	1d19      	adds	r1, r3, #4
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	9103      	str	r1, [sp, #12]
 800096a:	2b00      	cmp	r3, #0
 800096c:	bfbb      	ittet	lt
 800096e:	425b      	neglt	r3, r3
 8000970:	f042 0202 	orrlt.w	r2, r2, #2
 8000974:	9307      	strge	r3, [sp, #28]
 8000976:	9307      	strlt	r3, [sp, #28]
 8000978:	bfb8      	it	lt
 800097a:	9204      	strlt	r2, [sp, #16]
 800097c:	7823      	ldrb	r3, [r4, #0]
 800097e:	2b2e      	cmp	r3, #46	; 0x2e
 8000980:	d10c      	bne.n	800099c <_svfiprintf_r+0x130>
 8000982:	7863      	ldrb	r3, [r4, #1]
 8000984:	2b2a      	cmp	r3, #42	; 0x2a
 8000986:	d134      	bne.n	80009f2 <_svfiprintf_r+0x186>
 8000988:	9b03      	ldr	r3, [sp, #12]
 800098a:	1d1a      	adds	r2, r3, #4
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	9203      	str	r2, [sp, #12]
 8000990:	2b00      	cmp	r3, #0
 8000992:	bfb8      	it	lt
 8000994:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000998:	3402      	adds	r4, #2
 800099a:	9305      	str	r3, [sp, #20]
 800099c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8000a64 <_svfiprintf_r+0x1f8>
 80009a0:	7821      	ldrb	r1, [r4, #0]
 80009a2:	2203      	movs	r2, #3
 80009a4:	4650      	mov	r0, sl
 80009a6:	f7ff fc03 	bl	80001b0 <memchr>
 80009aa:	b138      	cbz	r0, 80009bc <_svfiprintf_r+0x150>
 80009ac:	9b04      	ldr	r3, [sp, #16]
 80009ae:	eba0 000a 	sub.w	r0, r0, sl
 80009b2:	2240      	movs	r2, #64	; 0x40
 80009b4:	4082      	lsls	r2, r0
 80009b6:	4313      	orrs	r3, r2
 80009b8:	3401      	adds	r4, #1
 80009ba:	9304      	str	r3, [sp, #16]
 80009bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009c0:	4825      	ldr	r0, [pc, #148]	; (8000a58 <_svfiprintf_r+0x1ec>)
 80009c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80009c6:	2206      	movs	r2, #6
 80009c8:	f7ff fbf2 	bl	80001b0 <memchr>
 80009cc:	2800      	cmp	r0, #0
 80009ce:	d038      	beq.n	8000a42 <_svfiprintf_r+0x1d6>
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <_svfiprintf_r+0x1f0>)
 80009d2:	bb1b      	cbnz	r3, 8000a1c <_svfiprintf_r+0x1b0>
 80009d4:	9b03      	ldr	r3, [sp, #12]
 80009d6:	3307      	adds	r3, #7
 80009d8:	f023 0307 	bic.w	r3, r3, #7
 80009dc:	3308      	adds	r3, #8
 80009de:	9303      	str	r3, [sp, #12]
 80009e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80009e2:	4433      	add	r3, r6
 80009e4:	9309      	str	r3, [sp, #36]	; 0x24
 80009e6:	e768      	b.n	80008ba <_svfiprintf_r+0x4e>
 80009e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80009ec:	460c      	mov	r4, r1
 80009ee:	2001      	movs	r0, #1
 80009f0:	e7a6      	b.n	8000940 <_svfiprintf_r+0xd4>
 80009f2:	2300      	movs	r3, #0
 80009f4:	3401      	adds	r4, #1
 80009f6:	9305      	str	r3, [sp, #20]
 80009f8:	4619      	mov	r1, r3
 80009fa:	f04f 0c0a 	mov.w	ip, #10
 80009fe:	4620      	mov	r0, r4
 8000a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000a04:	3a30      	subs	r2, #48	; 0x30
 8000a06:	2a09      	cmp	r2, #9
 8000a08:	d903      	bls.n	8000a12 <_svfiprintf_r+0x1a6>
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0c6      	beq.n	800099c <_svfiprintf_r+0x130>
 8000a0e:	9105      	str	r1, [sp, #20]
 8000a10:	e7c4      	b.n	800099c <_svfiprintf_r+0x130>
 8000a12:	fb0c 2101 	mla	r1, ip, r1, r2
 8000a16:	4604      	mov	r4, r0
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e7f0      	b.n	80009fe <_svfiprintf_r+0x192>
 8000a1c:	ab03      	add	r3, sp, #12
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	462a      	mov	r2, r5
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <_svfiprintf_r+0x1f4>)
 8000a24:	a904      	add	r1, sp, #16
 8000a26:	4638      	mov	r0, r7
 8000a28:	f3af 8000 	nop.w
 8000a2c:	1c42      	adds	r2, r0, #1
 8000a2e:	4606      	mov	r6, r0
 8000a30:	d1d6      	bne.n	80009e0 <_svfiprintf_r+0x174>
 8000a32:	89ab      	ldrh	r3, [r5, #12]
 8000a34:	065b      	lsls	r3, r3, #25
 8000a36:	f53f af2d 	bmi.w	8000894 <_svfiprintf_r+0x28>
 8000a3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000a3c:	b01d      	add	sp, #116	; 0x74
 8000a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a42:	ab03      	add	r3, sp, #12
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	462a      	mov	r2, r5
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <_svfiprintf_r+0x1f4>)
 8000a4a:	a904      	add	r1, sp, #16
 8000a4c:	4638      	mov	r0, r7
 8000a4e:	f000 f879 	bl	8000b44 <_printf_i>
 8000a52:	e7eb      	b.n	8000a2c <_svfiprintf_r+0x1c0>
 8000a54:	080010ad 	.word	0x080010ad
 8000a58:	080010b7 	.word	0x080010b7
 8000a5c:	00000000 	.word	0x00000000
 8000a60:	080007b9 	.word	0x080007b9
 8000a64:	080010b3 	.word	0x080010b3

08000a68 <_printf_common>:
 8000a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a6c:	4616      	mov	r6, r2
 8000a6e:	4699      	mov	r9, r3
 8000a70:	688a      	ldr	r2, [r1, #8]
 8000a72:	690b      	ldr	r3, [r1, #16]
 8000a74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	bfb8      	it	lt
 8000a7c:	4613      	movlt	r3, r2
 8000a7e:	6033      	str	r3, [r6, #0]
 8000a80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000a84:	4607      	mov	r7, r0
 8000a86:	460c      	mov	r4, r1
 8000a88:	b10a      	cbz	r2, 8000a8e <_printf_common+0x26>
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	6033      	str	r3, [r6, #0]
 8000a8e:	6823      	ldr	r3, [r4, #0]
 8000a90:	0699      	lsls	r1, r3, #26
 8000a92:	bf42      	ittt	mi
 8000a94:	6833      	ldrmi	r3, [r6, #0]
 8000a96:	3302      	addmi	r3, #2
 8000a98:	6033      	strmi	r3, [r6, #0]
 8000a9a:	6825      	ldr	r5, [r4, #0]
 8000a9c:	f015 0506 	ands.w	r5, r5, #6
 8000aa0:	d106      	bne.n	8000ab0 <_printf_common+0x48>
 8000aa2:	f104 0a19 	add.w	sl, r4, #25
 8000aa6:	68e3      	ldr	r3, [r4, #12]
 8000aa8:	6832      	ldr	r2, [r6, #0]
 8000aaa:	1a9b      	subs	r3, r3, r2
 8000aac:	42ab      	cmp	r3, r5
 8000aae:	dc26      	bgt.n	8000afe <_printf_common+0x96>
 8000ab0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000ab4:	1e13      	subs	r3, r2, #0
 8000ab6:	6822      	ldr	r2, [r4, #0]
 8000ab8:	bf18      	it	ne
 8000aba:	2301      	movne	r3, #1
 8000abc:	0692      	lsls	r2, r2, #26
 8000abe:	d42b      	bmi.n	8000b18 <_printf_common+0xb0>
 8000ac0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ac4:	4649      	mov	r1, r9
 8000ac6:	4638      	mov	r0, r7
 8000ac8:	47c0      	blx	r8
 8000aca:	3001      	adds	r0, #1
 8000acc:	d01e      	beq.n	8000b0c <_printf_common+0xa4>
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	6922      	ldr	r2, [r4, #16]
 8000ad2:	f003 0306 	and.w	r3, r3, #6
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	bf02      	ittt	eq
 8000ada:	68e5      	ldreq	r5, [r4, #12]
 8000adc:	6833      	ldreq	r3, [r6, #0]
 8000ade:	1aed      	subeq	r5, r5, r3
 8000ae0:	68a3      	ldr	r3, [r4, #8]
 8000ae2:	bf0c      	ite	eq
 8000ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ae8:	2500      	movne	r5, #0
 8000aea:	4293      	cmp	r3, r2
 8000aec:	bfc4      	itt	gt
 8000aee:	1a9b      	subgt	r3, r3, r2
 8000af0:	18ed      	addgt	r5, r5, r3
 8000af2:	2600      	movs	r6, #0
 8000af4:	341a      	adds	r4, #26
 8000af6:	42b5      	cmp	r5, r6
 8000af8:	d11a      	bne.n	8000b30 <_printf_common+0xc8>
 8000afa:	2000      	movs	r0, #0
 8000afc:	e008      	b.n	8000b10 <_printf_common+0xa8>
 8000afe:	2301      	movs	r3, #1
 8000b00:	4652      	mov	r2, sl
 8000b02:	4649      	mov	r1, r9
 8000b04:	4638      	mov	r0, r7
 8000b06:	47c0      	blx	r8
 8000b08:	3001      	adds	r0, #1
 8000b0a:	d103      	bne.n	8000b14 <_printf_common+0xac>
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b14:	3501      	adds	r5, #1
 8000b16:	e7c6      	b.n	8000aa6 <_printf_common+0x3e>
 8000b18:	18e1      	adds	r1, r4, r3
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	2030      	movs	r0, #48	; 0x30
 8000b1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000b22:	4422      	add	r2, r4
 8000b24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000b28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	e7c7      	b.n	8000ac0 <_printf_common+0x58>
 8000b30:	2301      	movs	r3, #1
 8000b32:	4622      	mov	r2, r4
 8000b34:	4649      	mov	r1, r9
 8000b36:	4638      	mov	r0, r7
 8000b38:	47c0      	blx	r8
 8000b3a:	3001      	adds	r0, #1
 8000b3c:	d0e6      	beq.n	8000b0c <_printf_common+0xa4>
 8000b3e:	3601      	adds	r6, #1
 8000b40:	e7d9      	b.n	8000af6 <_printf_common+0x8e>
	...

08000b44 <_printf_i>:
 8000b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	7e0f      	ldrb	r7, [r1, #24]
 8000b4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000b4c:	2f78      	cmp	r7, #120	; 0x78
 8000b4e:	4691      	mov	r9, r2
 8000b50:	4680      	mov	r8, r0
 8000b52:	460c      	mov	r4, r1
 8000b54:	469a      	mov	sl, r3
 8000b56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000b5a:	d807      	bhi.n	8000b6c <_printf_i+0x28>
 8000b5c:	2f62      	cmp	r7, #98	; 0x62
 8000b5e:	d80a      	bhi.n	8000b76 <_printf_i+0x32>
 8000b60:	2f00      	cmp	r7, #0
 8000b62:	f000 80d4 	beq.w	8000d0e <_printf_i+0x1ca>
 8000b66:	2f58      	cmp	r7, #88	; 0x58
 8000b68:	f000 80c0 	beq.w	8000cec <_printf_i+0x1a8>
 8000b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000b70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000b74:	e03a      	b.n	8000bec <_printf_i+0xa8>
 8000b76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000b7a:	2b15      	cmp	r3, #21
 8000b7c:	d8f6      	bhi.n	8000b6c <_printf_i+0x28>
 8000b7e:	a101      	add	r1, pc, #4	; (adr r1, 8000b84 <_printf_i+0x40>)
 8000b80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000b84:	08000bdd 	.word	0x08000bdd
 8000b88:	08000bf1 	.word	0x08000bf1
 8000b8c:	08000b6d 	.word	0x08000b6d
 8000b90:	08000b6d 	.word	0x08000b6d
 8000b94:	08000b6d 	.word	0x08000b6d
 8000b98:	08000b6d 	.word	0x08000b6d
 8000b9c:	08000bf1 	.word	0x08000bf1
 8000ba0:	08000b6d 	.word	0x08000b6d
 8000ba4:	08000b6d 	.word	0x08000b6d
 8000ba8:	08000b6d 	.word	0x08000b6d
 8000bac:	08000b6d 	.word	0x08000b6d
 8000bb0:	08000cf5 	.word	0x08000cf5
 8000bb4:	08000c1d 	.word	0x08000c1d
 8000bb8:	08000caf 	.word	0x08000caf
 8000bbc:	08000b6d 	.word	0x08000b6d
 8000bc0:	08000b6d 	.word	0x08000b6d
 8000bc4:	08000d17 	.word	0x08000d17
 8000bc8:	08000b6d 	.word	0x08000b6d
 8000bcc:	08000c1d 	.word	0x08000c1d
 8000bd0:	08000b6d 	.word	0x08000b6d
 8000bd4:	08000b6d 	.word	0x08000b6d
 8000bd8:	08000cb7 	.word	0x08000cb7
 8000bdc:	682b      	ldr	r3, [r5, #0]
 8000bde:	1d1a      	adds	r2, r3, #4
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	602a      	str	r2, [r5, #0]
 8000be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000be8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000bec:	2301      	movs	r3, #1
 8000bee:	e09f      	b.n	8000d30 <_printf_i+0x1ec>
 8000bf0:	6820      	ldr	r0, [r4, #0]
 8000bf2:	682b      	ldr	r3, [r5, #0]
 8000bf4:	0607      	lsls	r7, r0, #24
 8000bf6:	f103 0104 	add.w	r1, r3, #4
 8000bfa:	6029      	str	r1, [r5, #0]
 8000bfc:	d501      	bpl.n	8000c02 <_printf_i+0xbe>
 8000bfe:	681e      	ldr	r6, [r3, #0]
 8000c00:	e003      	b.n	8000c0a <_printf_i+0xc6>
 8000c02:	0646      	lsls	r6, r0, #25
 8000c04:	d5fb      	bpl.n	8000bfe <_printf_i+0xba>
 8000c06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	da03      	bge.n	8000c16 <_printf_i+0xd2>
 8000c0e:	232d      	movs	r3, #45	; 0x2d
 8000c10:	4276      	negs	r6, r6
 8000c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000c16:	485a      	ldr	r0, [pc, #360]	; (8000d80 <_printf_i+0x23c>)
 8000c18:	230a      	movs	r3, #10
 8000c1a:	e012      	b.n	8000c42 <_printf_i+0xfe>
 8000c1c:	682b      	ldr	r3, [r5, #0]
 8000c1e:	6820      	ldr	r0, [r4, #0]
 8000c20:	1d19      	adds	r1, r3, #4
 8000c22:	6029      	str	r1, [r5, #0]
 8000c24:	0605      	lsls	r5, r0, #24
 8000c26:	d501      	bpl.n	8000c2c <_printf_i+0xe8>
 8000c28:	681e      	ldr	r6, [r3, #0]
 8000c2a:	e002      	b.n	8000c32 <_printf_i+0xee>
 8000c2c:	0641      	lsls	r1, r0, #25
 8000c2e:	d5fb      	bpl.n	8000c28 <_printf_i+0xe4>
 8000c30:	881e      	ldrh	r6, [r3, #0]
 8000c32:	4853      	ldr	r0, [pc, #332]	; (8000d80 <_printf_i+0x23c>)
 8000c34:	2f6f      	cmp	r7, #111	; 0x6f
 8000c36:	bf0c      	ite	eq
 8000c38:	2308      	moveq	r3, #8
 8000c3a:	230a      	movne	r3, #10
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000c42:	6865      	ldr	r5, [r4, #4]
 8000c44:	60a5      	str	r5, [r4, #8]
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	bfa2      	ittt	ge
 8000c4a:	6821      	ldrge	r1, [r4, #0]
 8000c4c:	f021 0104 	bicge.w	r1, r1, #4
 8000c50:	6021      	strge	r1, [r4, #0]
 8000c52:	b90e      	cbnz	r6, 8000c58 <_printf_i+0x114>
 8000c54:	2d00      	cmp	r5, #0
 8000c56:	d04b      	beq.n	8000cf0 <_printf_i+0x1ac>
 8000c58:	4615      	mov	r5, r2
 8000c5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8000c5e:	fb03 6711 	mls	r7, r3, r1, r6
 8000c62:	5dc7      	ldrb	r7, [r0, r7]
 8000c64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000c68:	4637      	mov	r7, r6
 8000c6a:	42bb      	cmp	r3, r7
 8000c6c:	460e      	mov	r6, r1
 8000c6e:	d9f4      	bls.n	8000c5a <_printf_i+0x116>
 8000c70:	2b08      	cmp	r3, #8
 8000c72:	d10b      	bne.n	8000c8c <_printf_i+0x148>
 8000c74:	6823      	ldr	r3, [r4, #0]
 8000c76:	07de      	lsls	r6, r3, #31
 8000c78:	d508      	bpl.n	8000c8c <_printf_i+0x148>
 8000c7a:	6923      	ldr	r3, [r4, #16]
 8000c7c:	6861      	ldr	r1, [r4, #4]
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	bfde      	ittt	le
 8000c82:	2330      	movle	r3, #48	; 0x30
 8000c84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000c88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8000c8c:	1b52      	subs	r2, r2, r5
 8000c8e:	6122      	str	r2, [r4, #16]
 8000c90:	f8cd a000 	str.w	sl, [sp]
 8000c94:	464b      	mov	r3, r9
 8000c96:	aa03      	add	r2, sp, #12
 8000c98:	4621      	mov	r1, r4
 8000c9a:	4640      	mov	r0, r8
 8000c9c:	f7ff fee4 	bl	8000a68 <_printf_common>
 8000ca0:	3001      	adds	r0, #1
 8000ca2:	d14a      	bne.n	8000d3a <_printf_i+0x1f6>
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca8:	b004      	add	sp, #16
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	6823      	ldr	r3, [r4, #0]
 8000cb0:	f043 0320 	orr.w	r3, r3, #32
 8000cb4:	6023      	str	r3, [r4, #0]
 8000cb6:	4833      	ldr	r0, [pc, #204]	; (8000d84 <_printf_i+0x240>)
 8000cb8:	2778      	movs	r7, #120	; 0x78
 8000cba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000cbe:	6823      	ldr	r3, [r4, #0]
 8000cc0:	6829      	ldr	r1, [r5, #0]
 8000cc2:	061f      	lsls	r7, r3, #24
 8000cc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8000cc8:	d402      	bmi.n	8000cd0 <_printf_i+0x18c>
 8000cca:	065f      	lsls	r7, r3, #25
 8000ccc:	bf48      	it	mi
 8000cce:	b2b6      	uxthmi	r6, r6
 8000cd0:	07df      	lsls	r7, r3, #31
 8000cd2:	bf48      	it	mi
 8000cd4:	f043 0320 	orrmi.w	r3, r3, #32
 8000cd8:	6029      	str	r1, [r5, #0]
 8000cda:	bf48      	it	mi
 8000cdc:	6023      	strmi	r3, [r4, #0]
 8000cde:	b91e      	cbnz	r6, 8000ce8 <_printf_i+0x1a4>
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	f023 0320 	bic.w	r3, r3, #32
 8000ce6:	6023      	str	r3, [r4, #0]
 8000ce8:	2310      	movs	r3, #16
 8000cea:	e7a7      	b.n	8000c3c <_printf_i+0xf8>
 8000cec:	4824      	ldr	r0, [pc, #144]	; (8000d80 <_printf_i+0x23c>)
 8000cee:	e7e4      	b.n	8000cba <_printf_i+0x176>
 8000cf0:	4615      	mov	r5, r2
 8000cf2:	e7bd      	b.n	8000c70 <_printf_i+0x12c>
 8000cf4:	682b      	ldr	r3, [r5, #0]
 8000cf6:	6826      	ldr	r6, [r4, #0]
 8000cf8:	6961      	ldr	r1, [r4, #20]
 8000cfa:	1d18      	adds	r0, r3, #4
 8000cfc:	6028      	str	r0, [r5, #0]
 8000cfe:	0635      	lsls	r5, r6, #24
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	d501      	bpl.n	8000d08 <_printf_i+0x1c4>
 8000d04:	6019      	str	r1, [r3, #0]
 8000d06:	e002      	b.n	8000d0e <_printf_i+0x1ca>
 8000d08:	0670      	lsls	r0, r6, #25
 8000d0a:	d5fb      	bpl.n	8000d04 <_printf_i+0x1c0>
 8000d0c:	8019      	strh	r1, [r3, #0]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	6123      	str	r3, [r4, #16]
 8000d12:	4615      	mov	r5, r2
 8000d14:	e7bc      	b.n	8000c90 <_printf_i+0x14c>
 8000d16:	682b      	ldr	r3, [r5, #0]
 8000d18:	1d1a      	adds	r2, r3, #4
 8000d1a:	602a      	str	r2, [r5, #0]
 8000d1c:	681d      	ldr	r5, [r3, #0]
 8000d1e:	6862      	ldr	r2, [r4, #4]
 8000d20:	2100      	movs	r1, #0
 8000d22:	4628      	mov	r0, r5
 8000d24:	f7ff fa44 	bl	80001b0 <memchr>
 8000d28:	b108      	cbz	r0, 8000d2e <_printf_i+0x1ea>
 8000d2a:	1b40      	subs	r0, r0, r5
 8000d2c:	6060      	str	r0, [r4, #4]
 8000d2e:	6863      	ldr	r3, [r4, #4]
 8000d30:	6123      	str	r3, [r4, #16]
 8000d32:	2300      	movs	r3, #0
 8000d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000d38:	e7aa      	b.n	8000c90 <_printf_i+0x14c>
 8000d3a:	6923      	ldr	r3, [r4, #16]
 8000d3c:	462a      	mov	r2, r5
 8000d3e:	4649      	mov	r1, r9
 8000d40:	4640      	mov	r0, r8
 8000d42:	47d0      	blx	sl
 8000d44:	3001      	adds	r0, #1
 8000d46:	d0ad      	beq.n	8000ca4 <_printf_i+0x160>
 8000d48:	6823      	ldr	r3, [r4, #0]
 8000d4a:	079b      	lsls	r3, r3, #30
 8000d4c:	d413      	bmi.n	8000d76 <_printf_i+0x232>
 8000d4e:	68e0      	ldr	r0, [r4, #12]
 8000d50:	9b03      	ldr	r3, [sp, #12]
 8000d52:	4298      	cmp	r0, r3
 8000d54:	bfb8      	it	lt
 8000d56:	4618      	movlt	r0, r3
 8000d58:	e7a6      	b.n	8000ca8 <_printf_i+0x164>
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	4632      	mov	r2, r6
 8000d5e:	4649      	mov	r1, r9
 8000d60:	4640      	mov	r0, r8
 8000d62:	47d0      	blx	sl
 8000d64:	3001      	adds	r0, #1
 8000d66:	d09d      	beq.n	8000ca4 <_printf_i+0x160>
 8000d68:	3501      	adds	r5, #1
 8000d6a:	68e3      	ldr	r3, [r4, #12]
 8000d6c:	9903      	ldr	r1, [sp, #12]
 8000d6e:	1a5b      	subs	r3, r3, r1
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	dcf2      	bgt.n	8000d5a <_printf_i+0x216>
 8000d74:	e7eb      	b.n	8000d4e <_printf_i+0x20a>
 8000d76:	2500      	movs	r5, #0
 8000d78:	f104 0619 	add.w	r6, r4, #25
 8000d7c:	e7f5      	b.n	8000d6a <_printf_i+0x226>
 8000d7e:	bf00      	nop
 8000d80:	080010be 	.word	0x080010be
 8000d84:	080010cf 	.word	0x080010cf

08000d88 <memcpy>:
 8000d88:	440a      	add	r2, r1
 8000d8a:	4291      	cmp	r1, r2
 8000d8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d90:	d100      	bne.n	8000d94 <memcpy+0xc>
 8000d92:	4770      	bx	lr
 8000d94:	b510      	push	{r4, lr}
 8000d96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000d9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000d9e:	4291      	cmp	r1, r2
 8000da0:	d1f9      	bne.n	8000d96 <memcpy+0xe>
 8000da2:	bd10      	pop	{r4, pc}

08000da4 <memmove>:
 8000da4:	4288      	cmp	r0, r1
 8000da6:	b510      	push	{r4, lr}
 8000da8:	eb01 0402 	add.w	r4, r1, r2
 8000dac:	d902      	bls.n	8000db4 <memmove+0x10>
 8000dae:	4284      	cmp	r4, r0
 8000db0:	4623      	mov	r3, r4
 8000db2:	d807      	bhi.n	8000dc4 <memmove+0x20>
 8000db4:	1e43      	subs	r3, r0, #1
 8000db6:	42a1      	cmp	r1, r4
 8000db8:	d008      	beq.n	8000dcc <memmove+0x28>
 8000dba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000dbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000dc2:	e7f8      	b.n	8000db6 <memmove+0x12>
 8000dc4:	4402      	add	r2, r0
 8000dc6:	4601      	mov	r1, r0
 8000dc8:	428a      	cmp	r2, r1
 8000dca:	d100      	bne.n	8000dce <memmove+0x2a>
 8000dcc:	bd10      	pop	{r4, pc}
 8000dce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000dd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000dd6:	e7f7      	b.n	8000dc8 <memmove+0x24>

08000dd8 <_free_r>:
 8000dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000dda:	2900      	cmp	r1, #0
 8000ddc:	d044      	beq.n	8000e68 <_free_r+0x90>
 8000dde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000de2:	9001      	str	r0, [sp, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f1a1 0404 	sub.w	r4, r1, #4
 8000dea:	bfb8      	it	lt
 8000dec:	18e4      	addlt	r4, r4, r3
 8000dee:	f000 f913 	bl	8001018 <__malloc_lock>
 8000df2:	4a1e      	ldr	r2, [pc, #120]	; (8000e6c <_free_r+0x94>)
 8000df4:	9801      	ldr	r0, [sp, #4]
 8000df6:	6813      	ldr	r3, [r2, #0]
 8000df8:	b933      	cbnz	r3, 8000e08 <_free_r+0x30>
 8000dfa:	6063      	str	r3, [r4, #4]
 8000dfc:	6014      	str	r4, [r2, #0]
 8000dfe:	b003      	add	sp, #12
 8000e00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000e04:	f000 b90e 	b.w	8001024 <__malloc_unlock>
 8000e08:	42a3      	cmp	r3, r4
 8000e0a:	d908      	bls.n	8000e1e <_free_r+0x46>
 8000e0c:	6825      	ldr	r5, [r4, #0]
 8000e0e:	1961      	adds	r1, r4, r5
 8000e10:	428b      	cmp	r3, r1
 8000e12:	bf01      	itttt	eq
 8000e14:	6819      	ldreq	r1, [r3, #0]
 8000e16:	685b      	ldreq	r3, [r3, #4]
 8000e18:	1949      	addeq	r1, r1, r5
 8000e1a:	6021      	streq	r1, [r4, #0]
 8000e1c:	e7ed      	b.n	8000dfa <_free_r+0x22>
 8000e1e:	461a      	mov	r2, r3
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	b10b      	cbz	r3, 8000e28 <_free_r+0x50>
 8000e24:	42a3      	cmp	r3, r4
 8000e26:	d9fa      	bls.n	8000e1e <_free_r+0x46>
 8000e28:	6811      	ldr	r1, [r2, #0]
 8000e2a:	1855      	adds	r5, r2, r1
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	d10b      	bne.n	8000e48 <_free_r+0x70>
 8000e30:	6824      	ldr	r4, [r4, #0]
 8000e32:	4421      	add	r1, r4
 8000e34:	1854      	adds	r4, r2, r1
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	6011      	str	r1, [r2, #0]
 8000e3a:	d1e0      	bne.n	8000dfe <_free_r+0x26>
 8000e3c:	681c      	ldr	r4, [r3, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	6053      	str	r3, [r2, #4]
 8000e42:	440c      	add	r4, r1
 8000e44:	6014      	str	r4, [r2, #0]
 8000e46:	e7da      	b.n	8000dfe <_free_r+0x26>
 8000e48:	d902      	bls.n	8000e50 <_free_r+0x78>
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	6003      	str	r3, [r0, #0]
 8000e4e:	e7d6      	b.n	8000dfe <_free_r+0x26>
 8000e50:	6825      	ldr	r5, [r4, #0]
 8000e52:	1961      	adds	r1, r4, r5
 8000e54:	428b      	cmp	r3, r1
 8000e56:	bf04      	itt	eq
 8000e58:	6819      	ldreq	r1, [r3, #0]
 8000e5a:	685b      	ldreq	r3, [r3, #4]
 8000e5c:	6063      	str	r3, [r4, #4]
 8000e5e:	bf04      	itt	eq
 8000e60:	1949      	addeq	r1, r1, r5
 8000e62:	6021      	streq	r1, [r4, #0]
 8000e64:	6054      	str	r4, [r2, #4]
 8000e66:	e7ca      	b.n	8000dfe <_free_r+0x26>
 8000e68:	b003      	add	sp, #12
 8000e6a:	bd30      	pop	{r4, r5, pc}
 8000e6c:	20001088 	.word	0x20001088

08000e70 <sbrk_aligned>:
 8000e70:	b570      	push	{r4, r5, r6, lr}
 8000e72:	4e0e      	ldr	r6, [pc, #56]	; (8000eac <sbrk_aligned+0x3c>)
 8000e74:	460c      	mov	r4, r1
 8000e76:	6831      	ldr	r1, [r6, #0]
 8000e78:	4605      	mov	r5, r0
 8000e7a:	b911      	cbnz	r1, 8000e82 <sbrk_aligned+0x12>
 8000e7c:	f000 f8bc 	bl	8000ff8 <_sbrk_r>
 8000e80:	6030      	str	r0, [r6, #0]
 8000e82:	4621      	mov	r1, r4
 8000e84:	4628      	mov	r0, r5
 8000e86:	f000 f8b7 	bl	8000ff8 <_sbrk_r>
 8000e8a:	1c43      	adds	r3, r0, #1
 8000e8c:	d00a      	beq.n	8000ea4 <sbrk_aligned+0x34>
 8000e8e:	1cc4      	adds	r4, r0, #3
 8000e90:	f024 0403 	bic.w	r4, r4, #3
 8000e94:	42a0      	cmp	r0, r4
 8000e96:	d007      	beq.n	8000ea8 <sbrk_aligned+0x38>
 8000e98:	1a21      	subs	r1, r4, r0
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	f000 f8ac 	bl	8000ff8 <_sbrk_r>
 8000ea0:	3001      	adds	r0, #1
 8000ea2:	d101      	bne.n	8000ea8 <sbrk_aligned+0x38>
 8000ea4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	bd70      	pop	{r4, r5, r6, pc}
 8000eac:	2000108c 	.word	0x2000108c

08000eb0 <_malloc_r>:
 8000eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eb4:	1ccd      	adds	r5, r1, #3
 8000eb6:	f025 0503 	bic.w	r5, r5, #3
 8000eba:	3508      	adds	r5, #8
 8000ebc:	2d0c      	cmp	r5, #12
 8000ebe:	bf38      	it	cc
 8000ec0:	250c      	movcc	r5, #12
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	4607      	mov	r7, r0
 8000ec6:	db01      	blt.n	8000ecc <_malloc_r+0x1c>
 8000ec8:	42a9      	cmp	r1, r5
 8000eca:	d905      	bls.n	8000ed8 <_malloc_r+0x28>
 8000ecc:	230c      	movs	r3, #12
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	2600      	movs	r6, #0
 8000ed2:	4630      	mov	r0, r6
 8000ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ed8:	4e2e      	ldr	r6, [pc, #184]	; (8000f94 <_malloc_r+0xe4>)
 8000eda:	f000 f89d 	bl	8001018 <__malloc_lock>
 8000ede:	6833      	ldr	r3, [r6, #0]
 8000ee0:	461c      	mov	r4, r3
 8000ee2:	bb34      	cbnz	r4, 8000f32 <_malloc_r+0x82>
 8000ee4:	4629      	mov	r1, r5
 8000ee6:	4638      	mov	r0, r7
 8000ee8:	f7ff ffc2 	bl	8000e70 <sbrk_aligned>
 8000eec:	1c43      	adds	r3, r0, #1
 8000eee:	4604      	mov	r4, r0
 8000ef0:	d14d      	bne.n	8000f8e <_malloc_r+0xde>
 8000ef2:	6834      	ldr	r4, [r6, #0]
 8000ef4:	4626      	mov	r6, r4
 8000ef6:	2e00      	cmp	r6, #0
 8000ef8:	d140      	bne.n	8000f7c <_malloc_r+0xcc>
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	4631      	mov	r1, r6
 8000efe:	4638      	mov	r0, r7
 8000f00:	eb04 0803 	add.w	r8, r4, r3
 8000f04:	f000 f878 	bl	8000ff8 <_sbrk_r>
 8000f08:	4580      	cmp	r8, r0
 8000f0a:	d13a      	bne.n	8000f82 <_malloc_r+0xd2>
 8000f0c:	6823      	ldr	r3, [r4, #0]
 8000f0e:	3503      	adds	r5, #3
 8000f10:	1aed      	subs	r5, r5, r3
 8000f12:	f025 0503 	bic.w	r5, r5, #3
 8000f16:	3508      	adds	r5, #8
 8000f18:	2d0c      	cmp	r5, #12
 8000f1a:	bf38      	it	cc
 8000f1c:	250c      	movcc	r5, #12
 8000f1e:	4629      	mov	r1, r5
 8000f20:	4638      	mov	r0, r7
 8000f22:	f7ff ffa5 	bl	8000e70 <sbrk_aligned>
 8000f26:	3001      	adds	r0, #1
 8000f28:	d02b      	beq.n	8000f82 <_malloc_r+0xd2>
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	442b      	add	r3, r5
 8000f2e:	6023      	str	r3, [r4, #0]
 8000f30:	e00e      	b.n	8000f50 <_malloc_r+0xa0>
 8000f32:	6822      	ldr	r2, [r4, #0]
 8000f34:	1b52      	subs	r2, r2, r5
 8000f36:	d41e      	bmi.n	8000f76 <_malloc_r+0xc6>
 8000f38:	2a0b      	cmp	r2, #11
 8000f3a:	d916      	bls.n	8000f6a <_malloc_r+0xba>
 8000f3c:	1961      	adds	r1, r4, r5
 8000f3e:	42a3      	cmp	r3, r4
 8000f40:	6025      	str	r5, [r4, #0]
 8000f42:	bf18      	it	ne
 8000f44:	6059      	strne	r1, [r3, #4]
 8000f46:	6863      	ldr	r3, [r4, #4]
 8000f48:	bf08      	it	eq
 8000f4a:	6031      	streq	r1, [r6, #0]
 8000f4c:	5162      	str	r2, [r4, r5]
 8000f4e:	604b      	str	r3, [r1, #4]
 8000f50:	4638      	mov	r0, r7
 8000f52:	f104 060b 	add.w	r6, r4, #11
 8000f56:	f000 f865 	bl	8001024 <__malloc_unlock>
 8000f5a:	f026 0607 	bic.w	r6, r6, #7
 8000f5e:	1d23      	adds	r3, r4, #4
 8000f60:	1af2      	subs	r2, r6, r3
 8000f62:	d0b6      	beq.n	8000ed2 <_malloc_r+0x22>
 8000f64:	1b9b      	subs	r3, r3, r6
 8000f66:	50a3      	str	r3, [r4, r2]
 8000f68:	e7b3      	b.n	8000ed2 <_malloc_r+0x22>
 8000f6a:	6862      	ldr	r2, [r4, #4]
 8000f6c:	42a3      	cmp	r3, r4
 8000f6e:	bf0c      	ite	eq
 8000f70:	6032      	streq	r2, [r6, #0]
 8000f72:	605a      	strne	r2, [r3, #4]
 8000f74:	e7ec      	b.n	8000f50 <_malloc_r+0xa0>
 8000f76:	4623      	mov	r3, r4
 8000f78:	6864      	ldr	r4, [r4, #4]
 8000f7a:	e7b2      	b.n	8000ee2 <_malloc_r+0x32>
 8000f7c:	4634      	mov	r4, r6
 8000f7e:	6876      	ldr	r6, [r6, #4]
 8000f80:	e7b9      	b.n	8000ef6 <_malloc_r+0x46>
 8000f82:	230c      	movs	r3, #12
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	4638      	mov	r0, r7
 8000f88:	f000 f84c 	bl	8001024 <__malloc_unlock>
 8000f8c:	e7a1      	b.n	8000ed2 <_malloc_r+0x22>
 8000f8e:	6025      	str	r5, [r4, #0]
 8000f90:	e7de      	b.n	8000f50 <_malloc_r+0xa0>
 8000f92:	bf00      	nop
 8000f94:	20001088 	.word	0x20001088

08000f98 <_realloc_r>:
 8000f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f9c:	4680      	mov	r8, r0
 8000f9e:	4614      	mov	r4, r2
 8000fa0:	460e      	mov	r6, r1
 8000fa2:	b921      	cbnz	r1, 8000fae <_realloc_r+0x16>
 8000fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa8:	4611      	mov	r1, r2
 8000faa:	f7ff bf81 	b.w	8000eb0 <_malloc_r>
 8000fae:	b92a      	cbnz	r2, 8000fbc <_realloc_r+0x24>
 8000fb0:	f7ff ff12 	bl	8000dd8 <_free_r>
 8000fb4:	4625      	mov	r5, r4
 8000fb6:	4628      	mov	r0, r5
 8000fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fbc:	f000 f838 	bl	8001030 <_malloc_usable_size_r>
 8000fc0:	4284      	cmp	r4, r0
 8000fc2:	4607      	mov	r7, r0
 8000fc4:	d802      	bhi.n	8000fcc <_realloc_r+0x34>
 8000fc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000fca:	d812      	bhi.n	8000ff2 <_realloc_r+0x5a>
 8000fcc:	4621      	mov	r1, r4
 8000fce:	4640      	mov	r0, r8
 8000fd0:	f7ff ff6e 	bl	8000eb0 <_malloc_r>
 8000fd4:	4605      	mov	r5, r0
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	d0ed      	beq.n	8000fb6 <_realloc_r+0x1e>
 8000fda:	42bc      	cmp	r4, r7
 8000fdc:	4622      	mov	r2, r4
 8000fde:	4631      	mov	r1, r6
 8000fe0:	bf28      	it	cs
 8000fe2:	463a      	movcs	r2, r7
 8000fe4:	f7ff fed0 	bl	8000d88 <memcpy>
 8000fe8:	4631      	mov	r1, r6
 8000fea:	4640      	mov	r0, r8
 8000fec:	f7ff fef4 	bl	8000dd8 <_free_r>
 8000ff0:	e7e1      	b.n	8000fb6 <_realloc_r+0x1e>
 8000ff2:	4635      	mov	r5, r6
 8000ff4:	e7df      	b.n	8000fb6 <_realloc_r+0x1e>
	...

08000ff8 <_sbrk_r>:
 8000ff8:	b538      	push	{r3, r4, r5, lr}
 8000ffa:	4d06      	ldr	r5, [pc, #24]	; (8001014 <_sbrk_r+0x1c>)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4604      	mov	r4, r0
 8001000:	4608      	mov	r0, r1
 8001002:	602b      	str	r3, [r5, #0]
 8001004:	f000 f81c 	bl	8001040 <_sbrk>
 8001008:	1c43      	adds	r3, r0, #1
 800100a:	d102      	bne.n	8001012 <_sbrk_r+0x1a>
 800100c:	682b      	ldr	r3, [r5, #0]
 800100e:	b103      	cbz	r3, 8001012 <_sbrk_r+0x1a>
 8001010:	6023      	str	r3, [r4, #0]
 8001012:	bd38      	pop	{r3, r4, r5, pc}
 8001014:	20001090 	.word	0x20001090

08001018 <__malloc_lock>:
 8001018:	4801      	ldr	r0, [pc, #4]	; (8001020 <__malloc_lock+0x8>)
 800101a:	f7ff bbcb 	b.w	80007b4 <__retarget_lock_acquire_recursive>
 800101e:	bf00      	nop
 8001020:	20001084 	.word	0x20001084

08001024 <__malloc_unlock>:
 8001024:	4801      	ldr	r0, [pc, #4]	; (800102c <__malloc_unlock+0x8>)
 8001026:	f7ff bbc6 	b.w	80007b6 <__retarget_lock_release_recursive>
 800102a:	bf00      	nop
 800102c:	20001084 	.word	0x20001084

08001030 <_malloc_usable_size_r>:
 8001030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001034:	1f18      	subs	r0, r3, #4
 8001036:	2b00      	cmp	r3, #0
 8001038:	bfbc      	itt	lt
 800103a:	580b      	ldrlt	r3, [r1, r0]
 800103c:	18c0      	addlt	r0, r0, r3
 800103e:	4770      	bx	lr

08001040 <_sbrk>:
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <_sbrk+0x14>)
 8001042:	4905      	ldr	r1, [pc, #20]	; (8001058 <_sbrk+0x18>)
 8001044:	6813      	ldr	r3, [r2, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	bf08      	it	eq
 800104a:	460b      	moveq	r3, r1
 800104c:	4418      	add	r0, r3
 800104e:	6010      	str	r0, [r2, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	4770      	bx	lr
 8001054:	20001094 	.word	0x20001094
 8001058:	20001098 	.word	0x20001098

0800105c <_init>:
 800105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105e:	bf00      	nop
 8001060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001062:	bc08      	pop	{r3}
 8001064:	469e      	mov	lr, r3
 8001066:	4770      	bx	lr

08001068 <_fini>:
 8001068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800106a:	bf00      	nop
 800106c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800106e:	bc08      	pop	{r3}
 8001070:	469e      	mov	lr, r3
 8001072:	4770      	bx	lr
