
Debug/mcu_echo.elf:     file format elf32-littlearm
Debug/mcu_echo.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080007a1

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x000011c0 memsz 0x000011c0 flags rwx
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x080011c0 align 2**16
         filesz 0x00000068 memsz 0x000010a0 flags rw-
    LOAD off    0x000010a0 vaddr 0x200010a0 paddr 0x08001228 align 2**16
         filesz 0x00000000 memsz 0x00000600 flags rw-
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800114c  0800114c  0001114c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011b8  080011b8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080011b8  080011b8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011b8  080011b8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011b8  080011b8  000111b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011bc  080011bc  000111bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080011c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001038  20000068  08001228  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010a0  08001228  000210a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cf3  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000215f  00000000  00000000  00028d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000029a  00000000  00000000  0002aee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003d0  00000000  00000000  0002b188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000110  00000000  00000000  0002b558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003318  00000000  00000000  0002b668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00001abd  00000000  00000000  0002e980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000003c  00000000  00000000  0003043d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006c8  00000000  00000000  0003047c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000117e  00000000  00000000  00030b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 000001f5  00000000  00000000  00031cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  00031eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001a0 l    d  .text	00000000 .text
0800114c l    d  .rodata	00000000 .rodata
080011b8 l    d  .ARM.extab	00000000 .ARM.extab
080011b8 l    d  .ARM	00000000 .ARM
080011b8 l    d  .preinit_array	00000000 .preinit_array
080011b8 l    d  .init_array	00000000 .init_array
080011bc l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000068 l    d  .bss	00000000 .bss
200010a0 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 startup_stm32f411xe.o
080007b4 l       .text	00000000 LoopCopyDataInit
080007ae l       .text	00000000 CopyDataInit
080007c6 l       .text	00000000 LoopFillZerobss
080007c2 l       .text	00000000 FillZerobss
080007f0 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 crtstuff.c
08001134 l     O .text	00000000 __EH_FRAME_BEGIN__
08000250 l     F .text	00000000 __do_global_dtors_aux
20000068 l     O .bss	00000000 completed.1
080011bc l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000274 l     F .text	00000000 frame_dummy
2000006c l     O .bss	00000000 object.0
080011b8 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mcu_echo.c
08000290 l     F .text	00000034 msg_offset
080002c4 l     F .text	00000018 send
080002dc l     F .text	00000018 receive
00000000 l    df *ABS*	00000000 uart_dma.c
20000084 l     O .bss	00000004 receiving
20000088 l     O .bss	00000004 transmitting
00000000 l    df *ABS*	00000000 uart.c
08000538 l     F .text	00000054 uart_pin_setup
08000618 l     F .text	00000054 uart_enable
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
08000f48 l     F .text	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrk.c
2000109c l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000008 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
080011c0 l       .fini_array	00000000 __fini_array_end
080011bc l       .fini_array	00000000 __fini_array_start
080011bc l       .init_array	00000000 __init_array_end
080011b8 l       .preinit_array	00000000 __preinit_array_end
080011b8 l       .init_array	00000000 __init_array_start
080011b8 l       .preinit_array	00000000 __preinit_array_start
080007f0  w    F .text	00000002 RTC_Alarm_IRQHandler
08001108 g     F .text	00000010 _malloc_usable_size_r
080007f0  w    F .text	00000002 EXTI2_IRQHandler
080007f0  w    F .text	00000002 DebugMon_Handler
080007f0  w    F .text	00000002 SPI4_IRQHandler
080007f0  w    F .text	00000002 TIM1_CC_IRQHandler
080007f0  w    F .text	00000002 DMA2_Stream5_IRQHandler
080007f0  w    F .text	00000002 HardFault_Handler
08000410 g     F .text	0000003c DMA1_Stream5_IRQHandler
080010fc g     F .text	0000000c __malloc_unlock
00000400 g       *ABS*	00000000 _Min_Stack_Size
080007f0  w    F .text	00000002 SysTick_Handler
080007f0  w    F .text	00000002 PVD_IRQHandler
080007f0  w    F .text	00000002 SDIO_IRQHandler
08000e7c g     F .text	00000034 memmove
080007f0  w    F .text	00000002 TAMP_STAMP_IRQHandler
080011c0 g       *ABS*	00000000 _sidata
080007f0  w    F .text	00000002 PendSV_Handler
080007f0  w    F .text	00000002 NMI_Handler
080011b8 g       .ARM	00000000 __exidx_end
080007f0  w    F .text	00000002 EXTI3_IRQHandler
080004f4 g     F .text	00000044 uart_receive
080004b4 g     F .text	00000040 uart_send
080007f0  w    F .text	00000002 TIM1_UP_TIM10_IRQHandler
20001098 g     O .bss	00000004 errno
0800114c g       .text	00000000 _etext
20000068 g       .bss	00000000 _sbss
080007f0  w    F .text	00000002 I2C3_ER_IRQHandler
08000e60 g     F .text	0000001c memcpy
2000008c g     O .bss	00001000 msg_buffer
08000944 g     F .text	000001fc _svfprintf_r
080007f0  w    F .text	00000002 EXTI0_IRQHandler
080007f0  w    F .text	00000002 I2C2_EV_IRQHandler
080007f0  w    F .text	00000002 DMA1_Stream2_IRQHandler
080007f0  w    F .text	00000002 FPU_IRQHandler
20000000 g     O .data	00000004 SystemCoreClock
080007f0  w    F .text	00000002 UsageFault_Handler
080007f0  w    F .text	00000002 DMA2_Stream2_IRQHandler
20000068 g       .bss	00000000 __bss_start__
20000000 g       .data	00000000 _sdata
080007f0  w    F .text	00000002 SPI1_IRQHandler
080010d0 g     F .text	00000020 _sbrk_r
080007f0  w    F .text	00000002 TIM1_BRK_TIM9_IRQHandler
080011b8 g       .ARM	00000000 __exidx_start
080007f0  w    F .text	00000002 DMA2_Stream3_IRQHandler
08001070 g     F .text	0000005e _realloc_r
080007f4 g     F .text	00000048 __libc_init_array
08001118 g     F .text	0000001c _sbrk
080007f0  w    F .text	00000002 USART6_IRQHandler
08001134 g     F .text	00000000 _init
200010a0 g       .bss	00000000 _ebss
080007a0  w    F .text	00000038 Reset_Handler
2000108c g     O .bss	00000001 __lock___malloc_recursive_mutex
080007f0  w    F .text	00000002 DMA2_Stream0_IRQHandler
0800058c g     F .text	00000028 led_on
080007f0  w    F .text	00000002 TIM4_IRQHandler
200010a0 g       ._user_heap_stack	00000000 end
080007f0  w    F .text	00000002 I2C1_EV_IRQHandler
0800088e g     F .text	00000002 __retarget_lock_release_recursive
0800044c g     F .text	0000002c DMA1_Stream6_IRQHandler
08000890 g     F .text	000000b4 __ssputs_r
080007f0  w    F .text	00000002 DMA1_Stream1_IRQHandler
0800066c g     F .text	00000012 uart_init
080001b0 g     F .text	00000000 memchr
200010a0 g       .bss	00000000 __bss_end__
08000eb0 g     F .text	00000098 _free_r
080007f0  w    F .text	00000002 TIM3_IRQHandler
080007f0  w    F .text	00000002 RCC_IRQHandler
00000200 g       *ABS*	00000000 _Min_Heap_Size
080007f0 g       .text	00000002 Default_Handler
080007f0  w    F .text	00000002 EXTI15_10_IRQHandler
080007f0  w    F .text	00000002 ADC_IRQHandler
080007f0  w    F .text	00000002 DMA1_Stream7_IRQHandler
080007f0  w    F .text	00000002 SPI5_IRQHandler
080007f0  w    F .text	00000002 TIM5_IRQHandler
080007f0  w    F .text	00000002 DMA2_Stream7_IRQHandler
080007f0  w    F .text	00000002 I2C3_EV_IRQHandler
080007f0  w    F .text	00000002 EXTI9_5_IRQHandler
080007f0  w    F .text	00000002 RTC_WKUP_IRQHandler
08000478 g     F .text	0000003c uart_dma_init
080010f0 g     F .text	0000000c __malloc_lock
080007f0  w    F .text	00000002 SPI2_IRQHandler
0800088c g     F .text	00000002 __retarget_lock_acquire_recursive
0800083c g     F .text	00000010 memset
080007f0  w    F .text	00000002 MemManage_Handler
080002f4 g     F .text	0000011c main
080007f0  w    F .text	00000002 DMA1_Stream0_IRQHandler
080007f0  w    F .text	00000002 SVC_Handler
08000f88 g     F .text	000000e8 _malloc_r
080007f0  w    F .text	00000002 EXTI4_IRQHandler
08000680 g     F .text	0000005c SystemInit
08001140 g     F .text	00000000 _fini
0800084c g     F .text	00000040 sprintf
080005b4 g     F .text	00000028 led_off
08000b40 g     F .text	000000da _printf_common
20000004 g     O .data	00000004 _impure_ptr
08000944 g     F .text	000001fc _svfiprintf_r
080007f0  w    F .text	00000002 WWDG_IRQHandler
080007f0  w    F .text	00000002 TIM2_IRQHandler
080005dc g     F .text	0000003c led_init
080006dc g     F .text	000000c4 set_sysclk_to_100
080007f0  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
080007f0  w    F .text	00000002 TIM1_TRG_COM_TIM11_IRQHandler
20020000 g       .isr_vector	00000000 _estack
080007f0  w    F .text	00000002 EXTI1_IRQHandler
20000068 g       .data	00000000 _edata
080007f0  w    F .text	00000002 USART2_IRQHandler
08000000 g     O .isr_vector	00000000 g_pfnVectors
080007f0  w    F .text	00000002 I2C2_ER_IRQHandler
0800084c g     F .text	00000040 siprintf
080007f0  w    F .text	00000002 DMA2_Stream1_IRQHandler
080007f0  w    F .text	00000002 FLASH_IRQHandler
080007f0  w    F .text	00000002 DMA2_Stream4_IRQHandler
080007f0  w    F .text	00000002 BusFault_Handler
080007f0  w    F .text	00000002 USART1_IRQHandler
080001a0 g     F .text	00000010 strlen
080007f0  w    F .text	00000002 OTG_FS_IRQHandler
08000c1c g     F .text	00000244 _printf_i
080007f0  w    F .text	00000002 SPI3_IRQHandler
080007f0  w    F .text	00000002 DMA1_Stream4_IRQHandler
20001094 g     O .bss	00000004 __malloc_sbrk_start
080007f0  w    F .text	00000002 I2C1_ER_IRQHandler
20001090 g     O .bss	00000004 __malloc_free_list
080007f0  w    F .text	00000002 DMA2_Stream6_IRQHandler
080007f0  w    F .text	00000002 DMA1_Stream3_IRQHandler



Disassembly of section .text:

080001a0 <strlen>:
 80001a0:	4603      	mov	r3, r0
 80001a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a6:	2a00      	cmp	r2, #0
 80001a8:	d1fb      	bne.n	80001a2 <strlen+0x2>
 80001aa:	1a18      	subs	r0, r3, r0
 80001ac:	3801      	subs	r0, #1
 80001ae:	4770      	bx	lr

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000068 	.word	0x20000068
 800026c:	00000000 	.word	0x00000000
 8000270:	08001134 	.word	0x08001134

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000006c 	.word	0x2000006c
 800028c:	08001134 	.word	0x08001134

08000290 <msg_offset>:
#include "uart_dma.h"

#define READSIZE(buffer) *(size_t *)buffer

// Returns pointer to msg without padding
static char * msg_offset(char * msg) {
 8000290:	b084      	sub	sp, #16
 8000292:	9001      	str	r0, [sp, #4]
	for (size_t i=0; i<BUFFERSIZE; i++) {
 8000294:	2300      	movs	r3, #0
 8000296:	9303      	str	r3, [sp, #12]
 8000298:	e00c      	b.n	80002b4 <msg_offset+0x24>
		if (msg[i]) {
 800029a:	9a01      	ldr	r2, [sp, #4]
 800029c:	9b03      	ldr	r3, [sp, #12]
 800029e:	4413      	add	r3, r2
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d003      	beq.n	80002ae <msg_offset+0x1e>
			return msg + i;
 80002a6:	9a01      	ldr	r2, [sp, #4]
 80002a8:	9b03      	ldr	r3, [sp, #12]
 80002aa:	4413      	add	r3, r2
 80002ac:	e007      	b.n	80002be <msg_offset+0x2e>
	for (size_t i=0; i<BUFFERSIZE; i++) {
 80002ae:	9b03      	ldr	r3, [sp, #12]
 80002b0:	3301      	adds	r3, #1
 80002b2:	9303      	str	r3, [sp, #12]
 80002b4:	9b03      	ldr	r3, [sp, #12]
 80002b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80002ba:	d3ee      	bcc.n	800029a <msg_offset+0xa>
		}
	}
	return msg;
 80002bc:	9b01      	ldr	r3, [sp, #4]
}
 80002be:	4618      	mov	r0, r3
 80002c0:	b004      	add	sp, #16
 80002c2:	4770      	bx	lr

080002c4 <send>:

// Send size bytes at data pointer, using method defined by USE_DMA macro
static void send(void * data, size_t size) {
 80002c4:	b500      	push	{lr}
 80002c6:	b083      	sub	sp, #12
 80002c8:	9001      	str	r0, [sp, #4]
 80002ca:	9100      	str	r1, [sp, #0]
	if (USE_DMA) {
		uart_tx_start(data, size);
		uart_tx_wait();
	} else {
		uart_send(data, size);
 80002cc:	9900      	ldr	r1, [sp, #0]
 80002ce:	9801      	ldr	r0, [sp, #4]
 80002d0:	f000 f8f0 	bl	80004b4 <uart_send>
	}
}
 80002d4:	bf00      	nop
 80002d6:	b003      	add	sp, #12
 80002d8:	f85d fb04 	ldr.w	pc, [sp], #4

080002dc <receive>:

// Receive size bytes at buffer pointer, using method defined by USE_DMA macro
static void receive(void * buffer, size_t size) {
 80002dc:	b500      	push	{lr}
 80002de:	b083      	sub	sp, #12
 80002e0:	9001      	str	r0, [sp, #4]
 80002e2:	9100      	str	r1, [sp, #0]
	if (USE_DMA) {
		uart_rx_start(buffer, size);
		uart_rx_wait();
	} else {
		uart_receive(buffer, size);
 80002e4:	9900      	ldr	r1, [sp, #0]
 80002e6:	9801      	ldr	r0, [sp, #4]
 80002e8:	f000 f904 	bl	80004f4 <uart_receive>
	}
}
 80002ec:	bf00      	nop
 80002ee:	b003      	add	sp, #12
 80002f0:	f85d fb04 	ldr.w	pc, [sp], #4

080002f4 <main>:

int main(void) {
 80002f4:	b500      	push	{lr}
 80002f6:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80002fa:	b083      	sub	sp, #12
	char debug_msg[BUFFERSIZE] = {0};
 80002fc:	ab02      	add	r3, sp, #8
 80002fe:	2200      	movs	r2, #0
 8000300:	f843 2c08 	str.w	r2, [r3, #-8]
 8000304:	3b04      	subs	r3, #4
 8000306:	f640 72fc 	movw	r2, #4092	; 0xffc
 800030a:	2100      	movs	r1, #0
 800030c:	4618      	mov	r0, r3
 800030e:	f000 fa95 	bl	800083c <memset>
	char * stripped_msg;
	size_t received_size=0;
 8000312:	2300      	movs	r3, #0
 8000314:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
 8000318:	f102 0204 	add.w	r2, r2, #4
 800031c:	6013      	str	r3, [r2, #0]

	uart_init();
 800031e:	f000 f9a5 	bl	800066c <uart_init>
	led_init();
 8000322:	f000 f95b 	bl	80005dc <led_init>
	uart_dma_init();
 8000326:	f000 f8a7 	bl	8000478 <uart_dma_init>

	while(1) {
		// Read received buffer size
		led_on(GREEN);
 800032a:	200c      	movs	r0, #12
 800032c:	f000 f92e 	bl	800058c <led_on>
		receive(msg_buffer, sizeof(size_t));
 8000330:	2104      	movs	r1, #4
 8000332:	4835      	ldr	r0, [pc, #212]	; (8000408 <main+0x114>)
 8000334:	f7ff ffd2 	bl	80002dc <receive>
		received_size = READSIZE(msg_buffer) + PADDINGSIZE;
 8000338:	4b33      	ldr	r3, [pc, #204]	; (8000408 <main+0x114>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3304      	adds	r3, #4
 800033e:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
 8000342:	f102 0204 	add.w	r2, r2, #4
 8000346:	6013      	str	r3, [r2, #0]
		memset(msg_buffer, 0, sizeof(size_t));
 8000348:	2204      	movs	r2, #4
 800034a:	2100      	movs	r1, #0
 800034c:	482e      	ldr	r0, [pc, #184]	; (8000408 <main+0x114>)
 800034e:	f000 fa75 	bl	800083c <memset>
		led_off(GREEN);
 8000352:	200c      	movs	r0, #12
 8000354:	f000 f92e 	bl	80005b4 <led_off>

		// Send back buffer content
		if (received_size > BUFFERSIZE) {
 8000358:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 800035c:	f103 0304 	add.w	r3, r3, #4
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000366:	d91e      	bls.n	80003a6 <main+0xb2>
			// Message too large
			led_on(ORANGE);
 8000368:	200d      	movs	r0, #13
 800036a:	f000 f90f 	bl	800058c <led_on>
			sprintf(debug_msg, "Attempting to read %u bytes larger than buffer size %d.\n", (unsigned int)received_size, BUFFERSIZE);
 800036e:	a802      	add	r0, sp, #8
 8000370:	3808      	subs	r0, #8
 8000372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000376:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
 800037a:	f102 0204 	add.w	r2, r2, #4
 800037e:	6812      	ldr	r2, [r2, #0]
 8000380:	4922      	ldr	r1, [pc, #136]	; (800040c <main+0x118>)
 8000382:	f000 fa63 	bl	800084c <siprintf>
			send(debug_msg, strlen(debug_msg));
 8000386:	ab02      	add	r3, sp, #8
 8000388:	3b08      	subs	r3, #8
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ff08 	bl	80001a0 <strlen>
 8000390:	4602      	mov	r2, r0
 8000392:	ab02      	add	r3, sp, #8
 8000394:	3b08      	subs	r3, #8
 8000396:	4611      	mov	r1, r2
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff ff93 	bl	80002c4 <send>
			led_off(ORANGE);
 800039e:	200d      	movs	r0, #13
 80003a0:	f000 f908 	bl	80005b4 <led_off>
 80003a4:	e7c1      	b.n	800032a <main+0x36>
		} else {
			// Read message
			led_on(RED);
 80003a6:	200e      	movs	r0, #14
 80003a8:	f000 f8f0 	bl	800058c <led_on>
			receive(msg_buffer, received_size);
 80003ac:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80003b0:	f103 0304 	add.w	r3, r3, #4
 80003b4:	6819      	ldr	r1, [r3, #0]
 80003b6:	4814      	ldr	r0, [pc, #80]	; (8000408 <main+0x114>)
 80003b8:	f7ff ff90 	bl	80002dc <receive>
			led_off(RED);
 80003bc:	200e      	movs	r0, #14
 80003be:	f000 f8f9 	bl	80005b4 <led_off>

			// Echo message
			led_on(BLUE);
 80003c2:	200f      	movs	r0, #15
 80003c4:	f000 f8e2 	bl	800058c <led_on>
			stripped_msg = msg_offset(msg_buffer);
 80003c8:	480f      	ldr	r0, [pc, #60]	; (8000408 <main+0x114>)
 80003ca:	f7ff ff61 	bl	8000290 <msg_offset>
 80003ce:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80003d2:	6018      	str	r0, [r3, #0]
			send(stripped_msg, strlen(stripped_msg));
 80003d4:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80003d8:	6818      	ldr	r0, [r3, #0]
 80003da:	f7ff fee1 	bl	80001a0 <strlen>
 80003de:	4603      	mov	r3, r0
 80003e0:	4619      	mov	r1, r3
 80003e2:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80003e6:	6818      	ldr	r0, [r3, #0]
 80003e8:	f7ff ff6c 	bl	80002c4 <send>
			memset(msg_buffer, 0, received_size);
 80003ec:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 80003f0:	f103 0304 	add.w	r3, r3, #4
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	2100      	movs	r1, #0
 80003f8:	4803      	ldr	r0, [pc, #12]	; (8000408 <main+0x114>)
 80003fa:	f000 fa1f 	bl	800083c <memset>
			led_off(BLUE);
 80003fe:	200f      	movs	r0, #15
 8000400:	f000 f8d8 	bl	80005b4 <led_off>
		led_on(GREEN);
 8000404:	e791      	b.n	800032a <main+0x36>
 8000406:	bf00      	nop
 8000408:	2000008c 	.word	0x2000008c
 800040c:	0800114c 	.word	0x0800114c

08000410 <DMA1_Stream5_IRQHandler>:

// UART reception finish interrupt
void DMA1_Stream5_IRQHandler(void)
{
    // clear stream receive complete interrupt - bit11 for stream 5
    if (DMA1->HISR & DMA_HISR_TCIF5) {
 8000410:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <DMA1_Stream5_IRQHandler+0x30>)
 8000412:	685b      	ldr	r3, [r3, #4]
 8000414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000418:	2b00      	cmp	r3, #0
 800041a:	d00e      	beq.n	800043a <DMA1_Stream5_IRQHandler+0x2a>
        // clear interrupt
        DMA1->HIFCR |= DMA_HISR_TCIF5;
 800041c:	4b08      	ldr	r3, [pc, #32]	; (8000440 <DMA1_Stream5_IRQHandler+0x30>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	4a07      	ldr	r2, [pc, #28]	; (8000440 <DMA1_Stream5_IRQHandler+0x30>)
 8000422:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000426:	60d3      	str	r3, [r2, #12]
		receiving = 0;
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <DMA1_Stream5_IRQHandler+0x34>)
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
		// Disable receive DMA
		USART2->CR3 &= ~USART_CR3_DMAR;
 800042e:	4b06      	ldr	r3, [pc, #24]	; (8000448 <DMA1_Stream5_IRQHandler+0x38>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a05      	ldr	r2, [pc, #20]	; (8000448 <DMA1_Stream5_IRQHandler+0x38>)
 8000434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000438:	6153      	str	r3, [r2, #20]
    }
}
 800043a:	bf00      	nop
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40026000 	.word	0x40026000
 8000444:	20000084 	.word	0x20000084
 8000448:	40004400 	.word	0x40004400

0800044c <DMA1_Stream6_IRQHandler>:

// UART transmission finish interrupt
void DMA1_Stream6_IRQHandler(void)
{
    // clear stream transfer complete interrupt - bit21 for stream 6
    if (DMA1->HISR & DMA_HISR_TCIF6) {
 800044c:	4b08      	ldr	r3, [pc, #32]	; (8000470 <DMA1_Stream6_IRQHandler+0x24>)
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000454:	2b00      	cmp	r3, #0
 8000456:	d008      	beq.n	800046a <DMA1_Stream6_IRQHandler+0x1e>
        // clear interrupt
        DMA1->HIFCR |= DMA_HISR_TCIF6;
 8000458:	4b05      	ldr	r3, [pc, #20]	; (8000470 <DMA1_Stream6_IRQHandler+0x24>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	4a04      	ldr	r2, [pc, #16]	; (8000470 <DMA1_Stream6_IRQHandler+0x24>)
 800045e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000462:	60d3      	str	r3, [r2, #12]
		transmitting = 0;
 8000464:	4b03      	ldr	r3, [pc, #12]	; (8000474 <DMA1_Stream6_IRQHandler+0x28>)
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
    }
}
 800046a:	bf00      	nop
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	40026000 	.word	0x40026000
 8000474:	20000088 	.word	0x20000088

08000478 <uart_dma_init>:

// Setup UART DMA
void uart_dma_init(void) {
	// Enable transmit DMA
	USART2->CR3 |= USART_CR3_DMAT;
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <uart_dma_init+0x34>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	4a0b      	ldr	r2, [pc, #44]	; (80004ac <uart_dma_init+0x34>)
 800047e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000482:	6153      	str	r3, [r2, #20]
	// Enable receive DMA
	USART2->CR3 |= USART_CR3_DMAR;
 8000484:	4b09      	ldr	r3, [pc, #36]	; (80004ac <uart_dma_init+0x34>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	4a08      	ldr	r2, [pc, #32]	; (80004ac <uart_dma_init+0x34>)
 800048a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800048e:	6153      	str	r3, [r2, #20]
	// Clear TC bit
	USART2->SR &= ~USART_SR_TC;
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <uart_dma_init+0x34>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a05      	ldr	r2, [pc, #20]	; (80004ac <uart_dma_init+0x34>)
 8000496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800049a:	6013      	str	r3, [r2, #0]
	// Enable DMA1 clock
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 800049c:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <uart_dma_init+0x38>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a0:	4a03      	ldr	r2, [pc, #12]	; (80004b0 <uart_dma_init+0x38>)
 80004a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a8:	bf00      	nop
 80004aa:	4770      	bx	lr
 80004ac:	40004400 	.word	0x40004400
 80004b0:	40023800 	.word	0x40023800

080004b4 <uart_send>:
#include "uart.h"

char msg_buffer[BUFFERSIZE] = {0};

// Send content of pointer through uart
void uart_send(void * data, size_t size) {
 80004b4:	b084      	sub	sp, #16
 80004b6:	9001      	str	r0, [sp, #4]
 80004b8:	9100      	str	r1, [sp, #0]
	for (size_t i=0; i<size; i++){
 80004ba:	2300      	movs	r3, #0
 80004bc:	9303      	str	r3, [sp, #12]
 80004be:	e00f      	b.n	80004e0 <uart_send+0x2c>
		// Send character
		USART2->DR = ((char *)data)[i];
 80004c0:	9a01      	ldr	r2, [sp, #4]
 80004c2:	9b03      	ldr	r3, [sp, #12]
 80004c4:	4413      	add	r3, r2
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <uart_send+0x3c>)
 80004ca:	605a      	str	r2, [r3, #4]
		// Wait for transmit complete
		while(!(USART2->SR & (1 << 6)));
 80004cc:	bf00      	nop
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <uart_send+0x3c>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d0f9      	beq.n	80004ce <uart_send+0x1a>
	for (size_t i=0; i<size; i++){
 80004da:	9b03      	ldr	r3, [sp, #12]
 80004dc:	3301      	adds	r3, #1
 80004de:	9303      	str	r3, [sp, #12]
 80004e0:	9a03      	ldr	r2, [sp, #12]
 80004e2:	9b00      	ldr	r3, [sp, #0]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d3eb      	bcc.n	80004c0 <uart_send+0xc>
	}
}
 80004e8:	bf00      	nop
 80004ea:	bf00      	nop
 80004ec:	b004      	add	sp, #16
 80004ee:	4770      	bx	lr
 80004f0:	40004400 	.word	0x40004400

080004f4 <uart_receive>:

// Receive size bytes of content from uart and write it to buffer
void uart_receive(void * buffer, size_t size)  {
 80004f4:	b084      	sub	sp, #16
 80004f6:	9001      	str	r0, [sp, #4]
 80004f8:	9100      	str	r1, [sp, #0]
	// USART CR2 configure stop bit count, default 1
	// USART2->CR2 &= ~(0x3U << 12);
	// USART2->CR2 != (0x0U << 12);
	for (size_t i=0; i < size; i++) {
 80004fa:	2300      	movs	r3, #0
 80004fc:	9303      	str	r3, [sp, #12]
 80004fe:	e010      	b.n	8000522 <uart_receive+0x2e>
		// Wait until RXNE bit is set
		while (!(USART2->SR & (0x1U << 5))){};
 8000500:	bf00      	nop
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <uart_receive+0x40>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f003 0320 	and.w	r3, r3, #32
 800050a:	2b00      	cmp	r3, #0
 800050c:	d0f9      	beq.n	8000502 <uart_receive+0xe>
		// Receive character
		((char *)buffer)[i] = USART2->DR;
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <uart_receive+0x40>)
 8000510:	6859      	ldr	r1, [r3, #4]
 8000512:	9a01      	ldr	r2, [sp, #4]
 8000514:	9b03      	ldr	r3, [sp, #12]
 8000516:	4413      	add	r3, r2
 8000518:	b2ca      	uxtb	r2, r1
 800051a:	701a      	strb	r2, [r3, #0]
	for (size_t i=0; i < size; i++) {
 800051c:	9b03      	ldr	r3, [sp, #12]
 800051e:	3301      	adds	r3, #1
 8000520:	9303      	str	r3, [sp, #12]
 8000522:	9a03      	ldr	r2, [sp, #12]
 8000524:	9b00      	ldr	r3, [sp, #0]
 8000526:	429a      	cmp	r2, r3
 8000528:	d3ea      	bcc.n	8000500 <uart_receive+0xc>
	}
}
 800052a:	bf00      	nop
 800052c:	bf00      	nop
 800052e:	b004      	add	sp, #16
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40004400 	.word	0x40004400

08000538 <uart_pin_setup>:

// Setup GPIO A2 and A3 pins for UART
static void uart_pin_setup(void) {
    // Enable GPIOA clock, bit 0 on AHB1ENR
    RCC->AHB1ENR |= (1 << 0);
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <uart_pin_setup+0x4c>)
 800053a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053c:	4a11      	ldr	r2, [pc, #68]	; (8000584 <uart_pin_setup+0x4c>)
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	6313      	str	r3, [r2, #48]	; 0x30

    // Set pin modes as alternate mode 7 (pins 2 and 3)
    // USART2 TX and RX pins are PA2 and PA3 respectively
    GPIOA->MODER &= ~(0xFU << 4); // Reset bits 4:5 for PA2 and 6:7 for PA3
 8000544:	4b10      	ldr	r3, [pc, #64]	; (8000588 <uart_pin_setup+0x50>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a0f      	ldr	r2, [pc, #60]	; (8000588 <uart_pin_setup+0x50>)
 800054a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800054e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0xAU << 4); // Set   bits 4:5 for PA2 and 6:7 for PA3 to alternate mode (10)
 8000550:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <uart_pin_setup+0x50>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a0c      	ldr	r2, [pc, #48]	; (8000588 <uart_pin_setup+0x50>)
 8000556:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800055a:	6013      	str	r3, [r2, #0]

    // Set pin modes as high speed
    GPIOA->OSPEEDR |= 0x000000A0; // Set pin 2/3 to high speed mode (0b10)
 800055c:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <uart_pin_setup+0x50>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	4a09      	ldr	r2, [pc, #36]	; (8000588 <uart_pin_setup+0x50>)
 8000562:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000566:	6093      	str	r3, [r2, #8]

    // Choose AF7 for USART2 in Alternate Function registers
    GPIOA->AFR[0] |= (0x7 << 8); // for pin A2
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <uart_pin_setup+0x50>)
 800056a:	6a1b      	ldr	r3, [r3, #32]
 800056c:	4a06      	ldr	r2, [pc, #24]	; (8000588 <uart_pin_setup+0x50>)
 800056e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000572:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (0x7 << 12); // for pin A3
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <uart_pin_setup+0x50>)
 8000576:	6a1b      	ldr	r3, [r3, #32]
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <uart_pin_setup+0x50>)
 800057a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800057e:	6213      	str	r3, [r2, #32]
}
 8000580:	bf00      	nop
 8000582:	4770      	bx	lr
 8000584:	40023800 	.word	0x40023800
 8000588:	40020000 	.word	0x40020000

0800058c <led_on>:

// Turn on LED
void led_on(led l) {
 800058c:	b082      	sub	sp, #8
 800058e:	4603      	mov	r3, r0
 8000590:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIOD->ODR |= (1U<<l);
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <led_on+0x24>)
 8000596:	695a      	ldr	r2, [r3, #20]
 8000598:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800059c:	2101      	movs	r1, #1
 800059e:	fa01 f303 	lsl.w	r3, r1, r3
 80005a2:	4903      	ldr	r1, [pc, #12]	; (80005b0 <led_on+0x24>)
 80005a4:	4313      	orrs	r3, r2
 80005a6:	614b      	str	r3, [r1, #20]
}
 80005a8:	bf00      	nop
 80005aa:	b002      	add	sp, #8
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40020c00 	.word	0x40020c00

080005b4 <led_off>:

// Turn off LED
void led_off(led l) {
 80005b4:	b082      	sub	sp, #8
 80005b6:	4603      	mov	r3, r0
 80005b8:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIOD->ODR &= ~(1U<<l);
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <led_off+0x24>)
 80005be:	695a      	ldr	r2, [r3, #20]
 80005c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80005c4:	2101      	movs	r1, #1
 80005c6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ca:	43db      	mvns	r3, r3
 80005cc:	4902      	ldr	r1, [pc, #8]	; (80005d8 <led_off+0x24>)
 80005ce:	4013      	ands	r3, r2
 80005d0:	614b      	str	r3, [r1, #20]
}
 80005d2:	bf00      	nop
 80005d4:	b002      	add	sp, #8
 80005d6:	4770      	bx	lr
 80005d8:	40020c00 	.word	0x40020c00

080005dc <led_init>:
}

// Setup LED GPIO
void led_init(void) {
	// Enable GPIOD clock
	RCC->AHB1ENR |= 0x00000008;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <led_init+0x34>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <led_init+0x34>)
 80005e2:	f043 0308 	orr.w	r3, r3, #8
 80005e6:	6313      	str	r3, [r2, #48]	; 0x30

	// Turn on output mode
	GPIOD->MODER &= 0x00FFFFFF;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <led_init+0x38>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a09      	ldr	r2, [pc, #36]	; (8000614 <led_init+0x38>)
 80005ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80005f2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= 0x55000000;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <led_init+0x38>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <led_init+0x38>)
 80005fa:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80005fe:	6013      	str	r3, [r2, #0]

	// Turn off LEDs
	GPIOD->ODR &= 0x0FFF;
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <led_init+0x38>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a03      	ldr	r2, [pc, #12]	; (8000614 <led_init+0x38>)
 8000606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800060a:	6153      	str	r3, [r2, #20]
}
 800060c:	bf00      	nop
 800060e:	4770      	bx	lr
 8000610:	40023800 	.word	0x40023800
 8000614:	40020c00 	.word	0x40020c00

08000618 <uart_enable>:

// Initialize UART 2
static void uart_enable(void) {
    // enable USART2 clock, bit 17 on APB1ENR
    RCC->APB1ENR |= (1 << 17);
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <uart_enable+0x4c>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a11      	ldr	r2, [pc, #68]	; (8000664 <uart_enable+0x4c>)
 800061e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40

    // USART2 parity control, bit 9
    // USART2->CR1 |= (0 << 9); // 0 - no parity

    // USART2 RX enable, RE bit 2
    USART2->CR1 |= (1 << 2);
 8000624:	4b10      	ldr	r3, [pc, #64]	; (8000668 <uart_enable+0x50>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <uart_enable+0x50>)
 800062a:	f043 0304 	orr.w	r3, r3, #4
 800062e:	60d3      	str	r3, [r2, #12]
    // USART2 TX enable, TE bit 3
    USART2->CR1 |= (1 << 3);
 8000630:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <uart_enable+0x50>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	4a0c      	ldr	r2, [pc, #48]	; (8000668 <uart_enable+0x50>)
 8000636:	f043 0308 	orr.w	r3, r3, #8
 800063a:	60d3      	str	r3, [r2, #12]

    // Enable usart2 - UE, bit 13
    USART2->CR1 |= (1 << 13);
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <uart_enable+0x50>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	4a09      	ldr	r2, [pc, #36]	; (8000668 <uart_enable+0x50>)
 8000642:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000646:	60d3      	str	r3, [r2, #12]
	// For STM32F411: fCK = 25 Mhz (Sysclk/4), Baudrate = 115200, OVER8 = 0
	// USARTDIV = fCK / baud / 8 * (2-OVER8)
	// USARTDIV = 25Mhz / 115200 / 16 = 13.5633
	// Fraction: 0.5633*16 = 9
	// Mantissa: 13
    USART2->BRR |= (13 << 4); // Mantissa
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <uart_enable+0x50>)
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	4a06      	ldr	r2, [pc, #24]	; (8000668 <uart_enable+0x50>)
 800064e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8000652:	6093      	str	r3, [r2, #8]
    USART2->BRR |= 9; // Fraction
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <uart_enable+0x50>)
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	4a03      	ldr	r2, [pc, #12]	; (8000668 <uart_enable+0x50>)
 800065a:	f043 0309 	orr.w	r3, r3, #9
 800065e:	6093      	str	r3, [r2, #8]
}	
 8000660:	bf00      	nop
 8000662:	4770      	bx	lr
 8000664:	40023800 	.word	0x40023800
 8000668:	40004400 	.word	0x40004400

0800066c <uart_init>:

void uart_init(void)
{
 800066c:	b508      	push	{r3, lr}
    /* set system clock to 100 Mhz */
    set_sysclk_to_100();
 800066e:	f000 f835 	bl	80006dc <set_sysclk_to_100>

	uart_pin_setup();
 8000672:	f7ff ff61 	bl	8000538 <uart_pin_setup>
	uart_enable();
 8000676:	f7ff ffcf 	bl	8000618 <uart_enable>
}
 800067a:	bf00      	nop
 800067c:	bd08      	pop	{r3, pc}
	...

08000680 <SystemInit>:
*************************************************/
void SystemInit(void)
{
	/* FPU settings, can be enabled from project makefile */
	#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <SystemInit+0x50>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000686:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <SystemInit+0x50>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	#endif

	/* Reset the RCC clock configuration to the default reset state */
	/* Set HSION bit */
	RCC->CR |= (1U << 0);
 8000690:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <SystemInit+0x54>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a0f      	ldr	r2, [pc, #60]	; (80006d4 <SystemInit+0x54>)
 8000696:	f043 0301 	orr.w	r3, r3, #1
 800069a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <SystemInit+0x54>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]

	/* Reset HSEON (16), CSSON (19) and PLLON (24) bits */
	RCC->CR &= ~((1U << 16) | (1U << 19) | (1U << 24));
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <SystemInit+0x54>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <SystemInit+0x54>)
 80006a8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006b0:	6013      	str	r3, [r2, #0]

	/* Reset PLLCFGR register to reset value */
	RCC->PLLCFGR = 0x24003010UL;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <SystemInit+0x54>)
 80006b4:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <SystemInit+0x58>)
 80006b6:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= ~(1U << 18);
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <SystemInit+0x54>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <SystemInit+0x54>)
 80006be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006c2:	6013      	str	r3, [r2, #0]

	/* Disable all clock interrupts */
	RCC->CIR = 0x00000000UL;
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <SystemInit+0x54>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
}
 80006ca:	bf00      	nop
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	40023800 	.word	0x40023800
 80006d8:	24003010 	.word	0x24003010

080006dc <set_sysclk_to_100>:
* this is only tested on stm32f4 discovery board
*************************************************/
void set_sysclk_to_100(void)
{
	/* Enable HSE (CR: bit 16) */
	RCC->CR |= (1U << 16);
 80006dc:	4b2a      	ldr	r3, [pc, #168]	; (8000788 <set_sysclk_to_100+0xac>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a29      	ldr	r2, [pc, #164]	; (8000788 <set_sysclk_to_100+0xac>)
 80006e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006e6:	6013      	str	r3, [r2, #0]
	/* Wait till HSE is ready (CR: bit 17) */
	while(!(RCC->CR & (1 << 17)));
 80006e8:	bf00      	nop
 80006ea:	4b27      	ldr	r3, [pc, #156]	; (8000788 <set_sysclk_to_100+0xac>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0f9      	beq.n	80006ea <set_sysclk_to_100+0xe>

	/* Enable power interface clock (APB1ENR:bit 28) */
	RCC->APB1ENR |= (1 << 28);
 80006f6:	4b24      	ldr	r3, [pc, #144]	; (8000788 <set_sysclk_to_100+0xac>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fa:	4a23      	ldr	r2, [pc, #140]	; (8000788 <set_sysclk_to_100+0xac>)
 80006fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000700:	6413      	str	r3, [r2, #64]	; 0x40

	/* set voltage scale to 1 for max frequency (PWR_CR:bit 14)
	 * (0b0) scale 2 for fCLK <= 144 Mhz
	 * (0b1) scale 1 for 144 Mhz < fCLK <= 168 Mhz
	 */
	PWR->CR |= (1 << 14);
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <set_sysclk_to_100+0xb0>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a21      	ldr	r2, [pc, #132]	; (800078c <set_sysclk_to_100+0xb0>)
 8000708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070c:	6013      	str	r3, [r2, #0]

	/* set AHB prescaler to /1 (CFGR:bits 7:4) */
	RCC->CFGR |= (0 << 4);
 800070e:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <set_sysclk_to_100+0xac>)
 8000710:	4a1d      	ldr	r2, [pc, #116]	; (8000788 <set_sysclk_to_100+0xac>)
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	6093      	str	r3, [r2, #8]
	/* set APB low speed prescaler to /4 (APB1) (CFGR:bits 12:10) */
	RCC->CFGR |= (5 << 10);
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <set_sysclk_to_100+0xac>)
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	4a1b      	ldr	r2, [pc, #108]	; (8000788 <set_sysclk_to_100+0xac>)
 800071c:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000720:	6093      	str	r3, [r2, #8]
	/* set APB high speed prescaler to /2 (APB2) (CFGR:bits 15:13) */
	RCC->CFGR |= (4 << 13);
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <set_sysclk_to_100+0xac>)
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	4a18      	ldr	r2, [pc, #96]	; (8000788 <set_sysclk_to_100+0xac>)
 8000728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800072c:	6093      	str	r3, [r2, #8]

	/* Set M, N, P and Q PLL dividers
	 * PLLCFGR: bits 5:0 (M), 14:6 (N), 17:16 (P), 27:24 (Q)
	 * Set PLL source to HSE, PLLCFGR: bit 22, 1:HSE, 0:HSI
	 */
	RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <set_sysclk_to_100+0xac>)
 8000730:	4a17      	ldr	r2, [pc, #92]	; (8000790 <set_sysclk_to_100+0xb4>)
 8000732:	605a      	str	r2, [r3, #4]
	               (PLL_Q << 24) | (1 << 22);
	/* Enable the main PLL (CR: bit 24) */
	RCC->CR |= (1 << 24);
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <set_sysclk_to_100+0xac>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a13      	ldr	r2, [pc, #76]	; (8000788 <set_sysclk_to_100+0xac>)
 800073a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800073e:	6013      	str	r3, [r2, #0]
	/* Wait till the main PLL is ready (CR: bit 25) */
	while(!(RCC->CR & (1 << 25)));
 8000740:	bf00      	nop
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <set_sysclk_to_100+0xac>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800074a:	2b00      	cmp	r3, #0
 800074c:	d0f9      	beq.n	8000742 <set_sysclk_to_100+0x66>
	 * instruction cache enable (ACR:bit 9)
	 * data cache enable (ACR:bit 10)
	 * set latency to 5 wait states (ARC:bits 2:0)
	 *   see Table 10 on page 80 in RM0090
	 */
	FLASH->ACR = (1 << 8) | (1 << 9) | (1 << 10 ) | (5 << 0);
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <set_sysclk_to_100+0xb8>)
 8000750:	f240 7205 	movw	r2, #1797	; 0x705
 8000754:	601a      	str	r2, [r3, #0]
	/* Select the main PLL as system clock source, (CFGR:bits 1:0)
	 * 0b00 - HSI
	 * 0b01 - HSE
	 * 0b10 - PLL
	 */
	RCC->CFGR &= ~(3U << 0);
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <set_sysclk_to_100+0xac>)
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <set_sysclk_to_100+0xac>)
 800075c:	f023 0303 	bic.w	r3, r3, #3
 8000760:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (2 << 0);
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <set_sysclk_to_100+0xac>)
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	4a08      	ldr	r2, [pc, #32]	; (8000788 <set_sysclk_to_100+0xac>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6093      	str	r3, [r2, #8]
	/* Wait till the main PLL is used as system clock source (CFGR:bits 3:2) */
	while (!(RCC->CFGR & (2U << 2)));
 800076e:	bf00      	nop
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <set_sysclk_to_100+0xac>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f003 0308 	and.w	r3, r3, #8
 8000778:	2b00      	cmp	r3, #0
 800077a:	d0f9      	beq.n	8000770 <set_sysclk_to_100+0x94>

	// update SystemCoreClock variable
	SystemCoreClock = 100000000;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <set_sysclk_to_100+0xbc>)
 800077e:	4a07      	ldr	r2, [pc, #28]	; (800079c <set_sysclk_to_100+0xc0>)
 8000780:	601a      	str	r2, [r3, #0]
}
 8000782:	bf00      	nop
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000
 8000790:	08416008 	.word	0x08416008
 8000794:	40023c00 	.word	0x40023c00
 8000798:	20000000 	.word	0x20000000
 800079c:	05f5e100 	.word	0x05f5e100

080007a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007a6:	490e      	ldr	r1, [pc, #56]	; (80007e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007a8:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ac:	e002      	b.n	80007b4 <LoopCopyDataInit>

080007ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b2:	3304      	adds	r3, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b8:	d3f9      	bcc.n	80007ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ba:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007bc:	4c0b      	ldr	r4, [pc, #44]	; (80007ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c0:	e001      	b.n	80007c6 <LoopFillZerobss>

080007c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c4:	3204      	adds	r2, #4

080007c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c8:	d3fb      	bcc.n	80007c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007ca:	f7ff ff59 	bl	8000680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ce:	f000 f811 	bl	80007f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007d2:	f7ff fd8f 	bl	80002f4 <main>
  bx  lr    
 80007d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80007e4:	080011c0 	.word	0x080011c0
  ldr r2, =_sbss
 80007e8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80007ec:	200010a0 	.word	0x200010a0

080007f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC_IRQHandler>
	...

080007f4 <__libc_init_array>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	4d0d      	ldr	r5, [pc, #52]	; (800082c <__libc_init_array+0x38>)
 80007f8:	4c0d      	ldr	r4, [pc, #52]	; (8000830 <__libc_init_array+0x3c>)
 80007fa:	1b64      	subs	r4, r4, r5
 80007fc:	10a4      	asrs	r4, r4, #2
 80007fe:	2600      	movs	r6, #0
 8000800:	42a6      	cmp	r6, r4
 8000802:	d109      	bne.n	8000818 <__libc_init_array+0x24>
 8000804:	4d0b      	ldr	r5, [pc, #44]	; (8000834 <__libc_init_array+0x40>)
 8000806:	4c0c      	ldr	r4, [pc, #48]	; (8000838 <__libc_init_array+0x44>)
 8000808:	f000 fc94 	bl	8001134 <_init>
 800080c:	1b64      	subs	r4, r4, r5
 800080e:	10a4      	asrs	r4, r4, #2
 8000810:	2600      	movs	r6, #0
 8000812:	42a6      	cmp	r6, r4
 8000814:	d105      	bne.n	8000822 <__libc_init_array+0x2e>
 8000816:	bd70      	pop	{r4, r5, r6, pc}
 8000818:	f855 3b04 	ldr.w	r3, [r5], #4
 800081c:	4798      	blx	r3
 800081e:	3601      	adds	r6, #1
 8000820:	e7ee      	b.n	8000800 <__libc_init_array+0xc>
 8000822:	f855 3b04 	ldr.w	r3, [r5], #4
 8000826:	4798      	blx	r3
 8000828:	3601      	adds	r6, #1
 800082a:	e7f2      	b.n	8000812 <__libc_init_array+0x1e>
 800082c:	080011b8 	.word	0x080011b8
 8000830:	080011b8 	.word	0x080011b8
 8000834:	080011b8 	.word	0x080011b8
 8000838:	080011bc 	.word	0x080011bc

0800083c <memset>:
 800083c:	4402      	add	r2, r0
 800083e:	4603      	mov	r3, r0
 8000840:	4293      	cmp	r3, r2
 8000842:	d100      	bne.n	8000846 <memset+0xa>
 8000844:	4770      	bx	lr
 8000846:	f803 1b01 	strb.w	r1, [r3], #1
 800084a:	e7f9      	b.n	8000840 <memset+0x4>

0800084c <siprintf>:
 800084c:	b40e      	push	{r1, r2, r3}
 800084e:	b500      	push	{lr}
 8000850:	b09c      	sub	sp, #112	; 0x70
 8000852:	ab1d      	add	r3, sp, #116	; 0x74
 8000854:	9002      	str	r0, [sp, #8]
 8000856:	9006      	str	r0, [sp, #24]
 8000858:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800085c:	4809      	ldr	r0, [pc, #36]	; (8000884 <siprintf+0x38>)
 800085e:	9107      	str	r1, [sp, #28]
 8000860:	9104      	str	r1, [sp, #16]
 8000862:	4909      	ldr	r1, [pc, #36]	; (8000888 <siprintf+0x3c>)
 8000864:	f853 2b04 	ldr.w	r2, [r3], #4
 8000868:	9105      	str	r1, [sp, #20]
 800086a:	6800      	ldr	r0, [r0, #0]
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	a902      	add	r1, sp, #8
 8000870:	f000 f868 	bl	8000944 <_svfiprintf_r>
 8000874:	9b02      	ldr	r3, [sp, #8]
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	b01c      	add	sp, #112	; 0x70
 800087c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000880:	b003      	add	sp, #12
 8000882:	4770      	bx	lr
 8000884:	20000004 	.word	0x20000004
 8000888:	ffff0208 	.word	0xffff0208

0800088c <__retarget_lock_acquire_recursive>:
 800088c:	4770      	bx	lr

0800088e <__retarget_lock_release_recursive>:
 800088e:	4770      	bx	lr

08000890 <__ssputs_r>:
 8000890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000894:	688e      	ldr	r6, [r1, #8]
 8000896:	461f      	mov	r7, r3
 8000898:	42be      	cmp	r6, r7
 800089a:	680b      	ldr	r3, [r1, #0]
 800089c:	4682      	mov	sl, r0
 800089e:	460c      	mov	r4, r1
 80008a0:	4690      	mov	r8, r2
 80008a2:	d82c      	bhi.n	80008fe <__ssputs_r+0x6e>
 80008a4:	898a      	ldrh	r2, [r1, #12]
 80008a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80008aa:	d026      	beq.n	80008fa <__ssputs_r+0x6a>
 80008ac:	6965      	ldr	r5, [r4, #20]
 80008ae:	6909      	ldr	r1, [r1, #16]
 80008b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80008b4:	eba3 0901 	sub.w	r9, r3, r1
 80008b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80008bc:	1c7b      	adds	r3, r7, #1
 80008be:	444b      	add	r3, r9
 80008c0:	106d      	asrs	r5, r5, #1
 80008c2:	429d      	cmp	r5, r3
 80008c4:	bf38      	it	cc
 80008c6:	461d      	movcc	r5, r3
 80008c8:	0553      	lsls	r3, r2, #21
 80008ca:	d527      	bpl.n	800091c <__ssputs_r+0x8c>
 80008cc:	4629      	mov	r1, r5
 80008ce:	f000 fb5b 	bl	8000f88 <_malloc_r>
 80008d2:	4606      	mov	r6, r0
 80008d4:	b360      	cbz	r0, 8000930 <__ssputs_r+0xa0>
 80008d6:	6921      	ldr	r1, [r4, #16]
 80008d8:	464a      	mov	r2, r9
 80008da:	f000 fac1 	bl	8000e60 <memcpy>
 80008de:	89a3      	ldrh	r3, [r4, #12]
 80008e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	81a3      	strh	r3, [r4, #12]
 80008ea:	6126      	str	r6, [r4, #16]
 80008ec:	6165      	str	r5, [r4, #20]
 80008ee:	444e      	add	r6, r9
 80008f0:	eba5 0509 	sub.w	r5, r5, r9
 80008f4:	6026      	str	r6, [r4, #0]
 80008f6:	60a5      	str	r5, [r4, #8]
 80008f8:	463e      	mov	r6, r7
 80008fa:	42be      	cmp	r6, r7
 80008fc:	d900      	bls.n	8000900 <__ssputs_r+0x70>
 80008fe:	463e      	mov	r6, r7
 8000900:	6820      	ldr	r0, [r4, #0]
 8000902:	4632      	mov	r2, r6
 8000904:	4641      	mov	r1, r8
 8000906:	f000 fab9 	bl	8000e7c <memmove>
 800090a:	68a3      	ldr	r3, [r4, #8]
 800090c:	1b9b      	subs	r3, r3, r6
 800090e:	60a3      	str	r3, [r4, #8]
 8000910:	6823      	ldr	r3, [r4, #0]
 8000912:	4433      	add	r3, r6
 8000914:	6023      	str	r3, [r4, #0]
 8000916:	2000      	movs	r0, #0
 8000918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091c:	462a      	mov	r2, r5
 800091e:	f000 fba7 	bl	8001070 <_realloc_r>
 8000922:	4606      	mov	r6, r0
 8000924:	2800      	cmp	r0, #0
 8000926:	d1e0      	bne.n	80008ea <__ssputs_r+0x5a>
 8000928:	6921      	ldr	r1, [r4, #16]
 800092a:	4650      	mov	r0, sl
 800092c:	f000 fac0 	bl	8000eb0 <_free_r>
 8000930:	230c      	movs	r3, #12
 8000932:	f8ca 3000 	str.w	r3, [sl]
 8000936:	89a3      	ldrh	r3, [r4, #12]
 8000938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800093c:	81a3      	strh	r3, [r4, #12]
 800093e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000942:	e7e9      	b.n	8000918 <__ssputs_r+0x88>

08000944 <_svfiprintf_r>:
 8000944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000948:	4698      	mov	r8, r3
 800094a:	898b      	ldrh	r3, [r1, #12]
 800094c:	061b      	lsls	r3, r3, #24
 800094e:	b09d      	sub	sp, #116	; 0x74
 8000950:	4607      	mov	r7, r0
 8000952:	460d      	mov	r5, r1
 8000954:	4614      	mov	r4, r2
 8000956:	d50e      	bpl.n	8000976 <_svfiprintf_r+0x32>
 8000958:	690b      	ldr	r3, [r1, #16]
 800095a:	b963      	cbnz	r3, 8000976 <_svfiprintf_r+0x32>
 800095c:	2140      	movs	r1, #64	; 0x40
 800095e:	f000 fb13 	bl	8000f88 <_malloc_r>
 8000962:	6028      	str	r0, [r5, #0]
 8000964:	6128      	str	r0, [r5, #16]
 8000966:	b920      	cbnz	r0, 8000972 <_svfiprintf_r+0x2e>
 8000968:	230c      	movs	r3, #12
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000970:	e0d0      	b.n	8000b14 <_svfiprintf_r+0x1d0>
 8000972:	2340      	movs	r3, #64	; 0x40
 8000974:	616b      	str	r3, [r5, #20]
 8000976:	2300      	movs	r3, #0
 8000978:	9309      	str	r3, [sp, #36]	; 0x24
 800097a:	2320      	movs	r3, #32
 800097c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000980:	f8cd 800c 	str.w	r8, [sp, #12]
 8000984:	2330      	movs	r3, #48	; 0x30
 8000986:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000b2c <_svfiprintf_r+0x1e8>
 800098a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800098e:	f04f 0901 	mov.w	r9, #1
 8000992:	4623      	mov	r3, r4
 8000994:	469a      	mov	sl, r3
 8000996:	f813 2b01 	ldrb.w	r2, [r3], #1
 800099a:	b10a      	cbz	r2, 80009a0 <_svfiprintf_r+0x5c>
 800099c:	2a25      	cmp	r2, #37	; 0x25
 800099e:	d1f9      	bne.n	8000994 <_svfiprintf_r+0x50>
 80009a0:	ebba 0b04 	subs.w	fp, sl, r4
 80009a4:	d00b      	beq.n	80009be <_svfiprintf_r+0x7a>
 80009a6:	465b      	mov	r3, fp
 80009a8:	4622      	mov	r2, r4
 80009aa:	4629      	mov	r1, r5
 80009ac:	4638      	mov	r0, r7
 80009ae:	f7ff ff6f 	bl	8000890 <__ssputs_r>
 80009b2:	3001      	adds	r0, #1
 80009b4:	f000 80a9 	beq.w	8000b0a <_svfiprintf_r+0x1c6>
 80009b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80009ba:	445a      	add	r2, fp
 80009bc:	9209      	str	r2, [sp, #36]	; 0x24
 80009be:	f89a 3000 	ldrb.w	r3, [sl]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f000 80a1 	beq.w	8000b0a <_svfiprintf_r+0x1c6>
 80009c8:	2300      	movs	r3, #0
 80009ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80009d2:	f10a 0a01 	add.w	sl, sl, #1
 80009d6:	9304      	str	r3, [sp, #16]
 80009d8:	9307      	str	r3, [sp, #28]
 80009da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80009de:	931a      	str	r3, [sp, #104]	; 0x68
 80009e0:	4654      	mov	r4, sl
 80009e2:	2205      	movs	r2, #5
 80009e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009e8:	4850      	ldr	r0, [pc, #320]	; (8000b2c <_svfiprintf_r+0x1e8>)
 80009ea:	f7ff fbe1 	bl	80001b0 <memchr>
 80009ee:	9a04      	ldr	r2, [sp, #16]
 80009f0:	b9d8      	cbnz	r0, 8000a2a <_svfiprintf_r+0xe6>
 80009f2:	06d0      	lsls	r0, r2, #27
 80009f4:	bf44      	itt	mi
 80009f6:	2320      	movmi	r3, #32
 80009f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80009fc:	0711      	lsls	r1, r2, #28
 80009fe:	bf44      	itt	mi
 8000a00:	232b      	movmi	r3, #43	; 0x2b
 8000a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000a06:	f89a 3000 	ldrb.w	r3, [sl]
 8000a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8000a0c:	d015      	beq.n	8000a3a <_svfiprintf_r+0xf6>
 8000a0e:	9a07      	ldr	r2, [sp, #28]
 8000a10:	4654      	mov	r4, sl
 8000a12:	2000      	movs	r0, #0
 8000a14:	f04f 0c0a 	mov.w	ip, #10
 8000a18:	4621      	mov	r1, r4
 8000a1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a1e:	3b30      	subs	r3, #48	; 0x30
 8000a20:	2b09      	cmp	r3, #9
 8000a22:	d94d      	bls.n	8000ac0 <_svfiprintf_r+0x17c>
 8000a24:	b1b0      	cbz	r0, 8000a54 <_svfiprintf_r+0x110>
 8000a26:	9207      	str	r2, [sp, #28]
 8000a28:	e014      	b.n	8000a54 <_svfiprintf_r+0x110>
 8000a2a:	eba0 0308 	sub.w	r3, r0, r8
 8000a2e:	fa09 f303 	lsl.w	r3, r9, r3
 8000a32:	4313      	orrs	r3, r2
 8000a34:	9304      	str	r3, [sp, #16]
 8000a36:	46a2      	mov	sl, r4
 8000a38:	e7d2      	b.n	80009e0 <_svfiprintf_r+0x9c>
 8000a3a:	9b03      	ldr	r3, [sp, #12]
 8000a3c:	1d19      	adds	r1, r3, #4
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	9103      	str	r1, [sp, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	bfbb      	ittet	lt
 8000a46:	425b      	neglt	r3, r3
 8000a48:	f042 0202 	orrlt.w	r2, r2, #2
 8000a4c:	9307      	strge	r3, [sp, #28]
 8000a4e:	9307      	strlt	r3, [sp, #28]
 8000a50:	bfb8      	it	lt
 8000a52:	9204      	strlt	r2, [sp, #16]
 8000a54:	7823      	ldrb	r3, [r4, #0]
 8000a56:	2b2e      	cmp	r3, #46	; 0x2e
 8000a58:	d10c      	bne.n	8000a74 <_svfiprintf_r+0x130>
 8000a5a:	7863      	ldrb	r3, [r4, #1]
 8000a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8000a5e:	d134      	bne.n	8000aca <_svfiprintf_r+0x186>
 8000a60:	9b03      	ldr	r3, [sp, #12]
 8000a62:	1d1a      	adds	r2, r3, #4
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	9203      	str	r2, [sp, #12]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	bfb8      	it	lt
 8000a6c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000a70:	3402      	adds	r4, #2
 8000a72:	9305      	str	r3, [sp, #20]
 8000a74:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8000b3c <_svfiprintf_r+0x1f8>
 8000a78:	7821      	ldrb	r1, [r4, #0]
 8000a7a:	2203      	movs	r2, #3
 8000a7c:	4650      	mov	r0, sl
 8000a7e:	f7ff fb97 	bl	80001b0 <memchr>
 8000a82:	b138      	cbz	r0, 8000a94 <_svfiprintf_r+0x150>
 8000a84:	9b04      	ldr	r3, [sp, #16]
 8000a86:	eba0 000a 	sub.w	r0, r0, sl
 8000a8a:	2240      	movs	r2, #64	; 0x40
 8000a8c:	4082      	lsls	r2, r0
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	3401      	adds	r4, #1
 8000a92:	9304      	str	r3, [sp, #16]
 8000a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a98:	4825      	ldr	r0, [pc, #148]	; (8000b30 <_svfiprintf_r+0x1ec>)
 8000a9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000a9e:	2206      	movs	r2, #6
 8000aa0:	f7ff fb86 	bl	80001b0 <memchr>
 8000aa4:	2800      	cmp	r0, #0
 8000aa6:	d038      	beq.n	8000b1a <_svfiprintf_r+0x1d6>
 8000aa8:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <_svfiprintf_r+0x1f0>)
 8000aaa:	bb1b      	cbnz	r3, 8000af4 <_svfiprintf_r+0x1b0>
 8000aac:	9b03      	ldr	r3, [sp, #12]
 8000aae:	3307      	adds	r3, #7
 8000ab0:	f023 0307 	bic.w	r3, r3, #7
 8000ab4:	3308      	adds	r3, #8
 8000ab6:	9303      	str	r3, [sp, #12]
 8000ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000aba:	4433      	add	r3, r6
 8000abc:	9309      	str	r3, [sp, #36]	; 0x24
 8000abe:	e768      	b.n	8000992 <_svfiprintf_r+0x4e>
 8000ac0:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ac4:	460c      	mov	r4, r1
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	e7a6      	b.n	8000a18 <_svfiprintf_r+0xd4>
 8000aca:	2300      	movs	r3, #0
 8000acc:	3401      	adds	r4, #1
 8000ace:	9305      	str	r3, [sp, #20]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f04f 0c0a 	mov.w	ip, #10
 8000ad6:	4620      	mov	r0, r4
 8000ad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000adc:	3a30      	subs	r2, #48	; 0x30
 8000ade:	2a09      	cmp	r2, #9
 8000ae0:	d903      	bls.n	8000aea <_svfiprintf_r+0x1a6>
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d0c6      	beq.n	8000a74 <_svfiprintf_r+0x130>
 8000ae6:	9105      	str	r1, [sp, #20]
 8000ae8:	e7c4      	b.n	8000a74 <_svfiprintf_r+0x130>
 8000aea:	fb0c 2101 	mla	r1, ip, r1, r2
 8000aee:	4604      	mov	r4, r0
 8000af0:	2301      	movs	r3, #1
 8000af2:	e7f0      	b.n	8000ad6 <_svfiprintf_r+0x192>
 8000af4:	ab03      	add	r3, sp, #12
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	462a      	mov	r2, r5
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <_svfiprintf_r+0x1f4>)
 8000afc:	a904      	add	r1, sp, #16
 8000afe:	4638      	mov	r0, r7
 8000b00:	f3af 8000 	nop.w
 8000b04:	1c42      	adds	r2, r0, #1
 8000b06:	4606      	mov	r6, r0
 8000b08:	d1d6      	bne.n	8000ab8 <_svfiprintf_r+0x174>
 8000b0a:	89ab      	ldrh	r3, [r5, #12]
 8000b0c:	065b      	lsls	r3, r3, #25
 8000b0e:	f53f af2d 	bmi.w	800096c <_svfiprintf_r+0x28>
 8000b12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000b14:	b01d      	add	sp, #116	; 0x74
 8000b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b1a:	ab03      	add	r3, sp, #12
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	462a      	mov	r2, r5
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <_svfiprintf_r+0x1f4>)
 8000b22:	a904      	add	r1, sp, #16
 8000b24:	4638      	mov	r0, r7
 8000b26:	f000 f879 	bl	8000c1c <_printf_i>
 8000b2a:	e7eb      	b.n	8000b04 <_svfiprintf_r+0x1c0>
 8000b2c:	08001185 	.word	0x08001185
 8000b30:	0800118f 	.word	0x0800118f
 8000b34:	00000000 	.word	0x00000000
 8000b38:	08000891 	.word	0x08000891
 8000b3c:	0800118b 	.word	0x0800118b

08000b40 <_printf_common>:
 8000b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b44:	4616      	mov	r6, r2
 8000b46:	4699      	mov	r9, r3
 8000b48:	688a      	ldr	r2, [r1, #8]
 8000b4a:	690b      	ldr	r3, [r1, #16]
 8000b4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000b50:	4293      	cmp	r3, r2
 8000b52:	bfb8      	it	lt
 8000b54:	4613      	movlt	r3, r2
 8000b56:	6033      	str	r3, [r6, #0]
 8000b58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000b5c:	4607      	mov	r7, r0
 8000b5e:	460c      	mov	r4, r1
 8000b60:	b10a      	cbz	r2, 8000b66 <_printf_common+0x26>
 8000b62:	3301      	adds	r3, #1
 8000b64:	6033      	str	r3, [r6, #0]
 8000b66:	6823      	ldr	r3, [r4, #0]
 8000b68:	0699      	lsls	r1, r3, #26
 8000b6a:	bf42      	ittt	mi
 8000b6c:	6833      	ldrmi	r3, [r6, #0]
 8000b6e:	3302      	addmi	r3, #2
 8000b70:	6033      	strmi	r3, [r6, #0]
 8000b72:	6825      	ldr	r5, [r4, #0]
 8000b74:	f015 0506 	ands.w	r5, r5, #6
 8000b78:	d106      	bne.n	8000b88 <_printf_common+0x48>
 8000b7a:	f104 0a19 	add.w	sl, r4, #25
 8000b7e:	68e3      	ldr	r3, [r4, #12]
 8000b80:	6832      	ldr	r2, [r6, #0]
 8000b82:	1a9b      	subs	r3, r3, r2
 8000b84:	42ab      	cmp	r3, r5
 8000b86:	dc26      	bgt.n	8000bd6 <_printf_common+0x96>
 8000b88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000b8c:	1e13      	subs	r3, r2, #0
 8000b8e:	6822      	ldr	r2, [r4, #0]
 8000b90:	bf18      	it	ne
 8000b92:	2301      	movne	r3, #1
 8000b94:	0692      	lsls	r2, r2, #26
 8000b96:	d42b      	bmi.n	8000bf0 <_printf_common+0xb0>
 8000b98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000b9c:	4649      	mov	r1, r9
 8000b9e:	4638      	mov	r0, r7
 8000ba0:	47c0      	blx	r8
 8000ba2:	3001      	adds	r0, #1
 8000ba4:	d01e      	beq.n	8000be4 <_printf_common+0xa4>
 8000ba6:	6823      	ldr	r3, [r4, #0]
 8000ba8:	6922      	ldr	r2, [r4, #16]
 8000baa:	f003 0306 	and.w	r3, r3, #6
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	bf02      	ittt	eq
 8000bb2:	68e5      	ldreq	r5, [r4, #12]
 8000bb4:	6833      	ldreq	r3, [r6, #0]
 8000bb6:	1aed      	subeq	r5, r5, r3
 8000bb8:	68a3      	ldr	r3, [r4, #8]
 8000bba:	bf0c      	ite	eq
 8000bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000bc0:	2500      	movne	r5, #0
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	bfc4      	itt	gt
 8000bc6:	1a9b      	subgt	r3, r3, r2
 8000bc8:	18ed      	addgt	r5, r5, r3
 8000bca:	2600      	movs	r6, #0
 8000bcc:	341a      	adds	r4, #26
 8000bce:	42b5      	cmp	r5, r6
 8000bd0:	d11a      	bne.n	8000c08 <_printf_common+0xc8>
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	e008      	b.n	8000be8 <_printf_common+0xa8>
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	4652      	mov	r2, sl
 8000bda:	4649      	mov	r1, r9
 8000bdc:	4638      	mov	r0, r7
 8000bde:	47c0      	blx	r8
 8000be0:	3001      	adds	r0, #1
 8000be2:	d103      	bne.n	8000bec <_printf_common+0xac>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bec:	3501      	adds	r5, #1
 8000bee:	e7c6      	b.n	8000b7e <_printf_common+0x3e>
 8000bf0:	18e1      	adds	r1, r4, r3
 8000bf2:	1c5a      	adds	r2, r3, #1
 8000bf4:	2030      	movs	r0, #48	; 0x30
 8000bf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000bfa:	4422      	add	r2, r4
 8000bfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000c00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000c04:	3302      	adds	r3, #2
 8000c06:	e7c7      	b.n	8000b98 <_printf_common+0x58>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	4622      	mov	r2, r4
 8000c0c:	4649      	mov	r1, r9
 8000c0e:	4638      	mov	r0, r7
 8000c10:	47c0      	blx	r8
 8000c12:	3001      	adds	r0, #1
 8000c14:	d0e6      	beq.n	8000be4 <_printf_common+0xa4>
 8000c16:	3601      	adds	r6, #1
 8000c18:	e7d9      	b.n	8000bce <_printf_common+0x8e>
	...

08000c1c <_printf_i>:
 8000c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c20:	7e0f      	ldrb	r7, [r1, #24]
 8000c22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000c24:	2f78      	cmp	r7, #120	; 0x78
 8000c26:	4691      	mov	r9, r2
 8000c28:	4680      	mov	r8, r0
 8000c2a:	460c      	mov	r4, r1
 8000c2c:	469a      	mov	sl, r3
 8000c2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000c32:	d807      	bhi.n	8000c44 <_printf_i+0x28>
 8000c34:	2f62      	cmp	r7, #98	; 0x62
 8000c36:	d80a      	bhi.n	8000c4e <_printf_i+0x32>
 8000c38:	2f00      	cmp	r7, #0
 8000c3a:	f000 80d4 	beq.w	8000de6 <_printf_i+0x1ca>
 8000c3e:	2f58      	cmp	r7, #88	; 0x58
 8000c40:	f000 80c0 	beq.w	8000dc4 <_printf_i+0x1a8>
 8000c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000c48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000c4c:	e03a      	b.n	8000cc4 <_printf_i+0xa8>
 8000c4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000c52:	2b15      	cmp	r3, #21
 8000c54:	d8f6      	bhi.n	8000c44 <_printf_i+0x28>
 8000c56:	a101      	add	r1, pc, #4	; (adr r1, 8000c5c <_printf_i+0x40>)
 8000c58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c5c:	08000cb5 	.word	0x08000cb5
 8000c60:	08000cc9 	.word	0x08000cc9
 8000c64:	08000c45 	.word	0x08000c45
 8000c68:	08000c45 	.word	0x08000c45
 8000c6c:	08000c45 	.word	0x08000c45
 8000c70:	08000c45 	.word	0x08000c45
 8000c74:	08000cc9 	.word	0x08000cc9
 8000c78:	08000c45 	.word	0x08000c45
 8000c7c:	08000c45 	.word	0x08000c45
 8000c80:	08000c45 	.word	0x08000c45
 8000c84:	08000c45 	.word	0x08000c45
 8000c88:	08000dcd 	.word	0x08000dcd
 8000c8c:	08000cf5 	.word	0x08000cf5
 8000c90:	08000d87 	.word	0x08000d87
 8000c94:	08000c45 	.word	0x08000c45
 8000c98:	08000c45 	.word	0x08000c45
 8000c9c:	08000def 	.word	0x08000def
 8000ca0:	08000c45 	.word	0x08000c45
 8000ca4:	08000cf5 	.word	0x08000cf5
 8000ca8:	08000c45 	.word	0x08000c45
 8000cac:	08000c45 	.word	0x08000c45
 8000cb0:	08000d8f 	.word	0x08000d8f
 8000cb4:	682b      	ldr	r3, [r5, #0]
 8000cb6:	1d1a      	adds	r2, r3, #4
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	602a      	str	r2, [r5, #0]
 8000cbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000cc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e09f      	b.n	8000e08 <_printf_i+0x1ec>
 8000cc8:	6820      	ldr	r0, [r4, #0]
 8000cca:	682b      	ldr	r3, [r5, #0]
 8000ccc:	0607      	lsls	r7, r0, #24
 8000cce:	f103 0104 	add.w	r1, r3, #4
 8000cd2:	6029      	str	r1, [r5, #0]
 8000cd4:	d501      	bpl.n	8000cda <_printf_i+0xbe>
 8000cd6:	681e      	ldr	r6, [r3, #0]
 8000cd8:	e003      	b.n	8000ce2 <_printf_i+0xc6>
 8000cda:	0646      	lsls	r6, r0, #25
 8000cdc:	d5fb      	bpl.n	8000cd6 <_printf_i+0xba>
 8000cde:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	da03      	bge.n	8000cee <_printf_i+0xd2>
 8000ce6:	232d      	movs	r3, #45	; 0x2d
 8000ce8:	4276      	negs	r6, r6
 8000cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000cee:	485a      	ldr	r0, [pc, #360]	; (8000e58 <_printf_i+0x23c>)
 8000cf0:	230a      	movs	r3, #10
 8000cf2:	e012      	b.n	8000d1a <_printf_i+0xfe>
 8000cf4:	682b      	ldr	r3, [r5, #0]
 8000cf6:	6820      	ldr	r0, [r4, #0]
 8000cf8:	1d19      	adds	r1, r3, #4
 8000cfa:	6029      	str	r1, [r5, #0]
 8000cfc:	0605      	lsls	r5, r0, #24
 8000cfe:	d501      	bpl.n	8000d04 <_printf_i+0xe8>
 8000d00:	681e      	ldr	r6, [r3, #0]
 8000d02:	e002      	b.n	8000d0a <_printf_i+0xee>
 8000d04:	0641      	lsls	r1, r0, #25
 8000d06:	d5fb      	bpl.n	8000d00 <_printf_i+0xe4>
 8000d08:	881e      	ldrh	r6, [r3, #0]
 8000d0a:	4853      	ldr	r0, [pc, #332]	; (8000e58 <_printf_i+0x23c>)
 8000d0c:	2f6f      	cmp	r7, #111	; 0x6f
 8000d0e:	bf0c      	ite	eq
 8000d10:	2308      	moveq	r3, #8
 8000d12:	230a      	movne	r3, #10
 8000d14:	2100      	movs	r1, #0
 8000d16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000d1a:	6865      	ldr	r5, [r4, #4]
 8000d1c:	60a5      	str	r5, [r4, #8]
 8000d1e:	2d00      	cmp	r5, #0
 8000d20:	bfa2      	ittt	ge
 8000d22:	6821      	ldrge	r1, [r4, #0]
 8000d24:	f021 0104 	bicge.w	r1, r1, #4
 8000d28:	6021      	strge	r1, [r4, #0]
 8000d2a:	b90e      	cbnz	r6, 8000d30 <_printf_i+0x114>
 8000d2c:	2d00      	cmp	r5, #0
 8000d2e:	d04b      	beq.n	8000dc8 <_printf_i+0x1ac>
 8000d30:	4615      	mov	r5, r2
 8000d32:	fbb6 f1f3 	udiv	r1, r6, r3
 8000d36:	fb03 6711 	mls	r7, r3, r1, r6
 8000d3a:	5dc7      	ldrb	r7, [r0, r7]
 8000d3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000d40:	4637      	mov	r7, r6
 8000d42:	42bb      	cmp	r3, r7
 8000d44:	460e      	mov	r6, r1
 8000d46:	d9f4      	bls.n	8000d32 <_printf_i+0x116>
 8000d48:	2b08      	cmp	r3, #8
 8000d4a:	d10b      	bne.n	8000d64 <_printf_i+0x148>
 8000d4c:	6823      	ldr	r3, [r4, #0]
 8000d4e:	07de      	lsls	r6, r3, #31
 8000d50:	d508      	bpl.n	8000d64 <_printf_i+0x148>
 8000d52:	6923      	ldr	r3, [r4, #16]
 8000d54:	6861      	ldr	r1, [r4, #4]
 8000d56:	4299      	cmp	r1, r3
 8000d58:	bfde      	ittt	le
 8000d5a:	2330      	movle	r3, #48	; 0x30
 8000d5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000d60:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8000d64:	1b52      	subs	r2, r2, r5
 8000d66:	6122      	str	r2, [r4, #16]
 8000d68:	f8cd a000 	str.w	sl, [sp]
 8000d6c:	464b      	mov	r3, r9
 8000d6e:	aa03      	add	r2, sp, #12
 8000d70:	4621      	mov	r1, r4
 8000d72:	4640      	mov	r0, r8
 8000d74:	f7ff fee4 	bl	8000b40 <_printf_common>
 8000d78:	3001      	adds	r0, #1
 8000d7a:	d14a      	bne.n	8000e12 <_printf_i+0x1f6>
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d80:	b004      	add	sp, #16
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	f043 0320 	orr.w	r3, r3, #32
 8000d8c:	6023      	str	r3, [r4, #0]
 8000d8e:	4833      	ldr	r0, [pc, #204]	; (8000e5c <_printf_i+0x240>)
 8000d90:	2778      	movs	r7, #120	; 0x78
 8000d92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000d96:	6823      	ldr	r3, [r4, #0]
 8000d98:	6829      	ldr	r1, [r5, #0]
 8000d9a:	061f      	lsls	r7, r3, #24
 8000d9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8000da0:	d402      	bmi.n	8000da8 <_printf_i+0x18c>
 8000da2:	065f      	lsls	r7, r3, #25
 8000da4:	bf48      	it	mi
 8000da6:	b2b6      	uxthmi	r6, r6
 8000da8:	07df      	lsls	r7, r3, #31
 8000daa:	bf48      	it	mi
 8000dac:	f043 0320 	orrmi.w	r3, r3, #32
 8000db0:	6029      	str	r1, [r5, #0]
 8000db2:	bf48      	it	mi
 8000db4:	6023      	strmi	r3, [r4, #0]
 8000db6:	b91e      	cbnz	r6, 8000dc0 <_printf_i+0x1a4>
 8000db8:	6823      	ldr	r3, [r4, #0]
 8000dba:	f023 0320 	bic.w	r3, r3, #32
 8000dbe:	6023      	str	r3, [r4, #0]
 8000dc0:	2310      	movs	r3, #16
 8000dc2:	e7a7      	b.n	8000d14 <_printf_i+0xf8>
 8000dc4:	4824      	ldr	r0, [pc, #144]	; (8000e58 <_printf_i+0x23c>)
 8000dc6:	e7e4      	b.n	8000d92 <_printf_i+0x176>
 8000dc8:	4615      	mov	r5, r2
 8000dca:	e7bd      	b.n	8000d48 <_printf_i+0x12c>
 8000dcc:	682b      	ldr	r3, [r5, #0]
 8000dce:	6826      	ldr	r6, [r4, #0]
 8000dd0:	6961      	ldr	r1, [r4, #20]
 8000dd2:	1d18      	adds	r0, r3, #4
 8000dd4:	6028      	str	r0, [r5, #0]
 8000dd6:	0635      	lsls	r5, r6, #24
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	d501      	bpl.n	8000de0 <_printf_i+0x1c4>
 8000ddc:	6019      	str	r1, [r3, #0]
 8000dde:	e002      	b.n	8000de6 <_printf_i+0x1ca>
 8000de0:	0670      	lsls	r0, r6, #25
 8000de2:	d5fb      	bpl.n	8000ddc <_printf_i+0x1c0>
 8000de4:	8019      	strh	r1, [r3, #0]
 8000de6:	2300      	movs	r3, #0
 8000de8:	6123      	str	r3, [r4, #16]
 8000dea:	4615      	mov	r5, r2
 8000dec:	e7bc      	b.n	8000d68 <_printf_i+0x14c>
 8000dee:	682b      	ldr	r3, [r5, #0]
 8000df0:	1d1a      	adds	r2, r3, #4
 8000df2:	602a      	str	r2, [r5, #0]
 8000df4:	681d      	ldr	r5, [r3, #0]
 8000df6:	6862      	ldr	r2, [r4, #4]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4628      	mov	r0, r5
 8000dfc:	f7ff f9d8 	bl	80001b0 <memchr>
 8000e00:	b108      	cbz	r0, 8000e06 <_printf_i+0x1ea>
 8000e02:	1b40      	subs	r0, r0, r5
 8000e04:	6060      	str	r0, [r4, #4]
 8000e06:	6863      	ldr	r3, [r4, #4]
 8000e08:	6123      	str	r3, [r4, #16]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e10:	e7aa      	b.n	8000d68 <_printf_i+0x14c>
 8000e12:	6923      	ldr	r3, [r4, #16]
 8000e14:	462a      	mov	r2, r5
 8000e16:	4649      	mov	r1, r9
 8000e18:	4640      	mov	r0, r8
 8000e1a:	47d0      	blx	sl
 8000e1c:	3001      	adds	r0, #1
 8000e1e:	d0ad      	beq.n	8000d7c <_printf_i+0x160>
 8000e20:	6823      	ldr	r3, [r4, #0]
 8000e22:	079b      	lsls	r3, r3, #30
 8000e24:	d413      	bmi.n	8000e4e <_printf_i+0x232>
 8000e26:	68e0      	ldr	r0, [r4, #12]
 8000e28:	9b03      	ldr	r3, [sp, #12]
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	bfb8      	it	lt
 8000e2e:	4618      	movlt	r0, r3
 8000e30:	e7a6      	b.n	8000d80 <_printf_i+0x164>
 8000e32:	2301      	movs	r3, #1
 8000e34:	4632      	mov	r2, r6
 8000e36:	4649      	mov	r1, r9
 8000e38:	4640      	mov	r0, r8
 8000e3a:	47d0      	blx	sl
 8000e3c:	3001      	adds	r0, #1
 8000e3e:	d09d      	beq.n	8000d7c <_printf_i+0x160>
 8000e40:	3501      	adds	r5, #1
 8000e42:	68e3      	ldr	r3, [r4, #12]
 8000e44:	9903      	ldr	r1, [sp, #12]
 8000e46:	1a5b      	subs	r3, r3, r1
 8000e48:	42ab      	cmp	r3, r5
 8000e4a:	dcf2      	bgt.n	8000e32 <_printf_i+0x216>
 8000e4c:	e7eb      	b.n	8000e26 <_printf_i+0x20a>
 8000e4e:	2500      	movs	r5, #0
 8000e50:	f104 0619 	add.w	r6, r4, #25
 8000e54:	e7f5      	b.n	8000e42 <_printf_i+0x226>
 8000e56:	bf00      	nop
 8000e58:	08001196 	.word	0x08001196
 8000e5c:	080011a7 	.word	0x080011a7

08000e60 <memcpy>:
 8000e60:	440a      	add	r2, r1
 8000e62:	4291      	cmp	r1, r2
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e68:	d100      	bne.n	8000e6c <memcpy+0xc>
 8000e6a:	4770      	bx	lr
 8000e6c:	b510      	push	{r4, lr}
 8000e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000e72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000e76:	4291      	cmp	r1, r2
 8000e78:	d1f9      	bne.n	8000e6e <memcpy+0xe>
 8000e7a:	bd10      	pop	{r4, pc}

08000e7c <memmove>:
 8000e7c:	4288      	cmp	r0, r1
 8000e7e:	b510      	push	{r4, lr}
 8000e80:	eb01 0402 	add.w	r4, r1, r2
 8000e84:	d902      	bls.n	8000e8c <memmove+0x10>
 8000e86:	4284      	cmp	r4, r0
 8000e88:	4623      	mov	r3, r4
 8000e8a:	d807      	bhi.n	8000e9c <memmove+0x20>
 8000e8c:	1e43      	subs	r3, r0, #1
 8000e8e:	42a1      	cmp	r1, r4
 8000e90:	d008      	beq.n	8000ea4 <memmove+0x28>
 8000e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000e96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000e9a:	e7f8      	b.n	8000e8e <memmove+0x12>
 8000e9c:	4402      	add	r2, r0
 8000e9e:	4601      	mov	r1, r0
 8000ea0:	428a      	cmp	r2, r1
 8000ea2:	d100      	bne.n	8000ea6 <memmove+0x2a>
 8000ea4:	bd10      	pop	{r4, pc}
 8000ea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000eaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000eae:	e7f7      	b.n	8000ea0 <memmove+0x24>

08000eb0 <_free_r>:
 8000eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000eb2:	2900      	cmp	r1, #0
 8000eb4:	d044      	beq.n	8000f40 <_free_r+0x90>
 8000eb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000eba:	9001      	str	r0, [sp, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f1a1 0404 	sub.w	r4, r1, #4
 8000ec2:	bfb8      	it	lt
 8000ec4:	18e4      	addlt	r4, r4, r3
 8000ec6:	f000 f913 	bl	80010f0 <__malloc_lock>
 8000eca:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <_free_r+0x94>)
 8000ecc:	9801      	ldr	r0, [sp, #4]
 8000ece:	6813      	ldr	r3, [r2, #0]
 8000ed0:	b933      	cbnz	r3, 8000ee0 <_free_r+0x30>
 8000ed2:	6063      	str	r3, [r4, #4]
 8000ed4:	6014      	str	r4, [r2, #0]
 8000ed6:	b003      	add	sp, #12
 8000ed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000edc:	f000 b90e 	b.w	80010fc <__malloc_unlock>
 8000ee0:	42a3      	cmp	r3, r4
 8000ee2:	d908      	bls.n	8000ef6 <_free_r+0x46>
 8000ee4:	6825      	ldr	r5, [r4, #0]
 8000ee6:	1961      	adds	r1, r4, r5
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	bf01      	itttt	eq
 8000eec:	6819      	ldreq	r1, [r3, #0]
 8000eee:	685b      	ldreq	r3, [r3, #4]
 8000ef0:	1949      	addeq	r1, r1, r5
 8000ef2:	6021      	streq	r1, [r4, #0]
 8000ef4:	e7ed      	b.n	8000ed2 <_free_r+0x22>
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	b10b      	cbz	r3, 8000f00 <_free_r+0x50>
 8000efc:	42a3      	cmp	r3, r4
 8000efe:	d9fa      	bls.n	8000ef6 <_free_r+0x46>
 8000f00:	6811      	ldr	r1, [r2, #0]
 8000f02:	1855      	adds	r5, r2, r1
 8000f04:	42a5      	cmp	r5, r4
 8000f06:	d10b      	bne.n	8000f20 <_free_r+0x70>
 8000f08:	6824      	ldr	r4, [r4, #0]
 8000f0a:	4421      	add	r1, r4
 8000f0c:	1854      	adds	r4, r2, r1
 8000f0e:	42a3      	cmp	r3, r4
 8000f10:	6011      	str	r1, [r2, #0]
 8000f12:	d1e0      	bne.n	8000ed6 <_free_r+0x26>
 8000f14:	681c      	ldr	r4, [r3, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	6053      	str	r3, [r2, #4]
 8000f1a:	440c      	add	r4, r1
 8000f1c:	6014      	str	r4, [r2, #0]
 8000f1e:	e7da      	b.n	8000ed6 <_free_r+0x26>
 8000f20:	d902      	bls.n	8000f28 <_free_r+0x78>
 8000f22:	230c      	movs	r3, #12
 8000f24:	6003      	str	r3, [r0, #0]
 8000f26:	e7d6      	b.n	8000ed6 <_free_r+0x26>
 8000f28:	6825      	ldr	r5, [r4, #0]
 8000f2a:	1961      	adds	r1, r4, r5
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	bf04      	itt	eq
 8000f30:	6819      	ldreq	r1, [r3, #0]
 8000f32:	685b      	ldreq	r3, [r3, #4]
 8000f34:	6063      	str	r3, [r4, #4]
 8000f36:	bf04      	itt	eq
 8000f38:	1949      	addeq	r1, r1, r5
 8000f3a:	6021      	streq	r1, [r4, #0]
 8000f3c:	6054      	str	r4, [r2, #4]
 8000f3e:	e7ca      	b.n	8000ed6 <_free_r+0x26>
 8000f40:	b003      	add	sp, #12
 8000f42:	bd30      	pop	{r4, r5, pc}
 8000f44:	20001090 	.word	0x20001090

08000f48 <sbrk_aligned>:
 8000f48:	b570      	push	{r4, r5, r6, lr}
 8000f4a:	4e0e      	ldr	r6, [pc, #56]	; (8000f84 <sbrk_aligned+0x3c>)
 8000f4c:	460c      	mov	r4, r1
 8000f4e:	6831      	ldr	r1, [r6, #0]
 8000f50:	4605      	mov	r5, r0
 8000f52:	b911      	cbnz	r1, 8000f5a <sbrk_aligned+0x12>
 8000f54:	f000 f8bc 	bl	80010d0 <_sbrk_r>
 8000f58:	6030      	str	r0, [r6, #0]
 8000f5a:	4621      	mov	r1, r4
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	f000 f8b7 	bl	80010d0 <_sbrk_r>
 8000f62:	1c43      	adds	r3, r0, #1
 8000f64:	d00a      	beq.n	8000f7c <sbrk_aligned+0x34>
 8000f66:	1cc4      	adds	r4, r0, #3
 8000f68:	f024 0403 	bic.w	r4, r4, #3
 8000f6c:	42a0      	cmp	r0, r4
 8000f6e:	d007      	beq.n	8000f80 <sbrk_aligned+0x38>
 8000f70:	1a21      	subs	r1, r4, r0
 8000f72:	4628      	mov	r0, r5
 8000f74:	f000 f8ac 	bl	80010d0 <_sbrk_r>
 8000f78:	3001      	adds	r0, #1
 8000f7a:	d101      	bne.n	8000f80 <sbrk_aligned+0x38>
 8000f7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000f80:	4620      	mov	r0, r4
 8000f82:	bd70      	pop	{r4, r5, r6, pc}
 8000f84:	20001094 	.word	0x20001094

08000f88 <_malloc_r>:
 8000f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f8c:	1ccd      	adds	r5, r1, #3
 8000f8e:	f025 0503 	bic.w	r5, r5, #3
 8000f92:	3508      	adds	r5, #8
 8000f94:	2d0c      	cmp	r5, #12
 8000f96:	bf38      	it	cc
 8000f98:	250c      	movcc	r5, #12
 8000f9a:	2d00      	cmp	r5, #0
 8000f9c:	4607      	mov	r7, r0
 8000f9e:	db01      	blt.n	8000fa4 <_malloc_r+0x1c>
 8000fa0:	42a9      	cmp	r1, r5
 8000fa2:	d905      	bls.n	8000fb0 <_malloc_r+0x28>
 8000fa4:	230c      	movs	r3, #12
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	2600      	movs	r6, #0
 8000faa:	4630      	mov	r0, r6
 8000fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fb0:	4e2e      	ldr	r6, [pc, #184]	; (800106c <_malloc_r+0xe4>)
 8000fb2:	f000 f89d 	bl	80010f0 <__malloc_lock>
 8000fb6:	6833      	ldr	r3, [r6, #0]
 8000fb8:	461c      	mov	r4, r3
 8000fba:	bb34      	cbnz	r4, 800100a <_malloc_r+0x82>
 8000fbc:	4629      	mov	r1, r5
 8000fbe:	4638      	mov	r0, r7
 8000fc0:	f7ff ffc2 	bl	8000f48 <sbrk_aligned>
 8000fc4:	1c43      	adds	r3, r0, #1
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	d14d      	bne.n	8001066 <_malloc_r+0xde>
 8000fca:	6834      	ldr	r4, [r6, #0]
 8000fcc:	4626      	mov	r6, r4
 8000fce:	2e00      	cmp	r6, #0
 8000fd0:	d140      	bne.n	8001054 <_malloc_r+0xcc>
 8000fd2:	6823      	ldr	r3, [r4, #0]
 8000fd4:	4631      	mov	r1, r6
 8000fd6:	4638      	mov	r0, r7
 8000fd8:	eb04 0803 	add.w	r8, r4, r3
 8000fdc:	f000 f878 	bl	80010d0 <_sbrk_r>
 8000fe0:	4580      	cmp	r8, r0
 8000fe2:	d13a      	bne.n	800105a <_malloc_r+0xd2>
 8000fe4:	6823      	ldr	r3, [r4, #0]
 8000fe6:	3503      	adds	r5, #3
 8000fe8:	1aed      	subs	r5, r5, r3
 8000fea:	f025 0503 	bic.w	r5, r5, #3
 8000fee:	3508      	adds	r5, #8
 8000ff0:	2d0c      	cmp	r5, #12
 8000ff2:	bf38      	it	cc
 8000ff4:	250c      	movcc	r5, #12
 8000ff6:	4629      	mov	r1, r5
 8000ff8:	4638      	mov	r0, r7
 8000ffa:	f7ff ffa5 	bl	8000f48 <sbrk_aligned>
 8000ffe:	3001      	adds	r0, #1
 8001000:	d02b      	beq.n	800105a <_malloc_r+0xd2>
 8001002:	6823      	ldr	r3, [r4, #0]
 8001004:	442b      	add	r3, r5
 8001006:	6023      	str	r3, [r4, #0]
 8001008:	e00e      	b.n	8001028 <_malloc_r+0xa0>
 800100a:	6822      	ldr	r2, [r4, #0]
 800100c:	1b52      	subs	r2, r2, r5
 800100e:	d41e      	bmi.n	800104e <_malloc_r+0xc6>
 8001010:	2a0b      	cmp	r2, #11
 8001012:	d916      	bls.n	8001042 <_malloc_r+0xba>
 8001014:	1961      	adds	r1, r4, r5
 8001016:	42a3      	cmp	r3, r4
 8001018:	6025      	str	r5, [r4, #0]
 800101a:	bf18      	it	ne
 800101c:	6059      	strne	r1, [r3, #4]
 800101e:	6863      	ldr	r3, [r4, #4]
 8001020:	bf08      	it	eq
 8001022:	6031      	streq	r1, [r6, #0]
 8001024:	5162      	str	r2, [r4, r5]
 8001026:	604b      	str	r3, [r1, #4]
 8001028:	4638      	mov	r0, r7
 800102a:	f104 060b 	add.w	r6, r4, #11
 800102e:	f000 f865 	bl	80010fc <__malloc_unlock>
 8001032:	f026 0607 	bic.w	r6, r6, #7
 8001036:	1d23      	adds	r3, r4, #4
 8001038:	1af2      	subs	r2, r6, r3
 800103a:	d0b6      	beq.n	8000faa <_malloc_r+0x22>
 800103c:	1b9b      	subs	r3, r3, r6
 800103e:	50a3      	str	r3, [r4, r2]
 8001040:	e7b3      	b.n	8000faa <_malloc_r+0x22>
 8001042:	6862      	ldr	r2, [r4, #4]
 8001044:	42a3      	cmp	r3, r4
 8001046:	bf0c      	ite	eq
 8001048:	6032      	streq	r2, [r6, #0]
 800104a:	605a      	strne	r2, [r3, #4]
 800104c:	e7ec      	b.n	8001028 <_malloc_r+0xa0>
 800104e:	4623      	mov	r3, r4
 8001050:	6864      	ldr	r4, [r4, #4]
 8001052:	e7b2      	b.n	8000fba <_malloc_r+0x32>
 8001054:	4634      	mov	r4, r6
 8001056:	6876      	ldr	r6, [r6, #4]
 8001058:	e7b9      	b.n	8000fce <_malloc_r+0x46>
 800105a:	230c      	movs	r3, #12
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	4638      	mov	r0, r7
 8001060:	f000 f84c 	bl	80010fc <__malloc_unlock>
 8001064:	e7a1      	b.n	8000faa <_malloc_r+0x22>
 8001066:	6025      	str	r5, [r4, #0]
 8001068:	e7de      	b.n	8001028 <_malloc_r+0xa0>
 800106a:	bf00      	nop
 800106c:	20001090 	.word	0x20001090

08001070 <_realloc_r>:
 8001070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001074:	4680      	mov	r8, r0
 8001076:	4614      	mov	r4, r2
 8001078:	460e      	mov	r6, r1
 800107a:	b921      	cbnz	r1, 8001086 <_realloc_r+0x16>
 800107c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001080:	4611      	mov	r1, r2
 8001082:	f7ff bf81 	b.w	8000f88 <_malloc_r>
 8001086:	b92a      	cbnz	r2, 8001094 <_realloc_r+0x24>
 8001088:	f7ff ff12 	bl	8000eb0 <_free_r>
 800108c:	4625      	mov	r5, r4
 800108e:	4628      	mov	r0, r5
 8001090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001094:	f000 f838 	bl	8001108 <_malloc_usable_size_r>
 8001098:	4284      	cmp	r4, r0
 800109a:	4607      	mov	r7, r0
 800109c:	d802      	bhi.n	80010a4 <_realloc_r+0x34>
 800109e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80010a2:	d812      	bhi.n	80010ca <_realloc_r+0x5a>
 80010a4:	4621      	mov	r1, r4
 80010a6:	4640      	mov	r0, r8
 80010a8:	f7ff ff6e 	bl	8000f88 <_malloc_r>
 80010ac:	4605      	mov	r5, r0
 80010ae:	2800      	cmp	r0, #0
 80010b0:	d0ed      	beq.n	800108e <_realloc_r+0x1e>
 80010b2:	42bc      	cmp	r4, r7
 80010b4:	4622      	mov	r2, r4
 80010b6:	4631      	mov	r1, r6
 80010b8:	bf28      	it	cs
 80010ba:	463a      	movcs	r2, r7
 80010bc:	f7ff fed0 	bl	8000e60 <memcpy>
 80010c0:	4631      	mov	r1, r6
 80010c2:	4640      	mov	r0, r8
 80010c4:	f7ff fef4 	bl	8000eb0 <_free_r>
 80010c8:	e7e1      	b.n	800108e <_realloc_r+0x1e>
 80010ca:	4635      	mov	r5, r6
 80010cc:	e7df      	b.n	800108e <_realloc_r+0x1e>
	...

080010d0 <_sbrk_r>:
 80010d0:	b538      	push	{r3, r4, r5, lr}
 80010d2:	4d06      	ldr	r5, [pc, #24]	; (80010ec <_sbrk_r+0x1c>)
 80010d4:	2300      	movs	r3, #0
 80010d6:	4604      	mov	r4, r0
 80010d8:	4608      	mov	r0, r1
 80010da:	602b      	str	r3, [r5, #0]
 80010dc:	f000 f81c 	bl	8001118 <_sbrk>
 80010e0:	1c43      	adds	r3, r0, #1
 80010e2:	d102      	bne.n	80010ea <_sbrk_r+0x1a>
 80010e4:	682b      	ldr	r3, [r5, #0]
 80010e6:	b103      	cbz	r3, 80010ea <_sbrk_r+0x1a>
 80010e8:	6023      	str	r3, [r4, #0]
 80010ea:	bd38      	pop	{r3, r4, r5, pc}
 80010ec:	20001098 	.word	0x20001098

080010f0 <__malloc_lock>:
 80010f0:	4801      	ldr	r0, [pc, #4]	; (80010f8 <__malloc_lock+0x8>)
 80010f2:	f7ff bbcb 	b.w	800088c <__retarget_lock_acquire_recursive>
 80010f6:	bf00      	nop
 80010f8:	2000108c 	.word	0x2000108c

080010fc <__malloc_unlock>:
 80010fc:	4801      	ldr	r0, [pc, #4]	; (8001104 <__malloc_unlock+0x8>)
 80010fe:	f7ff bbc6 	b.w	800088e <__retarget_lock_release_recursive>
 8001102:	bf00      	nop
 8001104:	2000108c 	.word	0x2000108c

08001108 <_malloc_usable_size_r>:
 8001108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800110c:	1f18      	subs	r0, r3, #4
 800110e:	2b00      	cmp	r3, #0
 8001110:	bfbc      	itt	lt
 8001112:	580b      	ldrlt	r3, [r1, r0]
 8001114:	18c0      	addlt	r0, r0, r3
 8001116:	4770      	bx	lr

08001118 <_sbrk>:
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <_sbrk+0x14>)
 800111a:	4905      	ldr	r1, [pc, #20]	; (8001130 <_sbrk+0x18>)
 800111c:	6813      	ldr	r3, [r2, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	bf08      	it	eq
 8001122:	460b      	moveq	r3, r1
 8001124:	4418      	add	r0, r3
 8001126:	6010      	str	r0, [r2, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	4770      	bx	lr
 800112c:	2000109c 	.word	0x2000109c
 8001130:	200010a0 	.word	0x200010a0

08001134 <_init>:
 8001134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001136:	bf00      	nop
 8001138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800113a:	bc08      	pop	{r3}
 800113c:	469e      	mov	lr, r3
 800113e:	4770      	bx	lr

08001140 <_fini>:
 8001140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001142:	bf00      	nop
 8001144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001146:	bc08      	pop	{r3}
 8001148:	469e      	mov	lr, r3
 800114a:	4770      	bx	lr
